// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                          = new(Query)
	ActionInfo                 *actionInfo
	AlarmConfig                *alarmConfig
	AlarmHistory               *alarmHistory
	AlarmInfo                  *alarmInfo
	AttributeData              *attributeData
	AttributeSetLog            *attributeSetLog
	Board                      *board
	CasbinRule                 *casbinRule
	CommandSetLog              *commandSetLog
	DataPolicy                 *dataPolicy
	DataScript                 *dataScript
	Device                     *device
	DeviceConfig               *deviceConfig
	DeviceModelAttribute       *deviceModelAttribute
	DeviceModelCommand         *deviceModelCommand
	DeviceModelCustomCommand   *deviceModelCustomCommand
	DeviceModelCustomControl   *deviceModelCustomControl
	DeviceModelEvent           *deviceModelEvent
	DeviceModelTelemetry       *deviceModelTelemetry
	DeviceTemplate             *deviceTemplate
	DeviceTriggerCondition     *deviceTriggerCondition
	DeviceUserLog              *deviceUserLog
	EventData                  *eventData
	Group                      *group
	Logo                       *logo
	NotificationGroup          *notificationGroup
	NotificationHistory        *notificationHistory
	NotificationServicesConfig *notificationServicesConfig
	OneTimeTask                *oneTimeTask
	OperationLog               *operationLog
	OtaUpgradePackage          *otaUpgradePackage
	OtaUpgradeTask             *otaUpgradeTask
	OtaUpgradeTaskDetail       *otaUpgradeTaskDetail
	PeriodicTask               *periodicTask
	Product                    *product
	ProtocolPlugin             *protocolPlugin
	RGroupDevice               *rGroupDevice
	Role                       *role
	SceneActionInfo            *sceneActionInfo
	SceneAutomation            *sceneAutomation
	SceneAutomationLog         *sceneAutomationLog
	SceneInfo                  *sceneInfo
	SceneLog                   *sceneLog
	ServiceAccess              *serviceAccess
	ServicePlugin              *servicePlugin
	SysDict                    *sysDict
	SysDictLanguage            *sysDictLanguage
	SysFunction                *sysFunction
	SysUIElement               *sysUIElement
	SysVersion                 *sysVersion
	TelemetryCurrentData       *telemetryCurrentData
	TelemetryData              *telemetryData
	TelemetrySetLog            *telemetrySetLog
	User                       *user
	VisDashboard               *visDashboard
	VisFile                    *visFile
	VisPlugin                  *visPlugin
	VisPluginLocal             *visPluginLocal
	ExpectedData 			   *expectedData
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	ActionInfo = &Q.ActionInfo
	AlarmConfig = &Q.AlarmConfig
	AlarmHistory = &Q.AlarmHistory
	AlarmInfo = &Q.AlarmInfo
	AttributeData = &Q.AttributeData
	AttributeSetLog = &Q.AttributeSetLog
	Board = &Q.Board
	CasbinRule = &Q.CasbinRule
	CommandSetLog = &Q.CommandSetLog
	DataPolicy = &Q.DataPolicy
	DataScript = &Q.DataScript
	Device = &Q.Device
	DeviceConfig = &Q.DeviceConfig
	DeviceModelAttribute = &Q.DeviceModelAttribute
	DeviceModelCommand = &Q.DeviceModelCommand
	DeviceModelCustomCommand = &Q.DeviceModelCustomCommand
	DeviceModelCustomControl = &Q.DeviceModelCustomControl
	DeviceModelEvent = &Q.DeviceModelEvent
	DeviceModelTelemetry = &Q.DeviceModelTelemetry
	DeviceTemplate = &Q.DeviceTemplate
	DeviceTriggerCondition = &Q.DeviceTriggerCondition
	DeviceUserLog = &Q.DeviceUserLog
	EventData = &Q.EventData
	Group = &Q.Group
	Logo = &Q.Logo
	NotificationGroup = &Q.NotificationGroup
	NotificationHistory = &Q.NotificationHistory
	NotificationServicesConfig = &Q.NotificationServicesConfig
	OneTimeTask = &Q.OneTimeTask
	OperationLog = &Q.OperationLog
	OtaUpgradePackage = &Q.OtaUpgradePackage
	OtaUpgradeTask = &Q.OtaUpgradeTask
	OtaUpgradeTaskDetail = &Q.OtaUpgradeTaskDetail
	PeriodicTask = &Q.PeriodicTask
	Product = &Q.Product
	ProtocolPlugin = &Q.ProtocolPlugin
	RGroupDevice = &Q.RGroupDevice
	Role = &Q.Role
	SceneActionInfo = &Q.SceneActionInfo
	SceneAutomation = &Q.SceneAutomation
	SceneAutomationLog = &Q.SceneAutomationLog
	SceneInfo = &Q.SceneInfo
	SceneLog = &Q.SceneLog
	ServiceAccess = &Q.ServiceAccess
	ServicePlugin = &Q.ServicePlugin
	SysDict = &Q.SysDict
	SysDictLanguage = &Q.SysDictLanguage
	SysFunction = &Q.SysFunction
	SysUIElement = &Q.SysUIElement
	SysVersion = &Q.SysVersion
	TelemetryCurrentData = &Q.TelemetryCurrentData
	TelemetryData = &Q.TelemetryData
	TelemetrySetLog = &Q.TelemetrySetLog
	User = &Q.User
	VisDashboard = &Q.VisDashboard
	VisFile = &Q.VisFile
	VisPlugin = &Q.VisPlugin
	VisPluginLocal = &Q.VisPluginLocal
	ExpectedData = &Q.ExpectedData
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                         db,
		ActionInfo:                 newActionInfo(db, opts...),
		AlarmConfig:                newAlarmConfig(db, opts...),
		AlarmHistory:               newAlarmHistory(db, opts...),
		AlarmInfo:                  newAlarmInfo(db, opts...),
		AttributeData:              newAttributeData(db, opts...),
		AttributeSetLog:            newAttributeSetLog(db, opts...),
		Board:                      newBoard(db, opts...),
		CasbinRule:                 newCasbinRule(db, opts...),
		CommandSetLog:              newCommandSetLog(db, opts...),
		DataPolicy:                 newDataPolicy(db, opts...),
		DataScript:                 newDataScript(db, opts...),
		Device:                     newDevice(db, opts...),
		DeviceConfig:               newDeviceConfig(db, opts...),
		DeviceModelAttribute:       newDeviceModelAttribute(db, opts...),
		DeviceModelCommand:         newDeviceModelCommand(db, opts...),
		DeviceModelCustomCommand:   newDeviceModelCustomCommand(db, opts...),
		DeviceModelCustomControl:   newDeviceModelCustomControl(db, opts...),
		DeviceModelEvent:           newDeviceModelEvent(db, opts...),
		DeviceModelTelemetry:       newDeviceModelTelemetry(db, opts...),
		DeviceTemplate:             newDeviceTemplate(db, opts...),
		DeviceTriggerCondition:     newDeviceTriggerCondition(db, opts...),
		DeviceUserLog:              newDeviceUserLog(db, opts...),
		EventData:                  newEventData(db, opts...),
		Group:                      newGroup(db, opts...),
		Logo:                       newLogo(db, opts...),
		NotificationGroup:          newNotificationGroup(db, opts...),
		NotificationHistory:        newNotificationHistory(db, opts...),
		NotificationServicesConfig: newNotificationServicesConfig(db, opts...),
		OneTimeTask:                newOneTimeTask(db, opts...),
		OperationLog:               newOperationLog(db, opts...),
		OtaUpgradePackage:          newOtaUpgradePackage(db, opts...),
		OtaUpgradeTask:             newOtaUpgradeTask(db, opts...),
		OtaUpgradeTaskDetail:       newOtaUpgradeTaskDetail(db, opts...),
		PeriodicTask:               newPeriodicTask(db, opts...),
		Product:                    newProduct(db, opts...),
		ProtocolPlugin:             newProtocolPlugin(db, opts...),
		RGroupDevice:               newRGroupDevice(db, opts...),
		Role:                       newRole(db, opts...),
		SceneActionInfo:            newSceneActionInfo(db, opts...),
		SceneAutomation:            newSceneAutomation(db, opts...),
		SceneAutomationLog:         newSceneAutomationLog(db, opts...),
		SceneInfo:                  newSceneInfo(db, opts...),
		SceneLog:                   newSceneLog(db, opts...),
		ServiceAccess:              newServiceAccess(db, opts...),
		ServicePlugin:              newServicePlugin(db, opts...),
		SysDict:                    newSysDict(db, opts...),
		SysDictLanguage:            newSysDictLanguage(db, opts...),
		SysFunction:                newSysFunction(db, opts...),
		SysUIElement:               newSysUIElement(db, opts...),
		SysVersion:                 newSysVersion(db, opts...),
		TelemetryCurrentData:       newTelemetryCurrentData(db, opts...),
		TelemetryData:              newTelemetryData(db, opts...),
		TelemetrySetLog:            newTelemetrySetLog(db, opts...),
		User:                       newUser(db, opts...),
		VisDashboard:               newVisDashboard(db, opts...),
		VisFile:                    newVisFile(db, opts...),
		VisPlugin:                  newVisPlugin(db, opts...),
		VisPluginLocal:             newVisPluginLocal(db, opts...),
		ExpectedData:                newExpectedData(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	ActionInfo                 actionInfo
	AlarmConfig                alarmConfig
	AlarmHistory               alarmHistory
	AlarmInfo                  alarmInfo
	AttributeData              attributeData
	AttributeSetLog            attributeSetLog
	Board                      board
	CasbinRule                 casbinRule
	CommandSetLog              commandSetLog
	DataPolicy                 dataPolicy
	DataScript                 dataScript
	Device                     device
	DeviceConfig               deviceConfig
	DeviceModelAttribute       deviceModelAttribute
	DeviceModelCommand         deviceModelCommand
	DeviceModelCustomCommand   deviceModelCustomCommand
	DeviceModelCustomControl   deviceModelCustomControl
	DeviceModelEvent           deviceModelEvent
	DeviceModelTelemetry       deviceModelTelemetry
	DeviceTemplate             deviceTemplate
	DeviceTriggerCondition     deviceTriggerCondition
	DeviceUserLog              deviceUserLog
	EventData                  eventData
	Group                      group
	Logo                       logo
	NotificationGroup          notificationGroup
	NotificationHistory        notificationHistory
	NotificationServicesConfig notificationServicesConfig
	OneTimeTask                oneTimeTask
	OperationLog               operationLog
	OtaUpgradePackage          otaUpgradePackage
	OtaUpgradeTask             otaUpgradeTask
	OtaUpgradeTaskDetail       otaUpgradeTaskDetail
	PeriodicTask               periodicTask
	Product                    product
	ProtocolPlugin             protocolPlugin
	RGroupDevice               rGroupDevice
	Role                       role
	SceneActionInfo            sceneActionInfo
	SceneAutomation            sceneAutomation
	SceneAutomationLog         sceneAutomationLog
	SceneInfo                  sceneInfo
	SceneLog                   sceneLog
	ServiceAccess              serviceAccess
	ServicePlugin              servicePlugin
	SysDict                    sysDict
	SysDictLanguage            sysDictLanguage
	SysFunction                sysFunction
	SysUIElement               sysUIElement
	SysVersion                 sysVersion
	TelemetryCurrentData       telemetryCurrentData
	TelemetryData              telemetryData
	TelemetrySetLog            telemetrySetLog
	User                       user
	VisDashboard               visDashboard
	VisFile                    visFile
	VisPlugin                  visPlugin
	VisPluginLocal             visPluginLocal
	ExpectedData               expectedData

}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                         db,
		ActionInfo:                 q.ActionInfo.clone(db),
		AlarmConfig:                q.AlarmConfig.clone(db),
		AlarmHistory:               q.AlarmHistory.clone(db),
		AlarmInfo:                  q.AlarmInfo.clone(db),
		AttributeData:              q.AttributeData.clone(db),
		AttributeSetLog:            q.AttributeSetLog.clone(db),
		Board:                      q.Board.clone(db),
		CasbinRule:                 q.CasbinRule.clone(db),
		CommandSetLog:              q.CommandSetLog.clone(db),
		DataPolicy:                 q.DataPolicy.clone(db),
		DataScript:                 q.DataScript.clone(db),
		Device:                     q.Device.clone(db),
		DeviceConfig:               q.DeviceConfig.clone(db),
		DeviceModelAttribute:       q.DeviceModelAttribute.clone(db),
		DeviceModelCommand:         q.DeviceModelCommand.clone(db),
		DeviceModelCustomCommand:   q.DeviceModelCustomCommand.clone(db),
		DeviceModelCustomControl:   q.DeviceModelCustomControl.clone(db),
		DeviceModelEvent:           q.DeviceModelEvent.clone(db),
		DeviceModelTelemetry:       q.DeviceModelTelemetry.clone(db),
		DeviceTemplate:             q.DeviceTemplate.clone(db),
		DeviceTriggerCondition:     q.DeviceTriggerCondition.clone(db),
		DeviceUserLog:              q.DeviceUserLog.clone(db),
		EventData:                  q.EventData.clone(db),
		Group:                      q.Group.clone(db),
		Logo:                       q.Logo.clone(db),
		NotificationGroup:          q.NotificationGroup.clone(db),
		NotificationHistory:        q.NotificationHistory.clone(db),
		NotificationServicesConfig: q.NotificationServicesConfig.clone(db),
		OneTimeTask:                q.OneTimeTask.clone(db),
		OperationLog:               q.OperationLog.clone(db),
		OtaUpgradePackage:          q.OtaUpgradePackage.clone(db),
		OtaUpgradeTask:             q.OtaUpgradeTask.clone(db),
		OtaUpgradeTaskDetail:       q.OtaUpgradeTaskDetail.clone(db),
		PeriodicTask:               q.PeriodicTask.clone(db),
		Product:                    q.Product.clone(db),
		ProtocolPlugin:             q.ProtocolPlugin.clone(db),
		RGroupDevice:               q.RGroupDevice.clone(db),
		Role:                       q.Role.clone(db),
		SceneActionInfo:            q.SceneActionInfo.clone(db),
		SceneAutomation:            q.SceneAutomation.clone(db),
		SceneAutomationLog:         q.SceneAutomationLog.clone(db),
		SceneInfo:                  q.SceneInfo.clone(db),
		SceneLog:                   q.SceneLog.clone(db),
		ServiceAccess:              q.ServiceAccess.clone(db),
		ServicePlugin:              q.ServicePlugin.clone(db),
		SysDict:                    q.SysDict.clone(db),
		SysDictLanguage:            q.SysDictLanguage.clone(db),
		SysFunction:                q.SysFunction.clone(db),
		SysUIElement:               q.SysUIElement.clone(db),
		SysVersion:                 q.SysVersion.clone(db),
		TelemetryCurrentData:       q.TelemetryCurrentData.clone(db),
		TelemetryData:              q.TelemetryData.clone(db),
		TelemetrySetLog:            q.TelemetrySetLog.clone(db),
		User:                       q.User.clone(db),
		VisDashboard:               q.VisDashboard.clone(db),
		VisFile:                    q.VisFile.clone(db),
		VisPlugin:                  q.VisPlugin.clone(db),
		VisPluginLocal:             q.VisPluginLocal.clone(db),
		ExpectedData:               q.ExpectedData.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                         db,
		ActionInfo:                 q.ActionInfo.replaceDB(db),
		AlarmConfig:                q.AlarmConfig.replaceDB(db),
		AlarmHistory:               q.AlarmHistory.replaceDB(db),
		AlarmInfo:                  q.AlarmInfo.replaceDB(db),
		AttributeData:              q.AttributeData.replaceDB(db),
		AttributeSetLog:            q.AttributeSetLog.replaceDB(db),
		Board:                      q.Board.replaceDB(db),
		CasbinRule:                 q.CasbinRule.replaceDB(db),
		CommandSetLog:              q.CommandSetLog.replaceDB(db),
		DataPolicy:                 q.DataPolicy.replaceDB(db),
		DataScript:                 q.DataScript.replaceDB(db),
		Device:                     q.Device.replaceDB(db),
		DeviceConfig:               q.DeviceConfig.replaceDB(db),
		DeviceModelAttribute:       q.DeviceModelAttribute.replaceDB(db),
		DeviceModelCommand:         q.DeviceModelCommand.replaceDB(db),
		DeviceModelCustomCommand:   q.DeviceModelCustomCommand.replaceDB(db),
		DeviceModelCustomControl:   q.DeviceModelCustomControl.replaceDB(db),
		DeviceModelEvent:           q.DeviceModelEvent.replaceDB(db),
		DeviceModelTelemetry:       q.DeviceModelTelemetry.replaceDB(db),
		DeviceTemplate:             q.DeviceTemplate.replaceDB(db),
		DeviceTriggerCondition:     q.DeviceTriggerCondition.replaceDB(db),
		DeviceUserLog:              q.DeviceUserLog.replaceDB(db),
		EventData:                  q.EventData.replaceDB(db),
		Group:                      q.Group.replaceDB(db),
		Logo:                       q.Logo.replaceDB(db),
		NotificationGroup:          q.NotificationGroup.replaceDB(db),
		NotificationHistory:        q.NotificationHistory.replaceDB(db),
		NotificationServicesConfig: q.NotificationServicesConfig.replaceDB(db),
		OneTimeTask:                q.OneTimeTask.replaceDB(db),
		OperationLog:               q.OperationLog.replaceDB(db),
		OtaUpgradePackage:          q.OtaUpgradePackage.replaceDB(db),
		OtaUpgradeTask:             q.OtaUpgradeTask.replaceDB(db),
		OtaUpgradeTaskDetail:       q.OtaUpgradeTaskDetail.replaceDB(db),
		PeriodicTask:               q.PeriodicTask.replaceDB(db),
		Product:                    q.Product.replaceDB(db),
		ProtocolPlugin:             q.ProtocolPlugin.replaceDB(db),
		RGroupDevice:               q.RGroupDevice.replaceDB(db),
		Role:                       q.Role.replaceDB(db),
		SceneActionInfo:            q.SceneActionInfo.replaceDB(db),
		SceneAutomation:            q.SceneAutomation.replaceDB(db),
		SceneAutomationLog:         q.SceneAutomationLog.replaceDB(db),
		SceneInfo:                  q.SceneInfo.replaceDB(db),
		SceneLog:                   q.SceneLog.replaceDB(db),
		ServiceAccess:              q.ServiceAccess.replaceDB(db),
		ServicePlugin:              q.ServicePlugin.replaceDB(db),
		SysDict:                    q.SysDict.replaceDB(db),
		SysDictLanguage:            q.SysDictLanguage.replaceDB(db),
		SysFunction:                q.SysFunction.replaceDB(db),
		SysUIElement:               q.SysUIElement.replaceDB(db),
		SysVersion:                 q.SysVersion.replaceDB(db),
		TelemetryCurrentData:       q.TelemetryCurrentData.replaceDB(db),
		TelemetryData:              q.TelemetryData.replaceDB(db),
		TelemetrySetLog:            q.TelemetrySetLog.replaceDB(db),
		User:                       q.User.replaceDB(db),
		VisDashboard:               q.VisDashboard.replaceDB(db),
		VisFile:                    q.VisFile.replaceDB(db),
		VisPlugin:                  q.VisPlugin.replaceDB(db),
		VisPluginLocal:             q.VisPluginLocal.replaceDB(db),
		ExpectedData:               q.ExpectedData.replaceDB(db),
	}
}

type queryCtx struct {
	ActionInfo                 IActionInfoDo
	AlarmConfig                IAlarmConfigDo
	AlarmHistory               IAlarmHistoryDo
	AlarmInfo                  IAlarmInfoDo
	AttributeData              IAttributeDataDo
	AttributeSetLog            IAttributeSetLogDo
	Board                      IBoardDo
	CasbinRule                 ICasbinRuleDo
	CommandSetLog              ICommandSetLogDo
	DataPolicy                 IDataPolicyDo
	DataScript                 IDataScriptDo
	Device                     IDeviceDo
	DeviceConfig               IDeviceConfigDo
	DeviceModelAttribute       IDeviceModelAttributeDo
	DeviceModelCommand         IDeviceModelCommandDo
	DeviceModelCustomCommand   IDeviceModelCustomCommandDo
	DeviceModelCustomControl   IDeviceModelCustomControlDo
	DeviceModelEvent           IDeviceModelEventDo
	DeviceModelTelemetry       IDeviceModelTelemetryDo
	DeviceTemplate             IDeviceTemplateDo
	DeviceTriggerCondition     IDeviceTriggerConditionDo
	DeviceUserLog              IDeviceUserLogDo
	EventData                  IEventDataDo
	Group                      IGroupDo
	Logo                       ILogoDo
	NotificationGroup          INotificationGroupDo
	NotificationHistory        INotificationHistoryDo
	NotificationServicesConfig INotificationServicesConfigDo
	OneTimeTask                IOneTimeTaskDo
	OperationLog               IOperationLogDo
	OtaUpgradePackage          IOtaUpgradePackageDo
	OtaUpgradeTask             IOtaUpgradeTaskDo
	OtaUpgradeTaskDetail       IOtaUpgradeTaskDetailDo
	PeriodicTask               IPeriodicTaskDo
	Product                    IProductDo
	ProtocolPlugin             IProtocolPluginDo
	RGroupDevice               IRGroupDeviceDo
	Role                       IRoleDo
	SceneActionInfo            ISceneActionInfoDo
	SceneAutomation            ISceneAutomationDo
	SceneAutomationLog         ISceneAutomationLogDo
	SceneInfo                  ISceneInfoDo
	SceneLog                   ISceneLogDo
	ServiceAccess              IServiceAccessDo
	ServicePlugin              IServicePluginDo
	SysDict                    ISysDictDo
	SysDictLanguage            ISysDictLanguageDo
	SysFunction                ISysFunctionDo
	SysUIElement               ISysUIElementDo
	SysVersion                 ISysVersionDo
	TelemetryCurrentData       ITelemetryCurrentDataDo
	TelemetryData              ITelemetryDataDo
	TelemetrySetLog            ITelemetrySetLogDo
	User                       IUserDo
	VisDashboard               IVisDashboardDo
	VisFile                    IVisFileDo
	VisPlugin                  IVisPluginDo
	VisPluginLocal             IVisPluginLocalDo
	ExpectedData               IExpectedDataDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		ActionInfo:                 q.ActionInfo.WithContext(ctx),
		AlarmConfig:                q.AlarmConfig.WithContext(ctx),
		AlarmHistory:               q.AlarmHistory.WithContext(ctx),
		AlarmInfo:                  q.AlarmInfo.WithContext(ctx),
		AttributeData:              q.AttributeData.WithContext(ctx),
		AttributeSetLog:            q.AttributeSetLog.WithContext(ctx),
		Board:                      q.Board.WithContext(ctx),
		CasbinRule:                 q.CasbinRule.WithContext(ctx),
		CommandSetLog:              q.CommandSetLog.WithContext(ctx),
		DataPolicy:                 q.DataPolicy.WithContext(ctx),
		DataScript:                 q.DataScript.WithContext(ctx),
		Device:                     q.Device.WithContext(ctx),
		DeviceConfig:               q.DeviceConfig.WithContext(ctx),
		DeviceModelAttribute:       q.DeviceModelAttribute.WithContext(ctx),
		DeviceModelCommand:         q.DeviceModelCommand.WithContext(ctx),
		DeviceModelCustomCommand:   q.DeviceModelCustomCommand.WithContext(ctx),
		DeviceModelCustomControl:   q.DeviceModelCustomControl.WithContext(ctx),
		DeviceModelEvent:           q.DeviceModelEvent.WithContext(ctx),
		DeviceModelTelemetry:       q.DeviceModelTelemetry.WithContext(ctx),
		DeviceTemplate:             q.DeviceTemplate.WithContext(ctx),
		DeviceTriggerCondition:     q.DeviceTriggerCondition.WithContext(ctx),
		DeviceUserLog:              q.DeviceUserLog.WithContext(ctx),
		EventData:                  q.EventData.WithContext(ctx),
		Group:                      q.Group.WithContext(ctx),
		Logo:                       q.Logo.WithContext(ctx),
		NotificationGroup:          q.NotificationGroup.WithContext(ctx),
		NotificationHistory:        q.NotificationHistory.WithContext(ctx),
		NotificationServicesConfig: q.NotificationServicesConfig.WithContext(ctx),
		OneTimeTask:                q.OneTimeTask.WithContext(ctx),
		OperationLog:               q.OperationLog.WithContext(ctx),
		OtaUpgradePackage:          q.OtaUpgradePackage.WithContext(ctx),
		OtaUpgradeTask:             q.OtaUpgradeTask.WithContext(ctx),
		OtaUpgradeTaskDetail:       q.OtaUpgradeTaskDetail.WithContext(ctx),
		PeriodicTask:               q.PeriodicTask.WithContext(ctx),
		Product:                    q.Product.WithContext(ctx),
		ProtocolPlugin:             q.ProtocolPlugin.WithContext(ctx),
		RGroupDevice:               q.RGroupDevice.WithContext(ctx),
		Role:                       q.Role.WithContext(ctx),
		SceneActionInfo:            q.SceneActionInfo.WithContext(ctx),
		SceneAutomation:            q.SceneAutomation.WithContext(ctx),
		SceneAutomationLog:         q.SceneAutomationLog.WithContext(ctx),
		SceneInfo:                  q.SceneInfo.WithContext(ctx),
		SceneLog:                   q.SceneLog.WithContext(ctx),
		ServiceAccess:              q.ServiceAccess.WithContext(ctx),
		ServicePlugin:              q.ServicePlugin.WithContext(ctx),
		SysDict:                    q.SysDict.WithContext(ctx),
		SysDictLanguage:            q.SysDictLanguage.WithContext(ctx),
		SysFunction:                q.SysFunction.WithContext(ctx),
		SysUIElement:               q.SysUIElement.WithContext(ctx),
		SysVersion:                 q.SysVersion.WithContext(ctx),
		TelemetryCurrentData:       q.TelemetryCurrentData.WithContext(ctx),
		TelemetryData:              q.TelemetryData.WithContext(ctx),
		TelemetrySetLog:            q.TelemetrySetLog.WithContext(ctx),
		User:                       q.User.WithContext(ctx),
		VisDashboard:               q.VisDashboard.WithContext(ctx),
		VisFile:                    q.VisFile.WithContext(ctx),
		VisPlugin:                  q.VisPlugin.WithContext(ctx),
		VisPluginLocal:             q.VisPluginLocal.WithContext(ctx),
		ExpectedData:               q.ExpectedData.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
