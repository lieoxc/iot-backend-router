// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newEventData(db *gorm.DB, opts ...gen.DOOption) eventData {
	_eventData := eventData{}

	_eventData.eventDataDo.UseDB(db, opts...)
	_eventData.eventDataDo.UseModel(&model.EventData{})

	tableName := _eventData.eventDataDo.TableName()
	_eventData.ALL = field.NewAsterisk(tableName)
	_eventData.ID = field.NewString(tableName, "id")
	_eventData.DeviceID = field.NewString(tableName, "device_id")
	_eventData.Identify = field.NewString(tableName, "identify")
	_eventData.T = field.NewTime(tableName, "ts")
	_eventData.Datum = field.NewString(tableName, "data")
	_eventData.TenantID = field.NewString(tableName, "tenant_id")

	_eventData.fillFieldMap()

	return _eventData
}

type eventData struct {
	eventDataDo

	ALL      field.Asterisk
	ID       field.String
	DeviceID field.String // 设备id（外键-关联删除）
	Identify field.String // 数据标识符
	T        field.Time   // 上报时间
	Datum    field.String // 数据
	TenantID field.String

	fieldMap map[string]field.Expr
}

func (e eventData) Table(newTableName string) *eventData {
	e.eventDataDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e eventData) As(alias string) *eventData {
	e.eventDataDo.DO = *(e.eventDataDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *eventData) updateTableName(table string) *eventData {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewString(table, "id")
	e.DeviceID = field.NewString(table, "device_id")
	e.Identify = field.NewString(table, "identify")
	e.T = field.NewTime(table, "ts")
	e.Datum = field.NewString(table, "data")
	e.TenantID = field.NewString(table, "tenant_id")

	e.fillFieldMap()

	return e
}

func (e *eventData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *eventData) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["device_id"] = e.DeviceID
	e.fieldMap["identify"] = e.Identify
	e.fieldMap["ts"] = e.T
	e.fieldMap["data"] = e.Datum
	e.fieldMap["tenant_id"] = e.TenantID
}

func (e eventData) clone(db *gorm.DB) eventData {
	e.eventDataDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e eventData) replaceDB(db *gorm.DB) eventData {
	e.eventDataDo.ReplaceDB(db)
	return e
}

type eventDataDo struct{ gen.DO }

type IEventDataDo interface {
	gen.SubQuery
	Debug() IEventDataDo
	WithContext(ctx context.Context) IEventDataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEventDataDo
	WriteDB() IEventDataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEventDataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEventDataDo
	Not(conds ...gen.Condition) IEventDataDo
	Or(conds ...gen.Condition) IEventDataDo
	Select(conds ...field.Expr) IEventDataDo
	Where(conds ...gen.Condition) IEventDataDo
	Order(conds ...field.Expr) IEventDataDo
	Distinct(cols ...field.Expr) IEventDataDo
	Omit(cols ...field.Expr) IEventDataDo
	Join(table schema.Tabler, on ...field.Expr) IEventDataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEventDataDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEventDataDo
	Group(cols ...field.Expr) IEventDataDo
	Having(conds ...gen.Condition) IEventDataDo
	Limit(limit int) IEventDataDo
	Offset(offset int) IEventDataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEventDataDo
	Unscoped() IEventDataDo
	Create(values ...*model.EventData) error
	CreateInBatches(values []*model.EventData, batchSize int) error
	Save(values ...*model.EventData) error
	First() (*model.EventData, error)
	Take() (*model.EventData, error)
	Last() (*model.EventData, error)
	Find() ([]*model.EventData, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EventData, err error)
	FindInBatches(result *[]*model.EventData, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EventData) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEventDataDo
	Assign(attrs ...field.AssignExpr) IEventDataDo
	Joins(fields ...field.RelationField) IEventDataDo
	Preload(fields ...field.RelationField) IEventDataDo
	FirstOrInit() (*model.EventData, error)
	FirstOrCreate() (*model.EventData, error)
	FindByPage(offset int, limit int) (result []*model.EventData, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEventDataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e eventDataDo) Debug() IEventDataDo {
	return e.withDO(e.DO.Debug())
}

func (e eventDataDo) WithContext(ctx context.Context) IEventDataDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e eventDataDo) ReadDB() IEventDataDo {
	return e.Clauses(dbresolver.Read)
}

func (e eventDataDo) WriteDB() IEventDataDo {
	return e.Clauses(dbresolver.Write)
}

func (e eventDataDo) Session(config *gorm.Session) IEventDataDo {
	return e.withDO(e.DO.Session(config))
}

func (e eventDataDo) Clauses(conds ...clause.Expression) IEventDataDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e eventDataDo) Returning(value interface{}, columns ...string) IEventDataDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e eventDataDo) Not(conds ...gen.Condition) IEventDataDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e eventDataDo) Or(conds ...gen.Condition) IEventDataDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e eventDataDo) Select(conds ...field.Expr) IEventDataDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e eventDataDo) Where(conds ...gen.Condition) IEventDataDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e eventDataDo) Order(conds ...field.Expr) IEventDataDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e eventDataDo) Distinct(cols ...field.Expr) IEventDataDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e eventDataDo) Omit(cols ...field.Expr) IEventDataDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e eventDataDo) Join(table schema.Tabler, on ...field.Expr) IEventDataDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e eventDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEventDataDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e eventDataDo) RightJoin(table schema.Tabler, on ...field.Expr) IEventDataDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e eventDataDo) Group(cols ...field.Expr) IEventDataDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e eventDataDo) Having(conds ...gen.Condition) IEventDataDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e eventDataDo) Limit(limit int) IEventDataDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e eventDataDo) Offset(offset int) IEventDataDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e eventDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEventDataDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e eventDataDo) Unscoped() IEventDataDo {
	return e.withDO(e.DO.Unscoped())
}

func (e eventDataDo) Create(values ...*model.EventData) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e eventDataDo) CreateInBatches(values []*model.EventData, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e eventDataDo) Save(values ...*model.EventData) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e eventDataDo) First() (*model.EventData, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventData), nil
	}
}

func (e eventDataDo) Take() (*model.EventData, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventData), nil
	}
}

func (e eventDataDo) Last() (*model.EventData, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventData), nil
	}
}

func (e eventDataDo) Find() ([]*model.EventData, error) {
	result, err := e.DO.Find()
	return result.([]*model.EventData), err
}

func (e eventDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EventData, err error) {
	buf := make([]*model.EventData, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e eventDataDo) FindInBatches(result *[]*model.EventData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e eventDataDo) Attrs(attrs ...field.AssignExpr) IEventDataDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e eventDataDo) Assign(attrs ...field.AssignExpr) IEventDataDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e eventDataDo) Joins(fields ...field.RelationField) IEventDataDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e eventDataDo) Preload(fields ...field.RelationField) IEventDataDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e eventDataDo) FirstOrInit() (*model.EventData, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventData), nil
	}
}

func (e eventDataDo) FirstOrCreate() (*model.EventData, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventData), nil
	}
}

func (e eventDataDo) FindByPage(offset int, limit int) (result []*model.EventData, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e eventDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e eventDataDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e eventDataDo) Delete(models ...*model.EventData) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *eventDataDo) withDO(do gen.Dao) *eventDataDo {
	e.DO = *do.(*gen.DO)
	return e
}
