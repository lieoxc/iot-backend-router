// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newSysUIElement(db *gorm.DB, opts ...gen.DOOption) sysUIElement {
	_sysUIElement := sysUIElement{}

	_sysUIElement.sysUIElementDo.UseDB(db, opts...)
	_sysUIElement.sysUIElementDo.UseModel(&model.SysUIElement{})

	tableName := _sysUIElement.sysUIElementDo.TableName()
	_sysUIElement.ALL = field.NewAsterisk(tableName)
	_sysUIElement.ID = field.NewString(tableName, "id")
	_sysUIElement.ParentID = field.NewString(tableName, "parent_id")
	_sysUIElement.ElementCode = field.NewString(tableName, "element_code")
	_sysUIElement.ElementType = field.NewInt16(tableName, "element_type")
	_sysUIElement.Order_ = field.NewInt16(tableName, "orders")
	_sysUIElement.Param1 = field.NewString(tableName, "param1")
	_sysUIElement.Param2 = field.NewString(tableName, "param2")
	_sysUIElement.Param3 = field.NewString(tableName, "param3")
	_sysUIElement.Authority = field.NewString(tableName, "authority")
	_sysUIElement.Description = field.NewString(tableName, "description")
	_sysUIElement.CreatedAt = field.NewTime(tableName, "created_at")
	_sysUIElement.Remark = field.NewString(tableName, "remark")
	_sysUIElement.Multilingual = field.NewString(tableName, "multilingual")
	_sysUIElement.RoutePath = field.NewString(tableName, "route_path")

	_sysUIElement.fillFieldMap()

	return _sysUIElement
}

type sysUIElement struct {
	sysUIElementDo

	ALL          field.Asterisk
	ID           field.String // 主键ID
	ParentID     field.String // 父元素id
	ElementCode  field.String // 元素标识符
	ElementType  field.Int16  // 元素类型1-菜单 2-目录 3-按钮 4-路由
	Order_       field.Int16  // 排序
	Param1       field.String
	Param2       field.String
	Param3       field.String
	Authority    field.String // 权限(多选)1-系统管理员 2-租户 例如[1,2]
	Description  field.String // 描述
	CreatedAt    field.Time
	Remark       field.String
	Multilingual field.String // 多语言标识符
	RoutePath    field.String

	fieldMap map[string]field.Expr
}

func (s sysUIElement) Table(newTableName string) *sysUIElement {
	s.sysUIElementDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysUIElement) As(alias string) *sysUIElement {
	s.sysUIElementDo.DO = *(s.sysUIElementDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysUIElement) updateTableName(table string) *sysUIElement {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.ParentID = field.NewString(table, "parent_id")
	s.ElementCode = field.NewString(table, "element_code")
	s.ElementType = field.NewInt16(table, "element_type")
	s.Order_ = field.NewInt16(table, "orders")
	s.Param1 = field.NewString(table, "param1")
	s.Param2 = field.NewString(table, "param2")
	s.Param3 = field.NewString(table, "param3")
	s.Authority = field.NewString(table, "authority")
	s.Description = field.NewString(table, "description")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.Remark = field.NewString(table, "remark")
	s.Multilingual = field.NewString(table, "multilingual")
	s.RoutePath = field.NewString(table, "route_path")

	s.fillFieldMap()

	return s
}

func (s *sysUIElement) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysUIElement) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["id"] = s.ID
	s.fieldMap["parent_id"] = s.ParentID
	s.fieldMap["element_code"] = s.ElementCode
	s.fieldMap["element_type"] = s.ElementType
	s.fieldMap["orders"] = s.Order_
	s.fieldMap["param1"] = s.Param1
	s.fieldMap["param2"] = s.Param2
	s.fieldMap["param3"] = s.Param3
	s.fieldMap["authority"] = s.Authority
	s.fieldMap["description"] = s.Description
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["multilingual"] = s.Multilingual
	s.fieldMap["route_path"] = s.RoutePath
}

func (s sysUIElement) clone(db *gorm.DB) sysUIElement {
	s.sysUIElementDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysUIElement) replaceDB(db *gorm.DB) sysUIElement {
	s.sysUIElementDo.ReplaceDB(db)
	return s
}

type sysUIElementDo struct{ gen.DO }

type ISysUIElementDo interface {
	gen.SubQuery
	Debug() ISysUIElementDo
	WithContext(ctx context.Context) ISysUIElementDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysUIElementDo
	WriteDB() ISysUIElementDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysUIElementDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysUIElementDo
	Not(conds ...gen.Condition) ISysUIElementDo
	Or(conds ...gen.Condition) ISysUIElementDo
	Select(conds ...field.Expr) ISysUIElementDo
	Where(conds ...gen.Condition) ISysUIElementDo
	Order(conds ...field.Expr) ISysUIElementDo
	Distinct(cols ...field.Expr) ISysUIElementDo
	Omit(cols ...field.Expr) ISysUIElementDo
	Join(table schema.Tabler, on ...field.Expr) ISysUIElementDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysUIElementDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysUIElementDo
	Group(cols ...field.Expr) ISysUIElementDo
	Having(conds ...gen.Condition) ISysUIElementDo
	Limit(limit int) ISysUIElementDo
	Offset(offset int) ISysUIElementDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysUIElementDo
	Unscoped() ISysUIElementDo
	Create(values ...*model.SysUIElement) error
	CreateInBatches(values []*model.SysUIElement, batchSize int) error
	Save(values ...*model.SysUIElement) error
	First() (*model.SysUIElement, error)
	Take() (*model.SysUIElement, error)
	Last() (*model.SysUIElement, error)
	Find() ([]*model.SysUIElement, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysUIElement, err error)
	FindInBatches(result *[]*model.SysUIElement, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysUIElement) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysUIElementDo
	Assign(attrs ...field.AssignExpr) ISysUIElementDo
	Joins(fields ...field.RelationField) ISysUIElementDo
	Preload(fields ...field.RelationField) ISysUIElementDo
	FirstOrInit() (*model.SysUIElement, error)
	FirstOrCreate() (*model.SysUIElement, error)
	FindByPage(offset int, limit int) (result []*model.SysUIElement, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysUIElementDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysUIElementDo) Debug() ISysUIElementDo {
	return s.withDO(s.DO.Debug())
}

func (s sysUIElementDo) WithContext(ctx context.Context) ISysUIElementDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysUIElementDo) ReadDB() ISysUIElementDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysUIElementDo) WriteDB() ISysUIElementDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysUIElementDo) Session(config *gorm.Session) ISysUIElementDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysUIElementDo) Clauses(conds ...clause.Expression) ISysUIElementDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysUIElementDo) Returning(value interface{}, columns ...string) ISysUIElementDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysUIElementDo) Not(conds ...gen.Condition) ISysUIElementDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysUIElementDo) Or(conds ...gen.Condition) ISysUIElementDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysUIElementDo) Select(conds ...field.Expr) ISysUIElementDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysUIElementDo) Where(conds ...gen.Condition) ISysUIElementDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysUIElementDo) Order(conds ...field.Expr) ISysUIElementDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysUIElementDo) Distinct(cols ...field.Expr) ISysUIElementDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysUIElementDo) Omit(cols ...field.Expr) ISysUIElementDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysUIElementDo) Join(table schema.Tabler, on ...field.Expr) ISysUIElementDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysUIElementDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysUIElementDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysUIElementDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysUIElementDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysUIElementDo) Group(cols ...field.Expr) ISysUIElementDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysUIElementDo) Having(conds ...gen.Condition) ISysUIElementDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysUIElementDo) Limit(limit int) ISysUIElementDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysUIElementDo) Offset(offset int) ISysUIElementDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysUIElementDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysUIElementDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysUIElementDo) Unscoped() ISysUIElementDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysUIElementDo) Create(values ...*model.SysUIElement) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysUIElementDo) CreateInBatches(values []*model.SysUIElement, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysUIElementDo) Save(values ...*model.SysUIElement) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysUIElementDo) First() (*model.SysUIElement, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUIElement), nil
	}
}

func (s sysUIElementDo) Take() (*model.SysUIElement, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUIElement), nil
	}
}

func (s sysUIElementDo) Last() (*model.SysUIElement, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUIElement), nil
	}
}

func (s sysUIElementDo) Find() ([]*model.SysUIElement, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysUIElement), err
}

func (s sysUIElementDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysUIElement, err error) {
	buf := make([]*model.SysUIElement, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysUIElementDo) FindInBatches(result *[]*model.SysUIElement, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysUIElementDo) Attrs(attrs ...field.AssignExpr) ISysUIElementDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysUIElementDo) Assign(attrs ...field.AssignExpr) ISysUIElementDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysUIElementDo) Joins(fields ...field.RelationField) ISysUIElementDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysUIElementDo) Preload(fields ...field.RelationField) ISysUIElementDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysUIElementDo) FirstOrInit() (*model.SysUIElement, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUIElement), nil
	}
}

func (s sysUIElementDo) FirstOrCreate() (*model.SysUIElement, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUIElement), nil
	}
}

func (s sysUIElementDo) FindByPage(offset int, limit int) (result []*model.SysUIElement, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysUIElementDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysUIElementDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysUIElementDo) Delete(models ...*model.SysUIElement) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysUIElementDo) withDO(do gen.Dao) *sysUIElementDo {
	s.DO = *do.(*gen.DO)
	return s
}
