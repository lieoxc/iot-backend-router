// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newSceneLog(db *gorm.DB, opts ...gen.DOOption) sceneLog {
	_sceneLog := sceneLog{}

	_sceneLog.sceneLogDo.UseDB(db, opts...)
	_sceneLog.sceneLogDo.UseModel(&model.SceneLog{})

	tableName := _sceneLog.sceneLogDo.TableName()
	_sceneLog.ALL = field.NewAsterisk(tableName)
	_sceneLog.SceneID = field.NewString(tableName, "scene_id")
	_sceneLog.ExecutedAt = field.NewTime(tableName, "executed_at")
	_sceneLog.Detail = field.NewString(tableName, "detail")
	_sceneLog.ExecutionResult = field.NewString(tableName, "execution_result")
	_sceneLog.TenantID = field.NewString(tableName, "tenant_id")
	_sceneLog.Remark = field.NewString(tableName, "remark")
	_sceneLog.ID = field.NewString(tableName, "id")

	_sceneLog.fillFieldMap()

	return _sceneLog
}

type sceneLog struct {
	sceneLogDo

	ALL             field.Asterisk
	SceneID         field.String // 场景id（关联删除）
	ExecutedAt      field.Time   // 执行时间
	Detail          field.String // 执行说明：详细的执行过程
	ExecutionResult field.String // 执行状态S：成功F：失败 全部执行成功才算成功
	TenantID        field.String
	Remark          field.String
	ID              field.String

	fieldMap map[string]field.Expr
}

func (s sceneLog) Table(newTableName string) *sceneLog {
	s.sceneLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sceneLog) As(alias string) *sceneLog {
	s.sceneLogDo.DO = *(s.sceneLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sceneLog) updateTableName(table string) *sceneLog {
	s.ALL = field.NewAsterisk(table)
	s.SceneID = field.NewString(table, "scene_id")
	s.ExecutedAt = field.NewTime(table, "executed_at")
	s.Detail = field.NewString(table, "detail")
	s.ExecutionResult = field.NewString(table, "execution_result")
	s.TenantID = field.NewString(table, "tenant_id")
	s.Remark = field.NewString(table, "remark")
	s.ID = field.NewString(table, "id")

	s.fillFieldMap()

	return s
}

func (s *sceneLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sceneLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["scene_id"] = s.SceneID
	s.fieldMap["executed_at"] = s.ExecutedAt
	s.fieldMap["detail"] = s.Detail
	s.fieldMap["execution_result"] = s.ExecutionResult
	s.fieldMap["tenant_id"] = s.TenantID
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["id"] = s.ID
}

func (s sceneLog) clone(db *gorm.DB) sceneLog {
	s.sceneLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sceneLog) replaceDB(db *gorm.DB) sceneLog {
	s.sceneLogDo.ReplaceDB(db)
	return s
}

type sceneLogDo struct{ gen.DO }

type ISceneLogDo interface {
	gen.SubQuery
	Debug() ISceneLogDo
	WithContext(ctx context.Context) ISceneLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISceneLogDo
	WriteDB() ISceneLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISceneLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISceneLogDo
	Not(conds ...gen.Condition) ISceneLogDo
	Or(conds ...gen.Condition) ISceneLogDo
	Select(conds ...field.Expr) ISceneLogDo
	Where(conds ...gen.Condition) ISceneLogDo
	Order(conds ...field.Expr) ISceneLogDo
	Distinct(cols ...field.Expr) ISceneLogDo
	Omit(cols ...field.Expr) ISceneLogDo
	Join(table schema.Tabler, on ...field.Expr) ISceneLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISceneLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISceneLogDo
	Group(cols ...field.Expr) ISceneLogDo
	Having(conds ...gen.Condition) ISceneLogDo
	Limit(limit int) ISceneLogDo
	Offset(offset int) ISceneLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISceneLogDo
	Unscoped() ISceneLogDo
	Create(values ...*model.SceneLog) error
	CreateInBatches(values []*model.SceneLog, batchSize int) error
	Save(values ...*model.SceneLog) error
	First() (*model.SceneLog, error)
	Take() (*model.SceneLog, error)
	Last() (*model.SceneLog, error)
	Find() ([]*model.SceneLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SceneLog, err error)
	FindInBatches(result *[]*model.SceneLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SceneLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISceneLogDo
	Assign(attrs ...field.AssignExpr) ISceneLogDo
	Joins(fields ...field.RelationField) ISceneLogDo
	Preload(fields ...field.RelationField) ISceneLogDo
	FirstOrInit() (*model.SceneLog, error)
	FirstOrCreate() (*model.SceneLog, error)
	FindByPage(offset int, limit int) (result []*model.SceneLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISceneLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sceneLogDo) Debug() ISceneLogDo {
	return s.withDO(s.DO.Debug())
}

func (s sceneLogDo) WithContext(ctx context.Context) ISceneLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sceneLogDo) ReadDB() ISceneLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s sceneLogDo) WriteDB() ISceneLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s sceneLogDo) Session(config *gorm.Session) ISceneLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s sceneLogDo) Clauses(conds ...clause.Expression) ISceneLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sceneLogDo) Returning(value interface{}, columns ...string) ISceneLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sceneLogDo) Not(conds ...gen.Condition) ISceneLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sceneLogDo) Or(conds ...gen.Condition) ISceneLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sceneLogDo) Select(conds ...field.Expr) ISceneLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sceneLogDo) Where(conds ...gen.Condition) ISceneLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sceneLogDo) Order(conds ...field.Expr) ISceneLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sceneLogDo) Distinct(cols ...field.Expr) ISceneLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sceneLogDo) Omit(cols ...field.Expr) ISceneLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sceneLogDo) Join(table schema.Tabler, on ...field.Expr) ISceneLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sceneLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISceneLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sceneLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISceneLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sceneLogDo) Group(cols ...field.Expr) ISceneLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sceneLogDo) Having(conds ...gen.Condition) ISceneLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sceneLogDo) Limit(limit int) ISceneLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sceneLogDo) Offset(offset int) ISceneLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sceneLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISceneLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sceneLogDo) Unscoped() ISceneLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sceneLogDo) Create(values ...*model.SceneLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sceneLogDo) CreateInBatches(values []*model.SceneLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sceneLogDo) Save(values ...*model.SceneLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sceneLogDo) First() (*model.SceneLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneLog), nil
	}
}

func (s sceneLogDo) Take() (*model.SceneLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneLog), nil
	}
}

func (s sceneLogDo) Last() (*model.SceneLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneLog), nil
	}
}

func (s sceneLogDo) Find() ([]*model.SceneLog, error) {
	result, err := s.DO.Find()
	return result.([]*model.SceneLog), err
}

func (s sceneLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SceneLog, err error) {
	buf := make([]*model.SceneLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sceneLogDo) FindInBatches(result *[]*model.SceneLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sceneLogDo) Attrs(attrs ...field.AssignExpr) ISceneLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sceneLogDo) Assign(attrs ...field.AssignExpr) ISceneLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sceneLogDo) Joins(fields ...field.RelationField) ISceneLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sceneLogDo) Preload(fields ...field.RelationField) ISceneLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sceneLogDo) FirstOrInit() (*model.SceneLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneLog), nil
	}
}

func (s sceneLogDo) FirstOrCreate() (*model.SceneLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneLog), nil
	}
}

func (s sceneLogDo) FindByPage(offset int, limit int) (result []*model.SceneLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sceneLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sceneLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sceneLogDo) Delete(models ...*model.SceneLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sceneLogDo) withDO(do gen.Dao) *sceneLogDo {
	s.DO = *do.(*gen.DO)
	return s
}
