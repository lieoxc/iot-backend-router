// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newAlarmHistory(db *gorm.DB, opts ...gen.DOOption) alarmHistory {
	_alarmHistory := alarmHistory{}

	_alarmHistory.alarmHistoryDo.UseDB(db, opts...)
	_alarmHistory.alarmHistoryDo.UseModel(&model.AlarmHistory{})

	tableName := _alarmHistory.alarmHistoryDo.TableName()
	_alarmHistory.ALL = field.NewAsterisk(tableName)
	_alarmHistory.ID = field.NewString(tableName, "id")
	_alarmHistory.AlarmConfigID = field.NewString(tableName, "alarm_config_id")
	_alarmHistory.GroupID = field.NewString(tableName, "group_id")
	_alarmHistory.SceneAutomationID = field.NewString(tableName, "scene_automation_id")
	_alarmHistory.Name = field.NewString(tableName, "name")
	_alarmHistory.Description = field.NewString(tableName, "description")
	_alarmHistory.Content = field.NewString(tableName, "content")
	_alarmHistory.AlarmStatus = field.NewString(tableName, "alarm_status")
	_alarmHistory.TenantID = field.NewString(tableName, "tenant_id")
	_alarmHistory.Remark = field.NewString(tableName, "remark")
	_alarmHistory.CreateAt = field.NewTime(tableName, "create_at")
	_alarmHistory.AlarmDeviceList = field.NewString(tableName, "alarm_device_list")

	_alarmHistory.fillFieldMap()

	return _alarmHistory
}

type alarmHistory struct {
	alarmHistoryDo

	ALL               field.Asterisk
	ID                field.String
	AlarmConfigID     field.String
	GroupID           field.String
	SceneAutomationID field.String
	Name              field.String // 告警名称
	Description       field.String // 告警描述
	Content           field.String // 内容（什么原因导致的告警）
	AlarmStatus       field.String // L 底 M中 H 高 N 正常
	TenantID          field.String // 租户
	Remark            field.String
	CreateAt          field.Time   // 创建时间
	AlarmDeviceList   field.String // 触发设备id

	fieldMap map[string]field.Expr
}

func (a alarmHistory) Table(newTableName string) *alarmHistory {
	a.alarmHistoryDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a alarmHistory) As(alias string) *alarmHistory {
	a.alarmHistoryDo.DO = *(a.alarmHistoryDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *alarmHistory) updateTableName(table string) *alarmHistory {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.AlarmConfigID = field.NewString(table, "alarm_config_id")
	a.GroupID = field.NewString(table, "group_id")
	a.SceneAutomationID = field.NewString(table, "scene_automation_id")
	a.Name = field.NewString(table, "name")
	a.Description = field.NewString(table, "description")
	a.Content = field.NewString(table, "content")
	a.AlarmStatus = field.NewString(table, "alarm_status")
	a.TenantID = field.NewString(table, "tenant_id")
	a.Remark = field.NewString(table, "remark")
	a.CreateAt = field.NewTime(table, "create_at")
	a.AlarmDeviceList = field.NewString(table, "alarm_device_list")

	a.fillFieldMap()

	return a
}

func (a *alarmHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *alarmHistory) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["id"] = a.ID
	a.fieldMap["alarm_config_id"] = a.AlarmConfigID
	a.fieldMap["group_id"] = a.GroupID
	a.fieldMap["scene_automation_id"] = a.SceneAutomationID
	a.fieldMap["name"] = a.Name
	a.fieldMap["description"] = a.Description
	a.fieldMap["content"] = a.Content
	a.fieldMap["alarm_status"] = a.AlarmStatus
	a.fieldMap["tenant_id"] = a.TenantID
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["create_at"] = a.CreateAt
	a.fieldMap["alarm_device_list"] = a.AlarmDeviceList
}

func (a alarmHistory) clone(db *gorm.DB) alarmHistory {
	a.alarmHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a alarmHistory) replaceDB(db *gorm.DB) alarmHistory {
	a.alarmHistoryDo.ReplaceDB(db)
	return a
}

type alarmHistoryDo struct{ gen.DO }

type IAlarmHistoryDo interface {
	gen.SubQuery
	Debug() IAlarmHistoryDo
	WithContext(ctx context.Context) IAlarmHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAlarmHistoryDo
	WriteDB() IAlarmHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAlarmHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAlarmHistoryDo
	Not(conds ...gen.Condition) IAlarmHistoryDo
	Or(conds ...gen.Condition) IAlarmHistoryDo
	Select(conds ...field.Expr) IAlarmHistoryDo
	Where(conds ...gen.Condition) IAlarmHistoryDo
	Order(conds ...field.Expr) IAlarmHistoryDo
	Distinct(cols ...field.Expr) IAlarmHistoryDo
	Omit(cols ...field.Expr) IAlarmHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IAlarmHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAlarmHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAlarmHistoryDo
	Group(cols ...field.Expr) IAlarmHistoryDo
	Having(conds ...gen.Condition) IAlarmHistoryDo
	Limit(limit int) IAlarmHistoryDo
	Offset(offset int) IAlarmHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAlarmHistoryDo
	Unscoped() IAlarmHistoryDo
	Create(values ...*model.AlarmHistory) error
	CreateInBatches(values []*model.AlarmHistory, batchSize int) error
	Save(values ...*model.AlarmHistory) error
	First() (*model.AlarmHistory, error)
	Take() (*model.AlarmHistory, error)
	Last() (*model.AlarmHistory, error)
	Find() ([]*model.AlarmHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlarmHistory, err error)
	FindInBatches(result *[]*model.AlarmHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AlarmHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAlarmHistoryDo
	Assign(attrs ...field.AssignExpr) IAlarmHistoryDo
	Joins(fields ...field.RelationField) IAlarmHistoryDo
	Preload(fields ...field.RelationField) IAlarmHistoryDo
	FirstOrInit() (*model.AlarmHistory, error)
	FirstOrCreate() (*model.AlarmHistory, error)
	FindByPage(offset int, limit int) (result []*model.AlarmHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAlarmHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a alarmHistoryDo) Debug() IAlarmHistoryDo {
	return a.withDO(a.DO.Debug())
}

func (a alarmHistoryDo) WithContext(ctx context.Context) IAlarmHistoryDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a alarmHistoryDo) ReadDB() IAlarmHistoryDo {
	return a.Clauses(dbresolver.Read)
}

func (a alarmHistoryDo) WriteDB() IAlarmHistoryDo {
	return a.Clauses(dbresolver.Write)
}

func (a alarmHistoryDo) Session(config *gorm.Session) IAlarmHistoryDo {
	return a.withDO(a.DO.Session(config))
}

func (a alarmHistoryDo) Clauses(conds ...clause.Expression) IAlarmHistoryDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a alarmHistoryDo) Returning(value interface{}, columns ...string) IAlarmHistoryDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a alarmHistoryDo) Not(conds ...gen.Condition) IAlarmHistoryDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a alarmHistoryDo) Or(conds ...gen.Condition) IAlarmHistoryDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a alarmHistoryDo) Select(conds ...field.Expr) IAlarmHistoryDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a alarmHistoryDo) Where(conds ...gen.Condition) IAlarmHistoryDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a alarmHistoryDo) Order(conds ...field.Expr) IAlarmHistoryDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a alarmHistoryDo) Distinct(cols ...field.Expr) IAlarmHistoryDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a alarmHistoryDo) Omit(cols ...field.Expr) IAlarmHistoryDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a alarmHistoryDo) Join(table schema.Tabler, on ...field.Expr) IAlarmHistoryDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a alarmHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAlarmHistoryDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a alarmHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IAlarmHistoryDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a alarmHistoryDo) Group(cols ...field.Expr) IAlarmHistoryDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a alarmHistoryDo) Having(conds ...gen.Condition) IAlarmHistoryDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a alarmHistoryDo) Limit(limit int) IAlarmHistoryDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a alarmHistoryDo) Offset(offset int) IAlarmHistoryDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a alarmHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAlarmHistoryDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a alarmHistoryDo) Unscoped() IAlarmHistoryDo {
	return a.withDO(a.DO.Unscoped())
}

func (a alarmHistoryDo) Create(values ...*model.AlarmHistory) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a alarmHistoryDo) CreateInBatches(values []*model.AlarmHistory, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a alarmHistoryDo) Save(values ...*model.AlarmHistory) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a alarmHistoryDo) First() (*model.AlarmHistory, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmHistory), nil
	}
}

func (a alarmHistoryDo) Take() (*model.AlarmHistory, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmHistory), nil
	}
}

func (a alarmHistoryDo) Last() (*model.AlarmHistory, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmHistory), nil
	}
}

func (a alarmHistoryDo) Find() ([]*model.AlarmHistory, error) {
	result, err := a.DO.Find()
	return result.([]*model.AlarmHistory), err
}

func (a alarmHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlarmHistory, err error) {
	buf := make([]*model.AlarmHistory, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a alarmHistoryDo) FindInBatches(result *[]*model.AlarmHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a alarmHistoryDo) Attrs(attrs ...field.AssignExpr) IAlarmHistoryDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a alarmHistoryDo) Assign(attrs ...field.AssignExpr) IAlarmHistoryDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a alarmHistoryDo) Joins(fields ...field.RelationField) IAlarmHistoryDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a alarmHistoryDo) Preload(fields ...field.RelationField) IAlarmHistoryDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a alarmHistoryDo) FirstOrInit() (*model.AlarmHistory, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmHistory), nil
	}
}

func (a alarmHistoryDo) FirstOrCreate() (*model.AlarmHistory, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmHistory), nil
	}
}

func (a alarmHistoryDo) FindByPage(offset int, limit int) (result []*model.AlarmHistory, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a alarmHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a alarmHistoryDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a alarmHistoryDo) Delete(models ...*model.AlarmHistory) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *alarmHistoryDo) withDO(do gen.Dao) *alarmHistoryDo {
	a.DO = *do.(*gen.DO)
	return a
}
