// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newAttributeSetLog(db *gorm.DB, opts ...gen.DOOption) attributeSetLog {
	_attributeSetLog := attributeSetLog{}

	_attributeSetLog.attributeSetLogDo.UseDB(db, opts...)
	_attributeSetLog.attributeSetLogDo.UseModel(&model.AttributeSetLog{})

	tableName := _attributeSetLog.attributeSetLogDo.TableName()
	_attributeSetLog.ALL = field.NewAsterisk(tableName)
	_attributeSetLog.ID = field.NewString(tableName, "id")
	_attributeSetLog.DeviceID = field.NewString(tableName, "device_id")
	_attributeSetLog.OperationType = field.NewString(tableName, "operation_type")
	_attributeSetLog.MessageID = field.NewString(tableName, "message_id")
	_attributeSetLog.Datum = field.NewString(tableName, "data")
	_attributeSetLog.RspDatum = field.NewString(tableName, "rsp_data")
	_attributeSetLog.Status = field.NewString(tableName, "status")
	_attributeSetLog.ErrorMessage = field.NewString(tableName, "error_message")
	_attributeSetLog.CreatedAt = field.NewTime(tableName, "created_at")
	_attributeSetLog.UserID = field.NewString(tableName, "user_id")
	_attributeSetLog.Description = field.NewString(tableName, "description")

	_attributeSetLog.fillFieldMap()

	return _attributeSetLog
}

type attributeSetLog struct {
	attributeSetLogDo

	ALL           field.Asterisk
	ID            field.String
	DeviceID      field.String // 设备id（外键-关联删除）
	OperationType field.String // 操作类型1-手动操作 2-自动触发
	MessageID     field.String // 消息ID
	Datum         field.String // 发送内容
	RspDatum      field.String // 返回内容
	Status        field.String // 1-发送成功 2-失败
	ErrorMessage  field.String // 错误信息
	CreatedAt     field.Time   // 创建时间
	UserID        field.String // 操作用户
	Description   field.String // 描述

	fieldMap map[string]field.Expr
}

func (a attributeSetLog) Table(newTableName string) *attributeSetLog {
	a.attributeSetLogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a attributeSetLog) As(alias string) *attributeSetLog {
	a.attributeSetLogDo.DO = *(a.attributeSetLogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *attributeSetLog) updateTableName(table string) *attributeSetLog {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.DeviceID = field.NewString(table, "device_id")
	a.OperationType = field.NewString(table, "operation_type")
	a.MessageID = field.NewString(table, "message_id")
	a.Datum = field.NewString(table, "data")
	a.RspDatum = field.NewString(table, "rsp_data")
	a.Status = field.NewString(table, "status")
	a.ErrorMessage = field.NewString(table, "error_message")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UserID = field.NewString(table, "user_id")
	a.Description = field.NewString(table, "description")

	a.fillFieldMap()

	return a
}

func (a *attributeSetLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *attributeSetLog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["device_id"] = a.DeviceID
	a.fieldMap["operation_type"] = a.OperationType
	a.fieldMap["message_id"] = a.MessageID
	a.fieldMap["data"] = a.Datum
	a.fieldMap["rsp_data"] = a.RspDatum
	a.fieldMap["status"] = a.Status
	a.fieldMap["error_message"] = a.ErrorMessage
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["description"] = a.Description
}

func (a attributeSetLog) clone(db *gorm.DB) attributeSetLog {
	a.attributeSetLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a attributeSetLog) replaceDB(db *gorm.DB) attributeSetLog {
	a.attributeSetLogDo.ReplaceDB(db)
	return a
}

type attributeSetLogDo struct{ gen.DO }

type IAttributeSetLogDo interface {
	gen.SubQuery
	Debug() IAttributeSetLogDo
	WithContext(ctx context.Context) IAttributeSetLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAttributeSetLogDo
	WriteDB() IAttributeSetLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAttributeSetLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAttributeSetLogDo
	Not(conds ...gen.Condition) IAttributeSetLogDo
	Or(conds ...gen.Condition) IAttributeSetLogDo
	Select(conds ...field.Expr) IAttributeSetLogDo
	Where(conds ...gen.Condition) IAttributeSetLogDo
	Order(conds ...field.Expr) IAttributeSetLogDo
	Distinct(cols ...field.Expr) IAttributeSetLogDo
	Omit(cols ...field.Expr) IAttributeSetLogDo
	Join(table schema.Tabler, on ...field.Expr) IAttributeSetLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAttributeSetLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAttributeSetLogDo
	Group(cols ...field.Expr) IAttributeSetLogDo
	Having(conds ...gen.Condition) IAttributeSetLogDo
	Limit(limit int) IAttributeSetLogDo
	Offset(offset int) IAttributeSetLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAttributeSetLogDo
	Unscoped() IAttributeSetLogDo
	Create(values ...*model.AttributeSetLog) error
	CreateInBatches(values []*model.AttributeSetLog, batchSize int) error
	Save(values ...*model.AttributeSetLog) error
	First() (*model.AttributeSetLog, error)
	Take() (*model.AttributeSetLog, error)
	Last() (*model.AttributeSetLog, error)
	Find() ([]*model.AttributeSetLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AttributeSetLog, err error)
	FindInBatches(result *[]*model.AttributeSetLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AttributeSetLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAttributeSetLogDo
	Assign(attrs ...field.AssignExpr) IAttributeSetLogDo
	Joins(fields ...field.RelationField) IAttributeSetLogDo
	Preload(fields ...field.RelationField) IAttributeSetLogDo
	FirstOrInit() (*model.AttributeSetLog, error)
	FirstOrCreate() (*model.AttributeSetLog, error)
	FindByPage(offset int, limit int) (result []*model.AttributeSetLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAttributeSetLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a attributeSetLogDo) Debug() IAttributeSetLogDo {
	return a.withDO(a.DO.Debug())
}

func (a attributeSetLogDo) WithContext(ctx context.Context) IAttributeSetLogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a attributeSetLogDo) ReadDB() IAttributeSetLogDo {
	return a.Clauses(dbresolver.Read)
}

func (a attributeSetLogDo) WriteDB() IAttributeSetLogDo {
	return a.Clauses(dbresolver.Write)
}

func (a attributeSetLogDo) Session(config *gorm.Session) IAttributeSetLogDo {
	return a.withDO(a.DO.Session(config))
}

func (a attributeSetLogDo) Clauses(conds ...clause.Expression) IAttributeSetLogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a attributeSetLogDo) Returning(value interface{}, columns ...string) IAttributeSetLogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a attributeSetLogDo) Not(conds ...gen.Condition) IAttributeSetLogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a attributeSetLogDo) Or(conds ...gen.Condition) IAttributeSetLogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a attributeSetLogDo) Select(conds ...field.Expr) IAttributeSetLogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a attributeSetLogDo) Where(conds ...gen.Condition) IAttributeSetLogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a attributeSetLogDo) Order(conds ...field.Expr) IAttributeSetLogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a attributeSetLogDo) Distinct(cols ...field.Expr) IAttributeSetLogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a attributeSetLogDo) Omit(cols ...field.Expr) IAttributeSetLogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a attributeSetLogDo) Join(table schema.Tabler, on ...field.Expr) IAttributeSetLogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a attributeSetLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAttributeSetLogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a attributeSetLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IAttributeSetLogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a attributeSetLogDo) Group(cols ...field.Expr) IAttributeSetLogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a attributeSetLogDo) Having(conds ...gen.Condition) IAttributeSetLogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a attributeSetLogDo) Limit(limit int) IAttributeSetLogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a attributeSetLogDo) Offset(offset int) IAttributeSetLogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a attributeSetLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAttributeSetLogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a attributeSetLogDo) Unscoped() IAttributeSetLogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a attributeSetLogDo) Create(values ...*model.AttributeSetLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a attributeSetLogDo) CreateInBatches(values []*model.AttributeSetLog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a attributeSetLogDo) Save(values ...*model.AttributeSetLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a attributeSetLogDo) First() (*model.AttributeSetLog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttributeSetLog), nil
	}
}

func (a attributeSetLogDo) Take() (*model.AttributeSetLog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttributeSetLog), nil
	}
}

func (a attributeSetLogDo) Last() (*model.AttributeSetLog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttributeSetLog), nil
	}
}

func (a attributeSetLogDo) Find() ([]*model.AttributeSetLog, error) {
	result, err := a.DO.Find()
	return result.([]*model.AttributeSetLog), err
}

func (a attributeSetLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AttributeSetLog, err error) {
	buf := make([]*model.AttributeSetLog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a attributeSetLogDo) FindInBatches(result *[]*model.AttributeSetLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a attributeSetLogDo) Attrs(attrs ...field.AssignExpr) IAttributeSetLogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a attributeSetLogDo) Assign(attrs ...field.AssignExpr) IAttributeSetLogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a attributeSetLogDo) Joins(fields ...field.RelationField) IAttributeSetLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a attributeSetLogDo) Preload(fields ...field.RelationField) IAttributeSetLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a attributeSetLogDo) FirstOrInit() (*model.AttributeSetLog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttributeSetLog), nil
	}
}

func (a attributeSetLogDo) FirstOrCreate() (*model.AttributeSetLog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AttributeSetLog), nil
	}
}

func (a attributeSetLogDo) FindByPage(offset int, limit int) (result []*model.AttributeSetLog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a attributeSetLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a attributeSetLogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a attributeSetLogDo) Delete(models ...*model.AttributeSetLog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *attributeSetLogDo) withDO(do gen.Dao) *attributeSetLogDo {
	a.DO = *do.(*gen.DO)
	return a
}
