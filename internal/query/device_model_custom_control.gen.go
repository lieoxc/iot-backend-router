// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newDeviceModelCustomControl(db *gorm.DB, opts ...gen.DOOption) deviceModelCustomControl {
	_deviceModelCustomControl := deviceModelCustomControl{}

	_deviceModelCustomControl.deviceModelCustomControlDo.UseDB(db, opts...)
	_deviceModelCustomControl.deviceModelCustomControlDo.UseModel(&model.DeviceModelCustomControl{})

	tableName := _deviceModelCustomControl.deviceModelCustomControlDo.TableName()
	_deviceModelCustomControl.ALL = field.NewAsterisk(tableName)
	_deviceModelCustomControl.ID = field.NewString(tableName, "id")
	_deviceModelCustomControl.DeviceTemplateID = field.NewString(tableName, "device_template_id")
	_deviceModelCustomControl.Name = field.NewString(tableName, "name")
	_deviceModelCustomControl.ControlType = field.NewString(tableName, "control_type")
	_deviceModelCustomControl.Description = field.NewString(tableName, "description")
	_deviceModelCustomControl.Content = field.NewString(tableName, "content")
	_deviceModelCustomControl.EnableStatus = field.NewString(tableName, "enable_status")
	_deviceModelCustomControl.CreatedAt = field.NewTime(tableName, "created_at")
	_deviceModelCustomControl.UpdatedAt = field.NewTime(tableName, "updated_at")
	_deviceModelCustomControl.Remark = field.NewString(tableName, "remark")
	_deviceModelCustomControl.TenantID = field.NewString(tableName, "tenant_id")

	_deviceModelCustomControl.fillFieldMap()

	return _deviceModelCustomControl
}

type deviceModelCustomControl struct {
	deviceModelCustomControlDo

	ALL              field.Asterisk
	ID               field.String // id
	DeviceTemplateID field.String // 设备模版ID
	Name             field.String // 名称
	ControlType      field.String // 1.控制类型2.telemetry-遥测3.attributes-属性
	Description      field.String // 描述
	Content          field.String // 指令内容
	EnableStatus     field.String // 启用状态enable-启用disable-禁用
	CreatedAt        field.Time   // 创建时间
	UpdatedAt        field.Time   // 更新时间
	Remark           field.String // 备注
	TenantID         field.String

	fieldMap map[string]field.Expr
}

func (d deviceModelCustomControl) Table(newTableName string) *deviceModelCustomControl {
	d.deviceModelCustomControlDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deviceModelCustomControl) As(alias string) *deviceModelCustomControl {
	d.deviceModelCustomControlDo.DO = *(d.deviceModelCustomControlDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deviceModelCustomControl) updateTableName(table string) *deviceModelCustomControl {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.DeviceTemplateID = field.NewString(table, "device_template_id")
	d.Name = field.NewString(table, "name")
	d.ControlType = field.NewString(table, "control_type")
	d.Description = field.NewString(table, "description")
	d.Content = field.NewString(table, "content")
	d.EnableStatus = field.NewString(table, "enable_status")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.Remark = field.NewString(table, "remark")
	d.TenantID = field.NewString(table, "tenant_id")

	d.fillFieldMap()

	return d
}

func (d *deviceModelCustomControl) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deviceModelCustomControl) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["id"] = d.ID
	d.fieldMap["device_template_id"] = d.DeviceTemplateID
	d.fieldMap["name"] = d.Name
	d.fieldMap["control_type"] = d.ControlType
	d.fieldMap["description"] = d.Description
	d.fieldMap["content"] = d.Content
	d.fieldMap["enable_status"] = d.EnableStatus
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["remark"] = d.Remark
	d.fieldMap["tenant_id"] = d.TenantID
}

func (d deviceModelCustomControl) clone(db *gorm.DB) deviceModelCustomControl {
	d.deviceModelCustomControlDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deviceModelCustomControl) replaceDB(db *gorm.DB) deviceModelCustomControl {
	d.deviceModelCustomControlDo.ReplaceDB(db)
	return d
}

type deviceModelCustomControlDo struct{ gen.DO }

type IDeviceModelCustomControlDo interface {
	gen.SubQuery
	Debug() IDeviceModelCustomControlDo
	WithContext(ctx context.Context) IDeviceModelCustomControlDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeviceModelCustomControlDo
	WriteDB() IDeviceModelCustomControlDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeviceModelCustomControlDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeviceModelCustomControlDo
	Not(conds ...gen.Condition) IDeviceModelCustomControlDo
	Or(conds ...gen.Condition) IDeviceModelCustomControlDo
	Select(conds ...field.Expr) IDeviceModelCustomControlDo
	Where(conds ...gen.Condition) IDeviceModelCustomControlDo
	Order(conds ...field.Expr) IDeviceModelCustomControlDo
	Distinct(cols ...field.Expr) IDeviceModelCustomControlDo
	Omit(cols ...field.Expr) IDeviceModelCustomControlDo
	Join(table schema.Tabler, on ...field.Expr) IDeviceModelCustomControlDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceModelCustomControlDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeviceModelCustomControlDo
	Group(cols ...field.Expr) IDeviceModelCustomControlDo
	Having(conds ...gen.Condition) IDeviceModelCustomControlDo
	Limit(limit int) IDeviceModelCustomControlDo
	Offset(offset int) IDeviceModelCustomControlDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceModelCustomControlDo
	Unscoped() IDeviceModelCustomControlDo
	Create(values ...*model.DeviceModelCustomControl) error
	CreateInBatches(values []*model.DeviceModelCustomControl, batchSize int) error
	Save(values ...*model.DeviceModelCustomControl) error
	First() (*model.DeviceModelCustomControl, error)
	Take() (*model.DeviceModelCustomControl, error)
	Last() (*model.DeviceModelCustomControl, error)
	Find() ([]*model.DeviceModelCustomControl, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeviceModelCustomControl, err error)
	FindInBatches(result *[]*model.DeviceModelCustomControl, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeviceModelCustomControl) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeviceModelCustomControlDo
	Assign(attrs ...field.AssignExpr) IDeviceModelCustomControlDo
	Joins(fields ...field.RelationField) IDeviceModelCustomControlDo
	Preload(fields ...field.RelationField) IDeviceModelCustomControlDo
	FirstOrInit() (*model.DeviceModelCustomControl, error)
	FirstOrCreate() (*model.DeviceModelCustomControl, error)
	FindByPage(offset int, limit int) (result []*model.DeviceModelCustomControl, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeviceModelCustomControlDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deviceModelCustomControlDo) Debug() IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Debug())
}

func (d deviceModelCustomControlDo) WithContext(ctx context.Context) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deviceModelCustomControlDo) ReadDB() IDeviceModelCustomControlDo {
	return d.Clauses(dbresolver.Read)
}

func (d deviceModelCustomControlDo) WriteDB() IDeviceModelCustomControlDo {
	return d.Clauses(dbresolver.Write)
}

func (d deviceModelCustomControlDo) Session(config *gorm.Session) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Session(config))
}

func (d deviceModelCustomControlDo) Clauses(conds ...clause.Expression) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deviceModelCustomControlDo) Returning(value interface{}, columns ...string) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deviceModelCustomControlDo) Not(conds ...gen.Condition) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deviceModelCustomControlDo) Or(conds ...gen.Condition) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deviceModelCustomControlDo) Select(conds ...field.Expr) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deviceModelCustomControlDo) Where(conds ...gen.Condition) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deviceModelCustomControlDo) Order(conds ...field.Expr) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deviceModelCustomControlDo) Distinct(cols ...field.Expr) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deviceModelCustomControlDo) Omit(cols ...field.Expr) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deviceModelCustomControlDo) Join(table schema.Tabler, on ...field.Expr) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deviceModelCustomControlDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deviceModelCustomControlDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deviceModelCustomControlDo) Group(cols ...field.Expr) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deviceModelCustomControlDo) Having(conds ...gen.Condition) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deviceModelCustomControlDo) Limit(limit int) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deviceModelCustomControlDo) Offset(offset int) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deviceModelCustomControlDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deviceModelCustomControlDo) Unscoped() IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deviceModelCustomControlDo) Create(values ...*model.DeviceModelCustomControl) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deviceModelCustomControlDo) CreateInBatches(values []*model.DeviceModelCustomControl, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deviceModelCustomControlDo) Save(values ...*model.DeviceModelCustomControl) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deviceModelCustomControlDo) First() (*model.DeviceModelCustomControl, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceModelCustomControl), nil
	}
}

func (d deviceModelCustomControlDo) Take() (*model.DeviceModelCustomControl, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceModelCustomControl), nil
	}
}

func (d deviceModelCustomControlDo) Last() (*model.DeviceModelCustomControl, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceModelCustomControl), nil
	}
}

func (d deviceModelCustomControlDo) Find() ([]*model.DeviceModelCustomControl, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeviceModelCustomControl), err
}

func (d deviceModelCustomControlDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeviceModelCustomControl, err error) {
	buf := make([]*model.DeviceModelCustomControl, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deviceModelCustomControlDo) FindInBatches(result *[]*model.DeviceModelCustomControl, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deviceModelCustomControlDo) Attrs(attrs ...field.AssignExpr) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deviceModelCustomControlDo) Assign(attrs ...field.AssignExpr) IDeviceModelCustomControlDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deviceModelCustomControlDo) Joins(fields ...field.RelationField) IDeviceModelCustomControlDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deviceModelCustomControlDo) Preload(fields ...field.RelationField) IDeviceModelCustomControlDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deviceModelCustomControlDo) FirstOrInit() (*model.DeviceModelCustomControl, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceModelCustomControl), nil
	}
}

func (d deviceModelCustomControlDo) FirstOrCreate() (*model.DeviceModelCustomControl, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceModelCustomControl), nil
	}
}

func (d deviceModelCustomControlDo) FindByPage(offset int, limit int) (result []*model.DeviceModelCustomControl, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deviceModelCustomControlDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deviceModelCustomControlDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deviceModelCustomControlDo) Delete(models ...*model.DeviceModelCustomControl) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deviceModelCustomControlDo) withDO(do gen.Dao) *deviceModelCustomControlDo {
	d.DO = *do.(*gen.DO)
	return d
}
