// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newDeviceModelAttribute(db *gorm.DB, opts ...gen.DOOption) deviceModelAttribute {
	_deviceModelAttribute := deviceModelAttribute{}

	_deviceModelAttribute.deviceModelAttributeDo.UseDB(db, opts...)
	_deviceModelAttribute.deviceModelAttributeDo.UseModel(&model.DeviceModelAttribute{})

	tableName := _deviceModelAttribute.deviceModelAttributeDo.TableName()
	_deviceModelAttribute.ALL = field.NewAsterisk(tableName)
	_deviceModelAttribute.ID = field.NewString(tableName, "id")
	_deviceModelAttribute.DeviceTemplateID = field.NewString(tableName, "device_template_id")
	_deviceModelAttribute.DataName = field.NewString(tableName, "data_name")
	_deviceModelAttribute.DataIdentifier = field.NewString(tableName, "data_identifier")
	_deviceModelAttribute.ReadWriteFlag = field.NewString(tableName, "read_write_flag")
	_deviceModelAttribute.DataType = field.NewString(tableName, "data_type")
	_deviceModelAttribute.Unit = field.NewString(tableName, "unit")
	_deviceModelAttribute.Description = field.NewString(tableName, "description")
	_deviceModelAttribute.AdditionalInfo = field.NewString(tableName, "additional_info")
	_deviceModelAttribute.CreatedAt = field.NewTime(tableName, "created_at")
	_deviceModelAttribute.UpdatedAt = field.NewTime(tableName, "updated_at")
	_deviceModelAttribute.Remark = field.NewString(tableName, "remark")
	_deviceModelAttribute.TenantID = field.NewString(tableName, "tenant_id")

	_deviceModelAttribute.fillFieldMap()

	return _deviceModelAttribute
}

type deviceModelAttribute struct {
	deviceModelAttributeDo

	ALL              field.Asterisk
	ID               field.String // id
	DeviceTemplateID field.String // 设备模板id
	DataName         field.String // 数据名称
	DataIdentifier   field.String // 数据标识符
	ReadWriteFlag    field.String // 读写标志R-读 W-写 RW-读写
	DataType         field.String // 数据类型String Number Boolean Enum
	Unit             field.String // 单位
	Description      field.String // 描述
	AdditionalInfo   field.String // 附加信息
	CreatedAt        field.Time   // 创建时间
	UpdatedAt        field.Time   // 更新时间
	Remark           field.String // 备注
	TenantID         field.String

	fieldMap map[string]field.Expr
}

func (d deviceModelAttribute) Table(newTableName string) *deviceModelAttribute {
	d.deviceModelAttributeDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deviceModelAttribute) As(alias string) *deviceModelAttribute {
	d.deviceModelAttributeDo.DO = *(d.deviceModelAttributeDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deviceModelAttribute) updateTableName(table string) *deviceModelAttribute {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.DeviceTemplateID = field.NewString(table, "device_template_id")
	d.DataName = field.NewString(table, "data_name")
	d.DataIdentifier = field.NewString(table, "data_identifier")
	d.ReadWriteFlag = field.NewString(table, "read_write_flag")
	d.DataType = field.NewString(table, "data_type")
	d.Unit = field.NewString(table, "unit")
	d.Description = field.NewString(table, "description")
	d.AdditionalInfo = field.NewString(table, "additional_info")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.Remark = field.NewString(table, "remark")
	d.TenantID = field.NewString(table, "tenant_id")

	d.fillFieldMap()

	return d
}

func (d *deviceModelAttribute) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deviceModelAttribute) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 13)
	d.fieldMap["id"] = d.ID
	d.fieldMap["device_template_id"] = d.DeviceTemplateID
	d.fieldMap["data_name"] = d.DataName
	d.fieldMap["data_identifier"] = d.DataIdentifier
	d.fieldMap["read_write_flag"] = d.ReadWriteFlag
	d.fieldMap["data_type"] = d.DataType
	d.fieldMap["unit"] = d.Unit
	d.fieldMap["description"] = d.Description
	d.fieldMap["additional_info"] = d.AdditionalInfo
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["remark"] = d.Remark
	d.fieldMap["tenant_id"] = d.TenantID
}

func (d deviceModelAttribute) clone(db *gorm.DB) deviceModelAttribute {
	d.deviceModelAttributeDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deviceModelAttribute) replaceDB(db *gorm.DB) deviceModelAttribute {
	d.deviceModelAttributeDo.ReplaceDB(db)
	return d
}

type deviceModelAttributeDo struct{ gen.DO }

type IDeviceModelAttributeDo interface {
	gen.SubQuery
	Debug() IDeviceModelAttributeDo
	WithContext(ctx context.Context) IDeviceModelAttributeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeviceModelAttributeDo
	WriteDB() IDeviceModelAttributeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeviceModelAttributeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeviceModelAttributeDo
	Not(conds ...gen.Condition) IDeviceModelAttributeDo
	Or(conds ...gen.Condition) IDeviceModelAttributeDo
	Select(conds ...field.Expr) IDeviceModelAttributeDo
	Where(conds ...gen.Condition) IDeviceModelAttributeDo
	Order(conds ...field.Expr) IDeviceModelAttributeDo
	Distinct(cols ...field.Expr) IDeviceModelAttributeDo
	Omit(cols ...field.Expr) IDeviceModelAttributeDo
	Join(table schema.Tabler, on ...field.Expr) IDeviceModelAttributeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceModelAttributeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeviceModelAttributeDo
	Group(cols ...field.Expr) IDeviceModelAttributeDo
	Having(conds ...gen.Condition) IDeviceModelAttributeDo
	Limit(limit int) IDeviceModelAttributeDo
	Offset(offset int) IDeviceModelAttributeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceModelAttributeDo
	Unscoped() IDeviceModelAttributeDo
	Create(values ...*model.DeviceModelAttribute) error
	CreateInBatches(values []*model.DeviceModelAttribute, batchSize int) error
	Save(values ...*model.DeviceModelAttribute) error
	First() (*model.DeviceModelAttribute, error)
	Take() (*model.DeviceModelAttribute, error)
	Last() (*model.DeviceModelAttribute, error)
	Find() ([]*model.DeviceModelAttribute, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeviceModelAttribute, err error)
	FindInBatches(result *[]*model.DeviceModelAttribute, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeviceModelAttribute) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeviceModelAttributeDo
	Assign(attrs ...field.AssignExpr) IDeviceModelAttributeDo
	Joins(fields ...field.RelationField) IDeviceModelAttributeDo
	Preload(fields ...field.RelationField) IDeviceModelAttributeDo
	FirstOrInit() (*model.DeviceModelAttribute, error)
	FirstOrCreate() (*model.DeviceModelAttribute, error)
	FindByPage(offset int, limit int) (result []*model.DeviceModelAttribute, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeviceModelAttributeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deviceModelAttributeDo) Debug() IDeviceModelAttributeDo {
	return d.withDO(d.DO.Debug())
}

func (d deviceModelAttributeDo) WithContext(ctx context.Context) IDeviceModelAttributeDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deviceModelAttributeDo) ReadDB() IDeviceModelAttributeDo {
	return d.Clauses(dbresolver.Read)
}

func (d deviceModelAttributeDo) WriteDB() IDeviceModelAttributeDo {
	return d.Clauses(dbresolver.Write)
}

func (d deviceModelAttributeDo) Session(config *gorm.Session) IDeviceModelAttributeDo {
	return d.withDO(d.DO.Session(config))
}

func (d deviceModelAttributeDo) Clauses(conds ...clause.Expression) IDeviceModelAttributeDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deviceModelAttributeDo) Returning(value interface{}, columns ...string) IDeviceModelAttributeDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deviceModelAttributeDo) Not(conds ...gen.Condition) IDeviceModelAttributeDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deviceModelAttributeDo) Or(conds ...gen.Condition) IDeviceModelAttributeDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deviceModelAttributeDo) Select(conds ...field.Expr) IDeviceModelAttributeDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deviceModelAttributeDo) Where(conds ...gen.Condition) IDeviceModelAttributeDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deviceModelAttributeDo) Order(conds ...field.Expr) IDeviceModelAttributeDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deviceModelAttributeDo) Distinct(cols ...field.Expr) IDeviceModelAttributeDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deviceModelAttributeDo) Omit(cols ...field.Expr) IDeviceModelAttributeDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deviceModelAttributeDo) Join(table schema.Tabler, on ...field.Expr) IDeviceModelAttributeDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deviceModelAttributeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceModelAttributeDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deviceModelAttributeDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeviceModelAttributeDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deviceModelAttributeDo) Group(cols ...field.Expr) IDeviceModelAttributeDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deviceModelAttributeDo) Having(conds ...gen.Condition) IDeviceModelAttributeDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deviceModelAttributeDo) Limit(limit int) IDeviceModelAttributeDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deviceModelAttributeDo) Offset(offset int) IDeviceModelAttributeDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deviceModelAttributeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceModelAttributeDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deviceModelAttributeDo) Unscoped() IDeviceModelAttributeDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deviceModelAttributeDo) Create(values ...*model.DeviceModelAttribute) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deviceModelAttributeDo) CreateInBatches(values []*model.DeviceModelAttribute, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deviceModelAttributeDo) Save(values ...*model.DeviceModelAttribute) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deviceModelAttributeDo) First() (*model.DeviceModelAttribute, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceModelAttribute), nil
	}
}

func (d deviceModelAttributeDo) Take() (*model.DeviceModelAttribute, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceModelAttribute), nil
	}
}

func (d deviceModelAttributeDo) Last() (*model.DeviceModelAttribute, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceModelAttribute), nil
	}
}

func (d deviceModelAttributeDo) Find() ([]*model.DeviceModelAttribute, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeviceModelAttribute), err
}

func (d deviceModelAttributeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeviceModelAttribute, err error) {
	buf := make([]*model.DeviceModelAttribute, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deviceModelAttributeDo) FindInBatches(result *[]*model.DeviceModelAttribute, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deviceModelAttributeDo) Attrs(attrs ...field.AssignExpr) IDeviceModelAttributeDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deviceModelAttributeDo) Assign(attrs ...field.AssignExpr) IDeviceModelAttributeDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deviceModelAttributeDo) Joins(fields ...field.RelationField) IDeviceModelAttributeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deviceModelAttributeDo) Preload(fields ...field.RelationField) IDeviceModelAttributeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deviceModelAttributeDo) FirstOrInit() (*model.DeviceModelAttribute, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceModelAttribute), nil
	}
}

func (d deviceModelAttributeDo) FirstOrCreate() (*model.DeviceModelAttribute, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceModelAttribute), nil
	}
}

func (d deviceModelAttributeDo) FindByPage(offset int, limit int) (result []*model.DeviceModelAttribute, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deviceModelAttributeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deviceModelAttributeDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deviceModelAttributeDo) Delete(models ...*model.DeviceModelAttribute) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deviceModelAttributeDo) withDO(do gen.Dao) *deviceModelAttributeDo {
	d.DO = *do.(*gen.DO)
	return d
}
