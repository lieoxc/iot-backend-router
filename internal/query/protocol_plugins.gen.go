// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newProtocolPlugin(db *gorm.DB, opts ...gen.DOOption) protocolPlugin {
	_protocolPlugin := protocolPlugin{}

	_protocolPlugin.protocolPluginDo.UseDB(db, opts...)
	_protocolPlugin.protocolPluginDo.UseModel(&model.ProtocolPlugin{})

	tableName := _protocolPlugin.protocolPluginDo.TableName()
	_protocolPlugin.ALL = field.NewAsterisk(tableName)
	_protocolPlugin.ID = field.NewString(tableName, "id")
	_protocolPlugin.Name = field.NewString(tableName, "name")
	_protocolPlugin.DeviceType = field.NewInt16(tableName, "device_type")
	_protocolPlugin.ProtocolType = field.NewString(tableName, "protocol_type")
	_protocolPlugin.AccessAddress = field.NewString(tableName, "access_address")
	_protocolPlugin.HTTPAddress = field.NewString(tableName, "http_address")
	_protocolPlugin.SubTopicPrefix = field.NewString(tableName, "sub_topic_prefix")
	_protocolPlugin.Description = field.NewString(tableName, "description")
	_protocolPlugin.AdditionalInfo = field.NewString(tableName, "additional_info")
	_protocolPlugin.CreatedAt = field.NewTime(tableName, "created_at")
	_protocolPlugin.UpdateAt = field.NewTime(tableName, "update_at")
	_protocolPlugin.Remark = field.NewString(tableName, "remark")

	_protocolPlugin.fillFieldMap()

	return _protocolPlugin
}

type protocolPlugin struct {
	protocolPluginDo

	ALL            field.Asterisk
	ID             field.String // Id
	Name           field.String // 插件名称
	DeviceType     field.Int16  // 接入设备类型 (1-直连设备 2-网关设备 默认直连设备)
	ProtocolType   field.String // 协议类型
	AccessAddress  field.String // 接入地址
	HTTPAddress    field.String // HTTP服务地址
	SubTopicPrefix field.String // 插件订阅前缀
	Description    field.String // 描述
	AdditionalInfo field.String // 附加信息
	CreatedAt      field.Time   // 创建时间
	UpdateAt       field.Time   // 更新时间
	Remark         field.String // 备注

	fieldMap map[string]field.Expr
}

func (p protocolPlugin) Table(newTableName string) *protocolPlugin {
	p.protocolPluginDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p protocolPlugin) As(alias string) *protocolPlugin {
	p.protocolPluginDo.DO = *(p.protocolPluginDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *protocolPlugin) updateTableName(table string) *protocolPlugin {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.Name = field.NewString(table, "name")
	p.DeviceType = field.NewInt16(table, "device_type")
	p.ProtocolType = field.NewString(table, "protocol_type")
	p.AccessAddress = field.NewString(table, "access_address")
	p.HTTPAddress = field.NewString(table, "http_address")
	p.SubTopicPrefix = field.NewString(table, "sub_topic_prefix")
	p.Description = field.NewString(table, "description")
	p.AdditionalInfo = field.NewString(table, "additional_info")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdateAt = field.NewTime(table, "update_at")
	p.Remark = field.NewString(table, "remark")

	p.fillFieldMap()

	return p
}

func (p *protocolPlugin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *protocolPlugin) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["device_type"] = p.DeviceType
	p.fieldMap["protocol_type"] = p.ProtocolType
	p.fieldMap["access_address"] = p.AccessAddress
	p.fieldMap["http_address"] = p.HTTPAddress
	p.fieldMap["sub_topic_prefix"] = p.SubTopicPrefix
	p.fieldMap["description"] = p.Description
	p.fieldMap["additional_info"] = p.AdditionalInfo
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["update_at"] = p.UpdateAt
	p.fieldMap["remark"] = p.Remark
}

func (p protocolPlugin) clone(db *gorm.DB) protocolPlugin {
	p.protocolPluginDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p protocolPlugin) replaceDB(db *gorm.DB) protocolPlugin {
	p.protocolPluginDo.ReplaceDB(db)
	return p
}

type protocolPluginDo struct{ gen.DO }

type IProtocolPluginDo interface {
	gen.SubQuery
	Debug() IProtocolPluginDo
	WithContext(ctx context.Context) IProtocolPluginDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProtocolPluginDo
	WriteDB() IProtocolPluginDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProtocolPluginDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProtocolPluginDo
	Not(conds ...gen.Condition) IProtocolPluginDo
	Or(conds ...gen.Condition) IProtocolPluginDo
	Select(conds ...field.Expr) IProtocolPluginDo
	Where(conds ...gen.Condition) IProtocolPluginDo
	Order(conds ...field.Expr) IProtocolPluginDo
	Distinct(cols ...field.Expr) IProtocolPluginDo
	Omit(cols ...field.Expr) IProtocolPluginDo
	Join(table schema.Tabler, on ...field.Expr) IProtocolPluginDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProtocolPluginDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProtocolPluginDo
	Group(cols ...field.Expr) IProtocolPluginDo
	Having(conds ...gen.Condition) IProtocolPluginDo
	Limit(limit int) IProtocolPluginDo
	Offset(offset int) IProtocolPluginDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProtocolPluginDo
	Unscoped() IProtocolPluginDo
	Create(values ...*model.ProtocolPlugin) error
	CreateInBatches(values []*model.ProtocolPlugin, batchSize int) error
	Save(values ...*model.ProtocolPlugin) error
	First() (*model.ProtocolPlugin, error)
	Take() (*model.ProtocolPlugin, error)
	Last() (*model.ProtocolPlugin, error)
	Find() ([]*model.ProtocolPlugin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProtocolPlugin, err error)
	FindInBatches(result *[]*model.ProtocolPlugin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProtocolPlugin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProtocolPluginDo
	Assign(attrs ...field.AssignExpr) IProtocolPluginDo
	Joins(fields ...field.RelationField) IProtocolPluginDo
	Preload(fields ...field.RelationField) IProtocolPluginDo
	FirstOrInit() (*model.ProtocolPlugin, error)
	FirstOrCreate() (*model.ProtocolPlugin, error)
	FindByPage(offset int, limit int) (result []*model.ProtocolPlugin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProtocolPluginDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p protocolPluginDo) Debug() IProtocolPluginDo {
	return p.withDO(p.DO.Debug())
}

func (p protocolPluginDo) WithContext(ctx context.Context) IProtocolPluginDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p protocolPluginDo) ReadDB() IProtocolPluginDo {
	return p.Clauses(dbresolver.Read)
}

func (p protocolPluginDo) WriteDB() IProtocolPluginDo {
	return p.Clauses(dbresolver.Write)
}

func (p protocolPluginDo) Session(config *gorm.Session) IProtocolPluginDo {
	return p.withDO(p.DO.Session(config))
}

func (p protocolPluginDo) Clauses(conds ...clause.Expression) IProtocolPluginDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p protocolPluginDo) Returning(value interface{}, columns ...string) IProtocolPluginDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p protocolPluginDo) Not(conds ...gen.Condition) IProtocolPluginDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p protocolPluginDo) Or(conds ...gen.Condition) IProtocolPluginDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p protocolPluginDo) Select(conds ...field.Expr) IProtocolPluginDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p protocolPluginDo) Where(conds ...gen.Condition) IProtocolPluginDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p protocolPluginDo) Order(conds ...field.Expr) IProtocolPluginDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p protocolPluginDo) Distinct(cols ...field.Expr) IProtocolPluginDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p protocolPluginDo) Omit(cols ...field.Expr) IProtocolPluginDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p protocolPluginDo) Join(table schema.Tabler, on ...field.Expr) IProtocolPluginDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p protocolPluginDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProtocolPluginDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p protocolPluginDo) RightJoin(table schema.Tabler, on ...field.Expr) IProtocolPluginDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p protocolPluginDo) Group(cols ...field.Expr) IProtocolPluginDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p protocolPluginDo) Having(conds ...gen.Condition) IProtocolPluginDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p protocolPluginDo) Limit(limit int) IProtocolPluginDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p protocolPluginDo) Offset(offset int) IProtocolPluginDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p protocolPluginDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProtocolPluginDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p protocolPluginDo) Unscoped() IProtocolPluginDo {
	return p.withDO(p.DO.Unscoped())
}

func (p protocolPluginDo) Create(values ...*model.ProtocolPlugin) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p protocolPluginDo) CreateInBatches(values []*model.ProtocolPlugin, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p protocolPluginDo) Save(values ...*model.ProtocolPlugin) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p protocolPluginDo) First() (*model.ProtocolPlugin, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProtocolPlugin), nil
	}
}

func (p protocolPluginDo) Take() (*model.ProtocolPlugin, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProtocolPlugin), nil
	}
}

func (p protocolPluginDo) Last() (*model.ProtocolPlugin, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProtocolPlugin), nil
	}
}

func (p protocolPluginDo) Find() ([]*model.ProtocolPlugin, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProtocolPlugin), err
}

func (p protocolPluginDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProtocolPlugin, err error) {
	buf := make([]*model.ProtocolPlugin, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p protocolPluginDo) FindInBatches(result *[]*model.ProtocolPlugin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p protocolPluginDo) Attrs(attrs ...field.AssignExpr) IProtocolPluginDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p protocolPluginDo) Assign(attrs ...field.AssignExpr) IProtocolPluginDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p protocolPluginDo) Joins(fields ...field.RelationField) IProtocolPluginDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p protocolPluginDo) Preload(fields ...field.RelationField) IProtocolPluginDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p protocolPluginDo) FirstOrInit() (*model.ProtocolPlugin, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProtocolPlugin), nil
	}
}

func (p protocolPluginDo) FirstOrCreate() (*model.ProtocolPlugin, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProtocolPlugin), nil
	}
}

func (p protocolPluginDo) FindByPage(offset int, limit int) (result []*model.ProtocolPlugin, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p protocolPluginDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p protocolPluginDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p protocolPluginDo) Delete(models ...*model.ProtocolPlugin) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *protocolPluginDo) withDO(do gen.Dao) *protocolPluginDo {
	p.DO = *do.(*gen.DO)
	return p
}
