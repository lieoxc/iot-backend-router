// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newSysFunction(db *gorm.DB, opts ...gen.DOOption) sysFunction {
	_sysFunction := sysFunction{}

	_sysFunction.sysFunctionDo.UseDB(db, opts...)
	_sysFunction.sysFunctionDo.UseModel(&model.SysFunction{})

	tableName := _sysFunction.sysFunctionDo.TableName()
	_sysFunction.ALL = field.NewAsterisk(tableName)
	_sysFunction.ID = field.NewString(tableName, "id")
	_sysFunction.Name = field.NewString(tableName, "name")
	_sysFunction.EnableFlag = field.NewString(tableName, "enable_flag")
	_sysFunction.Description = field.NewString(tableName, "description")
	_sysFunction.Remark = field.NewString(tableName, "remark")

	_sysFunction.fillFieldMap()

	return _sysFunction
}

type sysFunction struct {
	sysFunctionDo

	ALL         field.Asterisk
	ID          field.String // id
	Name        field.String // 功能名称
	EnableFlag  field.String // 启用标志 enable-启用 disable-禁用
	Description field.String // 描述
	Remark      field.String // 备注

	fieldMap map[string]field.Expr
}

func (s sysFunction) Table(newTableName string) *sysFunction {
	s.sysFunctionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysFunction) As(alias string) *sysFunction {
	s.sysFunctionDo.DO = *(s.sysFunctionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysFunction) updateTableName(table string) *sysFunction {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Name = field.NewString(table, "name")
	s.EnableFlag = field.NewString(table, "enable_flag")
	s.Description = field.NewString(table, "description")
	s.Remark = field.NewString(table, "remark")

	s.fillFieldMap()

	return s
}

func (s *sysFunction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysFunction) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["enable_flag"] = s.EnableFlag
	s.fieldMap["description"] = s.Description
	s.fieldMap["remark"] = s.Remark
}

func (s sysFunction) clone(db *gorm.DB) sysFunction {
	s.sysFunctionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysFunction) replaceDB(db *gorm.DB) sysFunction {
	s.sysFunctionDo.ReplaceDB(db)
	return s
}

type sysFunctionDo struct{ gen.DO }

type ISysFunctionDo interface {
	gen.SubQuery
	Debug() ISysFunctionDo
	WithContext(ctx context.Context) ISysFunctionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysFunctionDo
	WriteDB() ISysFunctionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysFunctionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysFunctionDo
	Not(conds ...gen.Condition) ISysFunctionDo
	Or(conds ...gen.Condition) ISysFunctionDo
	Select(conds ...field.Expr) ISysFunctionDo
	Where(conds ...gen.Condition) ISysFunctionDo
	Order(conds ...field.Expr) ISysFunctionDo
	Distinct(cols ...field.Expr) ISysFunctionDo
	Omit(cols ...field.Expr) ISysFunctionDo
	Join(table schema.Tabler, on ...field.Expr) ISysFunctionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysFunctionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysFunctionDo
	Group(cols ...field.Expr) ISysFunctionDo
	Having(conds ...gen.Condition) ISysFunctionDo
	Limit(limit int) ISysFunctionDo
	Offset(offset int) ISysFunctionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysFunctionDo
	Unscoped() ISysFunctionDo
	Create(values ...*model.SysFunction) error
	CreateInBatches(values []*model.SysFunction, batchSize int) error
	Save(values ...*model.SysFunction) error
	First() (*model.SysFunction, error)
	Take() (*model.SysFunction, error)
	Last() (*model.SysFunction, error)
	Find() ([]*model.SysFunction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysFunction, err error)
	FindInBatches(result *[]*model.SysFunction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysFunction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysFunctionDo
	Assign(attrs ...field.AssignExpr) ISysFunctionDo
	Joins(fields ...field.RelationField) ISysFunctionDo
	Preload(fields ...field.RelationField) ISysFunctionDo
	FirstOrInit() (*model.SysFunction, error)
	FirstOrCreate() (*model.SysFunction, error)
	FindByPage(offset int, limit int) (result []*model.SysFunction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysFunctionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysFunctionDo) Debug() ISysFunctionDo {
	return s.withDO(s.DO.Debug())
}

func (s sysFunctionDo) WithContext(ctx context.Context) ISysFunctionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysFunctionDo) ReadDB() ISysFunctionDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysFunctionDo) WriteDB() ISysFunctionDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysFunctionDo) Session(config *gorm.Session) ISysFunctionDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysFunctionDo) Clauses(conds ...clause.Expression) ISysFunctionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysFunctionDo) Returning(value interface{}, columns ...string) ISysFunctionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysFunctionDo) Not(conds ...gen.Condition) ISysFunctionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysFunctionDo) Or(conds ...gen.Condition) ISysFunctionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysFunctionDo) Select(conds ...field.Expr) ISysFunctionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysFunctionDo) Where(conds ...gen.Condition) ISysFunctionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysFunctionDo) Order(conds ...field.Expr) ISysFunctionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysFunctionDo) Distinct(cols ...field.Expr) ISysFunctionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysFunctionDo) Omit(cols ...field.Expr) ISysFunctionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysFunctionDo) Join(table schema.Tabler, on ...field.Expr) ISysFunctionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysFunctionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysFunctionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysFunctionDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysFunctionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysFunctionDo) Group(cols ...field.Expr) ISysFunctionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysFunctionDo) Having(conds ...gen.Condition) ISysFunctionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysFunctionDo) Limit(limit int) ISysFunctionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysFunctionDo) Offset(offset int) ISysFunctionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysFunctionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysFunctionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysFunctionDo) Unscoped() ISysFunctionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysFunctionDo) Create(values ...*model.SysFunction) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysFunctionDo) CreateInBatches(values []*model.SysFunction, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysFunctionDo) Save(values ...*model.SysFunction) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysFunctionDo) First() (*model.SysFunction, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysFunction), nil
	}
}

func (s sysFunctionDo) Take() (*model.SysFunction, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysFunction), nil
	}
}

func (s sysFunctionDo) Last() (*model.SysFunction, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysFunction), nil
	}
}

func (s sysFunctionDo) Find() ([]*model.SysFunction, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysFunction), err
}

func (s sysFunctionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysFunction, err error) {
	buf := make([]*model.SysFunction, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysFunctionDo) FindInBatches(result *[]*model.SysFunction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysFunctionDo) Attrs(attrs ...field.AssignExpr) ISysFunctionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysFunctionDo) Assign(attrs ...field.AssignExpr) ISysFunctionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysFunctionDo) Joins(fields ...field.RelationField) ISysFunctionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysFunctionDo) Preload(fields ...field.RelationField) ISysFunctionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysFunctionDo) FirstOrInit() (*model.SysFunction, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysFunction), nil
	}
}

func (s sysFunctionDo) FirstOrCreate() (*model.SysFunction, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysFunction), nil
	}
}

func (s sysFunctionDo) FindByPage(offset int, limit int) (result []*model.SysFunction, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysFunctionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysFunctionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysFunctionDo) Delete(models ...*model.SysFunction) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysFunctionDo) withDO(do gen.Dao) *sysFunctionDo {
	s.DO = *do.(*gen.DO)
	return s
}
