// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newDeviceUserLog(db *gorm.DB, opts ...gen.DOOption) deviceUserLog {
	_deviceUserLog := deviceUserLog{}

	_deviceUserLog.deviceUserLogDo.UseDB(db, opts...)
	_deviceUserLog.deviceUserLogDo.UseModel(&model.DeviceUserLog{})

	tableName := _deviceUserLog.deviceUserLogDo.TableName()
	_deviceUserLog.ALL = field.NewAsterisk(tableName)
	_deviceUserLog.ID = field.NewString(tableName, "id")
	_deviceUserLog.DeviceNum = field.NewInt32(tableName, "device_nums")
	_deviceUserLog.DeviceOn = field.NewInt32(tableName, "device_on")
	_deviceUserLog.CreatedAt = field.NewTime(tableName, "created_at")
	_deviceUserLog.TenantID = field.NewString(tableName, "tenant_id")

	_deviceUserLog.fillFieldMap()

	return _deviceUserLog
}

type deviceUserLog struct {
	deviceUserLogDo

	ALL       field.Asterisk
	ID        field.String
	DeviceNum field.Int32
	DeviceOn  field.Int32
	CreatedAt field.Time
	TenantID  field.String // 租户 id

	fieldMap map[string]field.Expr
}

func (d deviceUserLog) Table(newTableName string) *deviceUserLog {
	d.deviceUserLogDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deviceUserLog) As(alias string) *deviceUserLog {
	d.deviceUserLogDo.DO = *(d.deviceUserLogDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deviceUserLog) updateTableName(table string) *deviceUserLog {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.DeviceNum = field.NewInt32(table, "device_nums")
	d.DeviceOn = field.NewInt32(table, "device_on")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.TenantID = field.NewString(table, "tenant_id")

	d.fillFieldMap()

	return d
}

func (d *deviceUserLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deviceUserLog) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["id"] = d.ID
	d.fieldMap["device_nums"] = d.DeviceNum
	d.fieldMap["device_on"] = d.DeviceOn
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["tenant_id"] = d.TenantID
}

func (d deviceUserLog) clone(db *gorm.DB) deviceUserLog {
	d.deviceUserLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deviceUserLog) replaceDB(db *gorm.DB) deviceUserLog {
	d.deviceUserLogDo.ReplaceDB(db)
	return d
}

type deviceUserLogDo struct{ gen.DO }

type IDeviceUserLogDo interface {
	gen.SubQuery
	Debug() IDeviceUserLogDo
	WithContext(ctx context.Context) IDeviceUserLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeviceUserLogDo
	WriteDB() IDeviceUserLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeviceUserLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeviceUserLogDo
	Not(conds ...gen.Condition) IDeviceUserLogDo
	Or(conds ...gen.Condition) IDeviceUserLogDo
	Select(conds ...field.Expr) IDeviceUserLogDo
	Where(conds ...gen.Condition) IDeviceUserLogDo
	Order(conds ...field.Expr) IDeviceUserLogDo
	Distinct(cols ...field.Expr) IDeviceUserLogDo
	Omit(cols ...field.Expr) IDeviceUserLogDo
	Join(table schema.Tabler, on ...field.Expr) IDeviceUserLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceUserLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeviceUserLogDo
	Group(cols ...field.Expr) IDeviceUserLogDo
	Having(conds ...gen.Condition) IDeviceUserLogDo
	Limit(limit int) IDeviceUserLogDo
	Offset(offset int) IDeviceUserLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceUserLogDo
	Unscoped() IDeviceUserLogDo
	Create(values ...*model.DeviceUserLog) error
	CreateInBatches(values []*model.DeviceUserLog, batchSize int) error
	Save(values ...*model.DeviceUserLog) error
	First() (*model.DeviceUserLog, error)
	Take() (*model.DeviceUserLog, error)
	Last() (*model.DeviceUserLog, error)
	Find() ([]*model.DeviceUserLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeviceUserLog, err error)
	FindInBatches(result *[]*model.DeviceUserLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeviceUserLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeviceUserLogDo
	Assign(attrs ...field.AssignExpr) IDeviceUserLogDo
	Joins(fields ...field.RelationField) IDeviceUserLogDo
	Preload(fields ...field.RelationField) IDeviceUserLogDo
	FirstOrInit() (*model.DeviceUserLog, error)
	FirstOrCreate() (*model.DeviceUserLog, error)
	FindByPage(offset int, limit int) (result []*model.DeviceUserLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeviceUserLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deviceUserLogDo) Debug() IDeviceUserLogDo {
	return d.withDO(d.DO.Debug())
}

func (d deviceUserLogDo) WithContext(ctx context.Context) IDeviceUserLogDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deviceUserLogDo) ReadDB() IDeviceUserLogDo {
	return d.Clauses(dbresolver.Read)
}

func (d deviceUserLogDo) WriteDB() IDeviceUserLogDo {
	return d.Clauses(dbresolver.Write)
}

func (d deviceUserLogDo) Session(config *gorm.Session) IDeviceUserLogDo {
	return d.withDO(d.DO.Session(config))
}

func (d deviceUserLogDo) Clauses(conds ...clause.Expression) IDeviceUserLogDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deviceUserLogDo) Returning(value interface{}, columns ...string) IDeviceUserLogDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deviceUserLogDo) Not(conds ...gen.Condition) IDeviceUserLogDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deviceUserLogDo) Or(conds ...gen.Condition) IDeviceUserLogDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deviceUserLogDo) Select(conds ...field.Expr) IDeviceUserLogDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deviceUserLogDo) Where(conds ...gen.Condition) IDeviceUserLogDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deviceUserLogDo) Order(conds ...field.Expr) IDeviceUserLogDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deviceUserLogDo) Distinct(cols ...field.Expr) IDeviceUserLogDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deviceUserLogDo) Omit(cols ...field.Expr) IDeviceUserLogDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deviceUserLogDo) Join(table schema.Tabler, on ...field.Expr) IDeviceUserLogDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deviceUserLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceUserLogDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deviceUserLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeviceUserLogDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deviceUserLogDo) Group(cols ...field.Expr) IDeviceUserLogDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deviceUserLogDo) Having(conds ...gen.Condition) IDeviceUserLogDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deviceUserLogDo) Limit(limit int) IDeviceUserLogDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deviceUserLogDo) Offset(offset int) IDeviceUserLogDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deviceUserLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceUserLogDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deviceUserLogDo) Unscoped() IDeviceUserLogDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deviceUserLogDo) Create(values ...*model.DeviceUserLog) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deviceUserLogDo) CreateInBatches(values []*model.DeviceUserLog, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deviceUserLogDo) Save(values ...*model.DeviceUserLog) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deviceUserLogDo) First() (*model.DeviceUserLog, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceUserLog), nil
	}
}

func (d deviceUserLogDo) Take() (*model.DeviceUserLog, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceUserLog), nil
	}
}

func (d deviceUserLogDo) Last() (*model.DeviceUserLog, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceUserLog), nil
	}
}

func (d deviceUserLogDo) Find() ([]*model.DeviceUserLog, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeviceUserLog), err
}

func (d deviceUserLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeviceUserLog, err error) {
	buf := make([]*model.DeviceUserLog, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deviceUserLogDo) FindInBatches(result *[]*model.DeviceUserLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deviceUserLogDo) Attrs(attrs ...field.AssignExpr) IDeviceUserLogDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deviceUserLogDo) Assign(attrs ...field.AssignExpr) IDeviceUserLogDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deviceUserLogDo) Joins(fields ...field.RelationField) IDeviceUserLogDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deviceUserLogDo) Preload(fields ...field.RelationField) IDeviceUserLogDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deviceUserLogDo) FirstOrInit() (*model.DeviceUserLog, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceUserLog), nil
	}
}

func (d deviceUserLogDo) FirstOrCreate() (*model.DeviceUserLog, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceUserLog), nil
	}
}

func (d deviceUserLogDo) FindByPage(offset int, limit int) (result []*model.DeviceUserLog, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deviceUserLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deviceUserLogDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deviceUserLogDo) Delete(models ...*model.DeviceUserLog) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deviceUserLogDo) withDO(do gen.Dao) *deviceUserLogDo {
	d.DO = *do.(*gen.DO)
	return d
}
