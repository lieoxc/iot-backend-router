// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newAlarmConfig(db *gorm.DB, opts ...gen.DOOption) alarmConfig {
	_alarmConfig := alarmConfig{}

	_alarmConfig.alarmConfigDo.UseDB(db, opts...)
	_alarmConfig.alarmConfigDo.UseModel(&model.AlarmConfig{})

	tableName := _alarmConfig.alarmConfigDo.TableName()
	_alarmConfig.ALL = field.NewAsterisk(tableName)
	_alarmConfig.ID = field.NewString(tableName, "id")
	_alarmConfig.Name = field.NewString(tableName, "name")
	_alarmConfig.Description = field.NewString(tableName, "description")
	_alarmConfig.AlarmLevel = field.NewString(tableName, "alarm_level")
	_alarmConfig.NotificationGroupID = field.NewString(tableName, "notification_group_id")
	_alarmConfig.CreatedAt = field.NewTime(tableName, "created_at")
	_alarmConfig.UpdatedAt = field.NewTime(tableName, "updated_at")
	_alarmConfig.TenantID = field.NewString(tableName, "tenant_id")
	_alarmConfig.Remark = field.NewString(tableName, "remark")
	_alarmConfig.Enabled = field.NewString(tableName, "enabled")

	_alarmConfig.fillFieldMap()

	return _alarmConfig
}

type alarmConfig struct {
	alarmConfigDo

	ALL                 field.Asterisk
	ID                  field.String
	Name                field.String // 告警名称
	Description         field.String // 告警描述
	AlarmLevel          field.String // 告警级别H: 高M: 中L: 低
	NotificationGroupID field.String // 通知组id
	CreatedAt           field.Time
	UpdatedAt           field.Time
	TenantID            field.String
	Remark              field.String
	Enabled             field.String // 是否启用Y-启用N-停止

	fieldMap map[string]field.Expr
}

func (a alarmConfig) Table(newTableName string) *alarmConfig {
	a.alarmConfigDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a alarmConfig) As(alias string) *alarmConfig {
	a.alarmConfigDo.DO = *(a.alarmConfigDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *alarmConfig) updateTableName(table string) *alarmConfig {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.Name = field.NewString(table, "name")
	a.Description = field.NewString(table, "description")
	a.AlarmLevel = field.NewString(table, "alarm_level")
	a.NotificationGroupID = field.NewString(table, "notification_group_id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.TenantID = field.NewString(table, "tenant_id")
	a.Remark = field.NewString(table, "remark")
	a.Enabled = field.NewString(table, "enabled")

	a.fillFieldMap()

	return a
}

func (a *alarmConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *alarmConfig) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["description"] = a.Description
	a.fieldMap["alarm_level"] = a.AlarmLevel
	a.fieldMap["notification_group_id"] = a.NotificationGroupID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["tenant_id"] = a.TenantID
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["enabled"] = a.Enabled
}

func (a alarmConfig) clone(db *gorm.DB) alarmConfig {
	a.alarmConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a alarmConfig) replaceDB(db *gorm.DB) alarmConfig {
	a.alarmConfigDo.ReplaceDB(db)
	return a
}

type alarmConfigDo struct{ gen.DO }

type IAlarmConfigDo interface {
	gen.SubQuery
	Debug() IAlarmConfigDo
	WithContext(ctx context.Context) IAlarmConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAlarmConfigDo
	WriteDB() IAlarmConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAlarmConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAlarmConfigDo
	Not(conds ...gen.Condition) IAlarmConfigDo
	Or(conds ...gen.Condition) IAlarmConfigDo
	Select(conds ...field.Expr) IAlarmConfigDo
	Where(conds ...gen.Condition) IAlarmConfigDo
	Order(conds ...field.Expr) IAlarmConfigDo
	Distinct(cols ...field.Expr) IAlarmConfigDo
	Omit(cols ...field.Expr) IAlarmConfigDo
	Join(table schema.Tabler, on ...field.Expr) IAlarmConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAlarmConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAlarmConfigDo
	Group(cols ...field.Expr) IAlarmConfigDo
	Having(conds ...gen.Condition) IAlarmConfigDo
	Limit(limit int) IAlarmConfigDo
	Offset(offset int) IAlarmConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAlarmConfigDo
	Unscoped() IAlarmConfigDo
	Create(values ...*model.AlarmConfig) error
	CreateInBatches(values []*model.AlarmConfig, batchSize int) error
	Save(values ...*model.AlarmConfig) error
	First() (*model.AlarmConfig, error)
	Take() (*model.AlarmConfig, error)
	Last() (*model.AlarmConfig, error)
	Find() ([]*model.AlarmConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlarmConfig, err error)
	FindInBatches(result *[]*model.AlarmConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AlarmConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAlarmConfigDo
	Assign(attrs ...field.AssignExpr) IAlarmConfigDo
	Joins(fields ...field.RelationField) IAlarmConfigDo
	Preload(fields ...field.RelationField) IAlarmConfigDo
	FirstOrInit() (*model.AlarmConfig, error)
	FirstOrCreate() (*model.AlarmConfig, error)
	FindByPage(offset int, limit int) (result []*model.AlarmConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAlarmConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a alarmConfigDo) Debug() IAlarmConfigDo {
	return a.withDO(a.DO.Debug())
}

func (a alarmConfigDo) WithContext(ctx context.Context) IAlarmConfigDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a alarmConfigDo) ReadDB() IAlarmConfigDo {
	return a.Clauses(dbresolver.Read)
}

func (a alarmConfigDo) WriteDB() IAlarmConfigDo {
	return a.Clauses(dbresolver.Write)
}

func (a alarmConfigDo) Session(config *gorm.Session) IAlarmConfigDo {
	return a.withDO(a.DO.Session(config))
}

func (a alarmConfigDo) Clauses(conds ...clause.Expression) IAlarmConfigDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a alarmConfigDo) Returning(value interface{}, columns ...string) IAlarmConfigDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a alarmConfigDo) Not(conds ...gen.Condition) IAlarmConfigDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a alarmConfigDo) Or(conds ...gen.Condition) IAlarmConfigDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a alarmConfigDo) Select(conds ...field.Expr) IAlarmConfigDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a alarmConfigDo) Where(conds ...gen.Condition) IAlarmConfigDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a alarmConfigDo) Order(conds ...field.Expr) IAlarmConfigDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a alarmConfigDo) Distinct(cols ...field.Expr) IAlarmConfigDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a alarmConfigDo) Omit(cols ...field.Expr) IAlarmConfigDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a alarmConfigDo) Join(table schema.Tabler, on ...field.Expr) IAlarmConfigDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a alarmConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAlarmConfigDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a alarmConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IAlarmConfigDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a alarmConfigDo) Group(cols ...field.Expr) IAlarmConfigDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a alarmConfigDo) Having(conds ...gen.Condition) IAlarmConfigDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a alarmConfigDo) Limit(limit int) IAlarmConfigDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a alarmConfigDo) Offset(offset int) IAlarmConfigDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a alarmConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAlarmConfigDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a alarmConfigDo) Unscoped() IAlarmConfigDo {
	return a.withDO(a.DO.Unscoped())
}

func (a alarmConfigDo) Create(values ...*model.AlarmConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a alarmConfigDo) CreateInBatches(values []*model.AlarmConfig, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a alarmConfigDo) Save(values ...*model.AlarmConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a alarmConfigDo) First() (*model.AlarmConfig, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmConfig), nil
	}
}

func (a alarmConfigDo) Take() (*model.AlarmConfig, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmConfig), nil
	}
}

func (a alarmConfigDo) Last() (*model.AlarmConfig, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmConfig), nil
	}
}

func (a alarmConfigDo) Find() ([]*model.AlarmConfig, error) {
	result, err := a.DO.Find()
	return result.([]*model.AlarmConfig), err
}

func (a alarmConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AlarmConfig, err error) {
	buf := make([]*model.AlarmConfig, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a alarmConfigDo) FindInBatches(result *[]*model.AlarmConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a alarmConfigDo) Attrs(attrs ...field.AssignExpr) IAlarmConfigDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a alarmConfigDo) Assign(attrs ...field.AssignExpr) IAlarmConfigDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a alarmConfigDo) Joins(fields ...field.RelationField) IAlarmConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a alarmConfigDo) Preload(fields ...field.RelationField) IAlarmConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a alarmConfigDo) FirstOrInit() (*model.AlarmConfig, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmConfig), nil
	}
}

func (a alarmConfigDo) FirstOrCreate() (*model.AlarmConfig, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AlarmConfig), nil
	}
}

func (a alarmConfigDo) FindByPage(offset int, limit int) (result []*model.AlarmConfig, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a alarmConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a alarmConfigDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a alarmConfigDo) Delete(models ...*model.AlarmConfig) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *alarmConfigDo) withDO(do gen.Dao) *alarmConfigDo {
	a.DO = *do.(*gen.DO)
	return a
}
