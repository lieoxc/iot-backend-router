// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newNotificationGroup(db *gorm.DB, opts ...gen.DOOption) notificationGroup {
	_notificationGroup := notificationGroup{}

	_notificationGroup.notificationGroupDo.UseDB(db, opts...)
	_notificationGroup.notificationGroupDo.UseModel(&model.NotificationGroup{})

	tableName := _notificationGroup.notificationGroupDo.TableName()
	_notificationGroup.ALL = field.NewAsterisk(tableName)
	_notificationGroup.ID = field.NewString(tableName, "id")
	_notificationGroup.Name = field.NewString(tableName, "name")
	_notificationGroup.NotificationType = field.NewString(tableName, "notification_type")
	_notificationGroup.Status = field.NewString(tableName, "status")
	_notificationGroup.NotificationConfig = field.NewString(tableName, "notification_config")
	_notificationGroup.Description = field.NewString(tableName, "description")
	_notificationGroup.TenantID = field.NewString(tableName, "tenant_id")
	_notificationGroup.CreatedAt = field.NewTime(tableName, "created_at")
	_notificationGroup.UpdatedAt = field.NewTime(tableName, "updated_at")
	_notificationGroup.Remark = field.NewString(tableName, "remark")

	_notificationGroup.fillFieldMap()

	return _notificationGroup
}

type notificationGroup struct {
	notificationGroupDo

	ALL                field.Asterisk
	ID                 field.String
	Name               field.String // 名称
	NotificationType   field.String // 通知类型MEMBER-成员通知 EMAIL-邮箱通知 SME-短信通知 VOICE-语音通知 WEBHOOK-webhook
	Status             field.String // 通知状态ON-启用 OFF-停用
	NotificationConfig field.String // 通知配置
	Description        field.String // 描述
	TenantID           field.String // 租户id
	CreatedAt          field.Time   // 创建时间
	UpdatedAt          field.Time   // 更新时间
	Remark             field.String // 备注

	fieldMap map[string]field.Expr
}

func (n notificationGroup) Table(newTableName string) *notificationGroup {
	n.notificationGroupDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n notificationGroup) As(alias string) *notificationGroup {
	n.notificationGroupDo.DO = *(n.notificationGroupDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *notificationGroup) updateTableName(table string) *notificationGroup {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewString(table, "id")
	n.Name = field.NewString(table, "name")
	n.NotificationType = field.NewString(table, "notification_type")
	n.Status = field.NewString(table, "status")
	n.NotificationConfig = field.NewString(table, "notification_config")
	n.Description = field.NewString(table, "description")
	n.TenantID = field.NewString(table, "tenant_id")
	n.CreatedAt = field.NewTime(table, "created_at")
	n.UpdatedAt = field.NewTime(table, "updated_at")
	n.Remark = field.NewString(table, "remark")

	n.fillFieldMap()

	return n
}

func (n *notificationGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *notificationGroup) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 10)
	n.fieldMap["id"] = n.ID
	n.fieldMap["name"] = n.Name
	n.fieldMap["notification_type"] = n.NotificationType
	n.fieldMap["status"] = n.Status
	n.fieldMap["notification_config"] = n.NotificationConfig
	n.fieldMap["description"] = n.Description
	n.fieldMap["tenant_id"] = n.TenantID
	n.fieldMap["created_at"] = n.CreatedAt
	n.fieldMap["updated_at"] = n.UpdatedAt
	n.fieldMap["remark"] = n.Remark
}

func (n notificationGroup) clone(db *gorm.DB) notificationGroup {
	n.notificationGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n notificationGroup) replaceDB(db *gorm.DB) notificationGroup {
	n.notificationGroupDo.ReplaceDB(db)
	return n
}

type notificationGroupDo struct{ gen.DO }

type INotificationGroupDo interface {
	gen.SubQuery
	Debug() INotificationGroupDo
	WithContext(ctx context.Context) INotificationGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INotificationGroupDo
	WriteDB() INotificationGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INotificationGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INotificationGroupDo
	Not(conds ...gen.Condition) INotificationGroupDo
	Or(conds ...gen.Condition) INotificationGroupDo
	Select(conds ...field.Expr) INotificationGroupDo
	Where(conds ...gen.Condition) INotificationGroupDo
	Order(conds ...field.Expr) INotificationGroupDo
	Distinct(cols ...field.Expr) INotificationGroupDo
	Omit(cols ...field.Expr) INotificationGroupDo
	Join(table schema.Tabler, on ...field.Expr) INotificationGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INotificationGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) INotificationGroupDo
	Group(cols ...field.Expr) INotificationGroupDo
	Having(conds ...gen.Condition) INotificationGroupDo
	Limit(limit int) INotificationGroupDo
	Offset(offset int) INotificationGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INotificationGroupDo
	Unscoped() INotificationGroupDo
	Create(values ...*model.NotificationGroup) error
	CreateInBatches(values []*model.NotificationGroup, batchSize int) error
	Save(values ...*model.NotificationGroup) error
	First() (*model.NotificationGroup, error)
	Take() (*model.NotificationGroup, error)
	Last() (*model.NotificationGroup, error)
	Find() ([]*model.NotificationGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NotificationGroup, err error)
	FindInBatches(result *[]*model.NotificationGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NotificationGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INotificationGroupDo
	Assign(attrs ...field.AssignExpr) INotificationGroupDo
	Joins(fields ...field.RelationField) INotificationGroupDo
	Preload(fields ...field.RelationField) INotificationGroupDo
	FirstOrInit() (*model.NotificationGroup, error)
	FirstOrCreate() (*model.NotificationGroup, error)
	FindByPage(offset int, limit int) (result []*model.NotificationGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INotificationGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n notificationGroupDo) Debug() INotificationGroupDo {
	return n.withDO(n.DO.Debug())
}

func (n notificationGroupDo) WithContext(ctx context.Context) INotificationGroupDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n notificationGroupDo) ReadDB() INotificationGroupDo {
	return n.Clauses(dbresolver.Read)
}

func (n notificationGroupDo) WriteDB() INotificationGroupDo {
	return n.Clauses(dbresolver.Write)
}

func (n notificationGroupDo) Session(config *gorm.Session) INotificationGroupDo {
	return n.withDO(n.DO.Session(config))
}

func (n notificationGroupDo) Clauses(conds ...clause.Expression) INotificationGroupDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n notificationGroupDo) Returning(value interface{}, columns ...string) INotificationGroupDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n notificationGroupDo) Not(conds ...gen.Condition) INotificationGroupDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n notificationGroupDo) Or(conds ...gen.Condition) INotificationGroupDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n notificationGroupDo) Select(conds ...field.Expr) INotificationGroupDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n notificationGroupDo) Where(conds ...gen.Condition) INotificationGroupDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n notificationGroupDo) Order(conds ...field.Expr) INotificationGroupDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n notificationGroupDo) Distinct(cols ...field.Expr) INotificationGroupDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n notificationGroupDo) Omit(cols ...field.Expr) INotificationGroupDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n notificationGroupDo) Join(table schema.Tabler, on ...field.Expr) INotificationGroupDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n notificationGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) INotificationGroupDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n notificationGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) INotificationGroupDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n notificationGroupDo) Group(cols ...field.Expr) INotificationGroupDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n notificationGroupDo) Having(conds ...gen.Condition) INotificationGroupDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n notificationGroupDo) Limit(limit int) INotificationGroupDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n notificationGroupDo) Offset(offset int) INotificationGroupDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n notificationGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INotificationGroupDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n notificationGroupDo) Unscoped() INotificationGroupDo {
	return n.withDO(n.DO.Unscoped())
}

func (n notificationGroupDo) Create(values ...*model.NotificationGroup) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n notificationGroupDo) CreateInBatches(values []*model.NotificationGroup, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n notificationGroupDo) Save(values ...*model.NotificationGroup) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n notificationGroupDo) First() (*model.NotificationGroup, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationGroup), nil
	}
}

func (n notificationGroupDo) Take() (*model.NotificationGroup, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationGroup), nil
	}
}

func (n notificationGroupDo) Last() (*model.NotificationGroup, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationGroup), nil
	}
}

func (n notificationGroupDo) Find() ([]*model.NotificationGroup, error) {
	result, err := n.DO.Find()
	return result.([]*model.NotificationGroup), err
}

func (n notificationGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NotificationGroup, err error) {
	buf := make([]*model.NotificationGroup, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n notificationGroupDo) FindInBatches(result *[]*model.NotificationGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n notificationGroupDo) Attrs(attrs ...field.AssignExpr) INotificationGroupDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n notificationGroupDo) Assign(attrs ...field.AssignExpr) INotificationGroupDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n notificationGroupDo) Joins(fields ...field.RelationField) INotificationGroupDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n notificationGroupDo) Preload(fields ...field.RelationField) INotificationGroupDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n notificationGroupDo) FirstOrInit() (*model.NotificationGroup, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationGroup), nil
	}
}

func (n notificationGroupDo) FirstOrCreate() (*model.NotificationGroup, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationGroup), nil
	}
}

func (n notificationGroupDo) FindByPage(offset int, limit int) (result []*model.NotificationGroup, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n notificationGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n notificationGroupDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n notificationGroupDo) Delete(models ...*model.NotificationGroup) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *notificationGroupDo) withDO(do gen.Dao) *notificationGroupDo {
	n.DO = *do.(*gen.DO)
	return n
}
