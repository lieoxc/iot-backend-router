// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newVisDashboard(db *gorm.DB, opts ...gen.DOOption) visDashboard {
	_visDashboard := visDashboard{}

	_visDashboard.visDashboardDo.UseDB(db, opts...)
	_visDashboard.visDashboardDo.UseModel(&model.VisDashboard{})

	tableName := _visDashboard.visDashboardDo.TableName()
	_visDashboard.ALL = field.NewAsterisk(tableName)
	_visDashboard.ID = field.NewString(tableName, "id")
	_visDashboard.RelationID = field.NewString(tableName, "relation_id")
	_visDashboard.JSONDatum = field.NewString(tableName, "json_data")
	_visDashboard.DashboardName = field.NewString(tableName, "dashboard_name")
	_visDashboard.CreateAt = field.NewTime(tableName, "create_at")
	_visDashboard.Sort = field.NewInt32(tableName, "sort")
	_visDashboard.Remark = field.NewString(tableName, "remark")
	_visDashboard.TenantID = field.NewString(tableName, "tenant_id")
	_visDashboard.ShareID = field.NewString(tableName, "share_id")

	_visDashboard.fillFieldMap()

	return _visDashboard
}

type visDashboard struct {
	visDashboardDo

	ALL           field.Asterisk
	ID            field.String
	RelationID    field.String
	JSONDatum     field.String
	DashboardName field.String
	CreateAt      field.Time
	Sort          field.Int32 // 排序
	Remark        field.String
	TenantID      field.String
	ShareID       field.String // 分享id

	fieldMap map[string]field.Expr
}

func (v visDashboard) Table(newTableName string) *visDashboard {
	v.visDashboardDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v visDashboard) As(alias string) *visDashboard {
	v.visDashboardDo.DO = *(v.visDashboardDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *visDashboard) updateTableName(table string) *visDashboard {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewString(table, "id")
	v.RelationID = field.NewString(table, "relation_id")
	v.JSONDatum = field.NewString(table, "json_data")
	v.DashboardName = field.NewString(table, "dashboard_name")
	v.CreateAt = field.NewTime(table, "create_at")
	v.Sort = field.NewInt32(table, "sort")
	v.Remark = field.NewString(table, "remark")
	v.TenantID = field.NewString(table, "tenant_id")
	v.ShareID = field.NewString(table, "share_id")

	v.fillFieldMap()

	return v
}

func (v *visDashboard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *visDashboard) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 9)
	v.fieldMap["id"] = v.ID
	v.fieldMap["relation_id"] = v.RelationID
	v.fieldMap["json_data"] = v.JSONDatum
	v.fieldMap["dashboard_name"] = v.DashboardName
	v.fieldMap["create_at"] = v.CreateAt
	v.fieldMap["sort"] = v.Sort
	v.fieldMap["remark"] = v.Remark
	v.fieldMap["tenant_id"] = v.TenantID
	v.fieldMap["share_id"] = v.ShareID
}

func (v visDashboard) clone(db *gorm.DB) visDashboard {
	v.visDashboardDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v visDashboard) replaceDB(db *gorm.DB) visDashboard {
	v.visDashboardDo.ReplaceDB(db)
	return v
}

type visDashboardDo struct{ gen.DO }

type IVisDashboardDo interface {
	gen.SubQuery
	Debug() IVisDashboardDo
	WithContext(ctx context.Context) IVisDashboardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVisDashboardDo
	WriteDB() IVisDashboardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVisDashboardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVisDashboardDo
	Not(conds ...gen.Condition) IVisDashboardDo
	Or(conds ...gen.Condition) IVisDashboardDo
	Select(conds ...field.Expr) IVisDashboardDo
	Where(conds ...gen.Condition) IVisDashboardDo
	Order(conds ...field.Expr) IVisDashboardDo
	Distinct(cols ...field.Expr) IVisDashboardDo
	Omit(cols ...field.Expr) IVisDashboardDo
	Join(table schema.Tabler, on ...field.Expr) IVisDashboardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVisDashboardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVisDashboardDo
	Group(cols ...field.Expr) IVisDashboardDo
	Having(conds ...gen.Condition) IVisDashboardDo
	Limit(limit int) IVisDashboardDo
	Offset(offset int) IVisDashboardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVisDashboardDo
	Unscoped() IVisDashboardDo
	Create(values ...*model.VisDashboard) error
	CreateInBatches(values []*model.VisDashboard, batchSize int) error
	Save(values ...*model.VisDashboard) error
	First() (*model.VisDashboard, error)
	Take() (*model.VisDashboard, error)
	Last() (*model.VisDashboard, error)
	Find() ([]*model.VisDashboard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VisDashboard, err error)
	FindInBatches(result *[]*model.VisDashboard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VisDashboard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVisDashboardDo
	Assign(attrs ...field.AssignExpr) IVisDashboardDo
	Joins(fields ...field.RelationField) IVisDashboardDo
	Preload(fields ...field.RelationField) IVisDashboardDo
	FirstOrInit() (*model.VisDashboard, error)
	FirstOrCreate() (*model.VisDashboard, error)
	FindByPage(offset int, limit int) (result []*model.VisDashboard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVisDashboardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v visDashboardDo) Debug() IVisDashboardDo {
	return v.withDO(v.DO.Debug())
}

func (v visDashboardDo) WithContext(ctx context.Context) IVisDashboardDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v visDashboardDo) ReadDB() IVisDashboardDo {
	return v.Clauses(dbresolver.Read)
}

func (v visDashboardDo) WriteDB() IVisDashboardDo {
	return v.Clauses(dbresolver.Write)
}

func (v visDashboardDo) Session(config *gorm.Session) IVisDashboardDo {
	return v.withDO(v.DO.Session(config))
}

func (v visDashboardDo) Clauses(conds ...clause.Expression) IVisDashboardDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v visDashboardDo) Returning(value interface{}, columns ...string) IVisDashboardDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v visDashboardDo) Not(conds ...gen.Condition) IVisDashboardDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v visDashboardDo) Or(conds ...gen.Condition) IVisDashboardDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v visDashboardDo) Select(conds ...field.Expr) IVisDashboardDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v visDashboardDo) Where(conds ...gen.Condition) IVisDashboardDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v visDashboardDo) Order(conds ...field.Expr) IVisDashboardDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v visDashboardDo) Distinct(cols ...field.Expr) IVisDashboardDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v visDashboardDo) Omit(cols ...field.Expr) IVisDashboardDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v visDashboardDo) Join(table schema.Tabler, on ...field.Expr) IVisDashboardDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v visDashboardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVisDashboardDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v visDashboardDo) RightJoin(table schema.Tabler, on ...field.Expr) IVisDashboardDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v visDashboardDo) Group(cols ...field.Expr) IVisDashboardDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v visDashboardDo) Having(conds ...gen.Condition) IVisDashboardDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v visDashboardDo) Limit(limit int) IVisDashboardDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v visDashboardDo) Offset(offset int) IVisDashboardDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v visDashboardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVisDashboardDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v visDashboardDo) Unscoped() IVisDashboardDo {
	return v.withDO(v.DO.Unscoped())
}

func (v visDashboardDo) Create(values ...*model.VisDashboard) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v visDashboardDo) CreateInBatches(values []*model.VisDashboard, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v visDashboardDo) Save(values ...*model.VisDashboard) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v visDashboardDo) First() (*model.VisDashboard, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VisDashboard), nil
	}
}

func (v visDashboardDo) Take() (*model.VisDashboard, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VisDashboard), nil
	}
}

func (v visDashboardDo) Last() (*model.VisDashboard, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VisDashboard), nil
	}
}

func (v visDashboardDo) Find() ([]*model.VisDashboard, error) {
	result, err := v.DO.Find()
	return result.([]*model.VisDashboard), err
}

func (v visDashboardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VisDashboard, err error) {
	buf := make([]*model.VisDashboard, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v visDashboardDo) FindInBatches(result *[]*model.VisDashboard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v visDashboardDo) Attrs(attrs ...field.AssignExpr) IVisDashboardDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v visDashboardDo) Assign(attrs ...field.AssignExpr) IVisDashboardDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v visDashboardDo) Joins(fields ...field.RelationField) IVisDashboardDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v visDashboardDo) Preload(fields ...field.RelationField) IVisDashboardDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v visDashboardDo) FirstOrInit() (*model.VisDashboard, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VisDashboard), nil
	}
}

func (v visDashboardDo) FirstOrCreate() (*model.VisDashboard, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VisDashboard), nil
	}
}

func (v visDashboardDo) FindByPage(offset int, limit int) (result []*model.VisDashboard, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v visDashboardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v visDashboardDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v visDashboardDo) Delete(models ...*model.VisDashboard) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *visDashboardDo) withDO(do gen.Dao) *visDashboardDo {
	v.DO = *do.(*gen.DO)
	return v
}
