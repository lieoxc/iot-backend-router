// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newVisPluginLocal(db *gorm.DB, opts ...gen.DOOption) visPluginLocal {
	_visPluginLocal := visPluginLocal{}

	_visPluginLocal.visPluginLocalDo.UseDB(db, opts...)
	_visPluginLocal.visPluginLocalDo.UseModel(&model.VisPluginLocal{})

	tableName := _visPluginLocal.visPluginLocalDo.TableName()
	_visPluginLocal.ALL = field.NewAsterisk(tableName)
	_visPluginLocal.ID = field.NewString(tableName, "id")
	_visPluginLocal.TenantID = field.NewString(tableName, "tenant_id")
	_visPluginLocal.PluginURL = field.NewString(tableName, "plugin_url")
	_visPluginLocal.CreateAt = field.NewTime(tableName, "create_at")
	_visPluginLocal.Remark = field.NewString(tableName, "remark")

	_visPluginLocal.fillFieldMap()

	return _visPluginLocal
}

type visPluginLocal struct {
	visPluginLocalDo

	ALL       field.Asterisk
	ID        field.String
	TenantID  field.String // 租户id
	PluginURL field.String // 可视化插件名称
	CreateAt  field.Time   // 创建时间
	Remark    field.String

	fieldMap map[string]field.Expr
}

func (v visPluginLocal) Table(newTableName string) *visPluginLocal {
	v.visPluginLocalDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v visPluginLocal) As(alias string) *visPluginLocal {
	v.visPluginLocalDo.DO = *(v.visPluginLocalDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *visPluginLocal) updateTableName(table string) *visPluginLocal {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewString(table, "id")
	v.TenantID = field.NewString(table, "tenant_id")
	v.PluginURL = field.NewString(table, "plugin_url")
	v.CreateAt = field.NewTime(table, "create_at")
	v.Remark = field.NewString(table, "remark")

	v.fillFieldMap()

	return v
}

func (v *visPluginLocal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *visPluginLocal) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 5)
	v.fieldMap["id"] = v.ID
	v.fieldMap["tenant_id"] = v.TenantID
	v.fieldMap["plugin_url"] = v.PluginURL
	v.fieldMap["create_at"] = v.CreateAt
	v.fieldMap["remark"] = v.Remark
}

func (v visPluginLocal) clone(db *gorm.DB) visPluginLocal {
	v.visPluginLocalDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v visPluginLocal) replaceDB(db *gorm.DB) visPluginLocal {
	v.visPluginLocalDo.ReplaceDB(db)
	return v
}

type visPluginLocalDo struct{ gen.DO }

type IVisPluginLocalDo interface {
	gen.SubQuery
	Debug() IVisPluginLocalDo
	WithContext(ctx context.Context) IVisPluginLocalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVisPluginLocalDo
	WriteDB() IVisPluginLocalDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVisPluginLocalDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVisPluginLocalDo
	Not(conds ...gen.Condition) IVisPluginLocalDo
	Or(conds ...gen.Condition) IVisPluginLocalDo
	Select(conds ...field.Expr) IVisPluginLocalDo
	Where(conds ...gen.Condition) IVisPluginLocalDo
	Order(conds ...field.Expr) IVisPluginLocalDo
	Distinct(cols ...field.Expr) IVisPluginLocalDo
	Omit(cols ...field.Expr) IVisPluginLocalDo
	Join(table schema.Tabler, on ...field.Expr) IVisPluginLocalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVisPluginLocalDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVisPluginLocalDo
	Group(cols ...field.Expr) IVisPluginLocalDo
	Having(conds ...gen.Condition) IVisPluginLocalDo
	Limit(limit int) IVisPluginLocalDo
	Offset(offset int) IVisPluginLocalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVisPluginLocalDo
	Unscoped() IVisPluginLocalDo
	Create(values ...*model.VisPluginLocal) error
	CreateInBatches(values []*model.VisPluginLocal, batchSize int) error
	Save(values ...*model.VisPluginLocal) error
	First() (*model.VisPluginLocal, error)
	Take() (*model.VisPluginLocal, error)
	Last() (*model.VisPluginLocal, error)
	Find() ([]*model.VisPluginLocal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VisPluginLocal, err error)
	FindInBatches(result *[]*model.VisPluginLocal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VisPluginLocal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVisPluginLocalDo
	Assign(attrs ...field.AssignExpr) IVisPluginLocalDo
	Joins(fields ...field.RelationField) IVisPluginLocalDo
	Preload(fields ...field.RelationField) IVisPluginLocalDo
	FirstOrInit() (*model.VisPluginLocal, error)
	FirstOrCreate() (*model.VisPluginLocal, error)
	FindByPage(offset int, limit int) (result []*model.VisPluginLocal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVisPluginLocalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v visPluginLocalDo) Debug() IVisPluginLocalDo {
	return v.withDO(v.DO.Debug())
}

func (v visPluginLocalDo) WithContext(ctx context.Context) IVisPluginLocalDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v visPluginLocalDo) ReadDB() IVisPluginLocalDo {
	return v.Clauses(dbresolver.Read)
}

func (v visPluginLocalDo) WriteDB() IVisPluginLocalDo {
	return v.Clauses(dbresolver.Write)
}

func (v visPluginLocalDo) Session(config *gorm.Session) IVisPluginLocalDo {
	return v.withDO(v.DO.Session(config))
}

func (v visPluginLocalDo) Clauses(conds ...clause.Expression) IVisPluginLocalDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v visPluginLocalDo) Returning(value interface{}, columns ...string) IVisPluginLocalDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v visPluginLocalDo) Not(conds ...gen.Condition) IVisPluginLocalDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v visPluginLocalDo) Or(conds ...gen.Condition) IVisPluginLocalDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v visPluginLocalDo) Select(conds ...field.Expr) IVisPluginLocalDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v visPluginLocalDo) Where(conds ...gen.Condition) IVisPluginLocalDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v visPluginLocalDo) Order(conds ...field.Expr) IVisPluginLocalDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v visPluginLocalDo) Distinct(cols ...field.Expr) IVisPluginLocalDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v visPluginLocalDo) Omit(cols ...field.Expr) IVisPluginLocalDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v visPluginLocalDo) Join(table schema.Tabler, on ...field.Expr) IVisPluginLocalDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v visPluginLocalDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVisPluginLocalDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v visPluginLocalDo) RightJoin(table schema.Tabler, on ...field.Expr) IVisPluginLocalDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v visPluginLocalDo) Group(cols ...field.Expr) IVisPluginLocalDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v visPluginLocalDo) Having(conds ...gen.Condition) IVisPluginLocalDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v visPluginLocalDo) Limit(limit int) IVisPluginLocalDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v visPluginLocalDo) Offset(offset int) IVisPluginLocalDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v visPluginLocalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVisPluginLocalDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v visPluginLocalDo) Unscoped() IVisPluginLocalDo {
	return v.withDO(v.DO.Unscoped())
}

func (v visPluginLocalDo) Create(values ...*model.VisPluginLocal) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v visPluginLocalDo) CreateInBatches(values []*model.VisPluginLocal, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v visPluginLocalDo) Save(values ...*model.VisPluginLocal) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v visPluginLocalDo) First() (*model.VisPluginLocal, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VisPluginLocal), nil
	}
}

func (v visPluginLocalDo) Take() (*model.VisPluginLocal, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VisPluginLocal), nil
	}
}

func (v visPluginLocalDo) Last() (*model.VisPluginLocal, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VisPluginLocal), nil
	}
}

func (v visPluginLocalDo) Find() ([]*model.VisPluginLocal, error) {
	result, err := v.DO.Find()
	return result.([]*model.VisPluginLocal), err
}

func (v visPluginLocalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VisPluginLocal, err error) {
	buf := make([]*model.VisPluginLocal, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v visPluginLocalDo) FindInBatches(result *[]*model.VisPluginLocal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v visPluginLocalDo) Attrs(attrs ...field.AssignExpr) IVisPluginLocalDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v visPluginLocalDo) Assign(attrs ...field.AssignExpr) IVisPluginLocalDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v visPluginLocalDo) Joins(fields ...field.RelationField) IVisPluginLocalDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v visPluginLocalDo) Preload(fields ...field.RelationField) IVisPluginLocalDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v visPluginLocalDo) FirstOrInit() (*model.VisPluginLocal, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VisPluginLocal), nil
	}
}

func (v visPluginLocalDo) FirstOrCreate() (*model.VisPluginLocal, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VisPluginLocal), nil
	}
}

func (v visPluginLocalDo) FindByPage(offset int, limit int) (result []*model.VisPluginLocal, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v visPluginLocalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v visPluginLocalDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v visPluginLocalDo) Delete(models ...*model.VisPluginLocal) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *visPluginLocalDo) withDO(do gen.Dao) *visPluginLocalDo {
	v.DO = *do.(*gen.DO)
	return v
}
