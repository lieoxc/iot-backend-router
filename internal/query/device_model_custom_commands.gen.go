// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newDeviceModelCustomCommand(db *gorm.DB, opts ...gen.DOOption) deviceModelCustomCommand {
	_deviceModelCustomCommand := deviceModelCustomCommand{}

	_deviceModelCustomCommand.deviceModelCustomCommandDo.UseDB(db, opts...)
	_deviceModelCustomCommand.deviceModelCustomCommandDo.UseModel(&model.DeviceModelCustomCommand{})

	tableName := _deviceModelCustomCommand.deviceModelCustomCommandDo.TableName()
	_deviceModelCustomCommand.ALL = field.NewAsterisk(tableName)
	_deviceModelCustomCommand.ID = field.NewString(tableName, "id")
	_deviceModelCustomCommand.DeviceTemplateID = field.NewString(tableName, "device_template_id")
	_deviceModelCustomCommand.ButtomName = field.NewString(tableName, "buttom_name")
	_deviceModelCustomCommand.DataIdentifier = field.NewString(tableName, "data_identifier")
	_deviceModelCustomCommand.Description = field.NewString(tableName, "description")
	_deviceModelCustomCommand.Instruct = field.NewString(tableName, "instruct")
	_deviceModelCustomCommand.EnableStatus = field.NewString(tableName, "enable_status")
	_deviceModelCustomCommand.Remark = field.NewString(tableName, "remark")
	_deviceModelCustomCommand.TenantID = field.NewString(tableName, "tenant_id")

	_deviceModelCustomCommand.fillFieldMap()

	return _deviceModelCustomCommand
}

type deviceModelCustomCommand struct {
	deviceModelCustomCommandDo

	ALL              field.Asterisk
	ID               field.String // id
	DeviceTemplateID field.String // 设备模板id
	ButtomName       field.String // 按钮名称
	DataIdentifier   field.String // 数据标识符
	Description      field.String // 描述
	Instruct         field.String // 指令内容
	EnableStatus     field.String // 启用状态enable-启用disable-禁用
	Remark           field.String // 备注
	TenantID         field.String

	fieldMap map[string]field.Expr
}

func (d deviceModelCustomCommand) Table(newTableName string) *deviceModelCustomCommand {
	d.deviceModelCustomCommandDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deviceModelCustomCommand) As(alias string) *deviceModelCustomCommand {
	d.deviceModelCustomCommandDo.DO = *(d.deviceModelCustomCommandDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deviceModelCustomCommand) updateTableName(table string) *deviceModelCustomCommand {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.DeviceTemplateID = field.NewString(table, "device_template_id")
	d.ButtomName = field.NewString(table, "buttom_name")
	d.DataIdentifier = field.NewString(table, "data_identifier")
	d.Description = field.NewString(table, "description")
	d.Instruct = field.NewString(table, "instruct")
	d.EnableStatus = field.NewString(table, "enable_status")
	d.Remark = field.NewString(table, "remark")
	d.TenantID = field.NewString(table, "tenant_id")

	d.fillFieldMap()

	return d
}

func (d *deviceModelCustomCommand) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deviceModelCustomCommand) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 9)
	d.fieldMap["id"] = d.ID
	d.fieldMap["device_template_id"] = d.DeviceTemplateID
	d.fieldMap["buttom_name"] = d.ButtomName
	d.fieldMap["data_identifier"] = d.DataIdentifier
	d.fieldMap["description"] = d.Description
	d.fieldMap["instruct"] = d.Instruct
	d.fieldMap["enable_status"] = d.EnableStatus
	d.fieldMap["remark"] = d.Remark
	d.fieldMap["tenant_id"] = d.TenantID
}

func (d deviceModelCustomCommand) clone(db *gorm.DB) deviceModelCustomCommand {
	d.deviceModelCustomCommandDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deviceModelCustomCommand) replaceDB(db *gorm.DB) deviceModelCustomCommand {
	d.deviceModelCustomCommandDo.ReplaceDB(db)
	return d
}

type deviceModelCustomCommandDo struct{ gen.DO }

type IDeviceModelCustomCommandDo interface {
	gen.SubQuery
	Debug() IDeviceModelCustomCommandDo
	WithContext(ctx context.Context) IDeviceModelCustomCommandDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeviceModelCustomCommandDo
	WriteDB() IDeviceModelCustomCommandDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeviceModelCustomCommandDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeviceModelCustomCommandDo
	Not(conds ...gen.Condition) IDeviceModelCustomCommandDo
	Or(conds ...gen.Condition) IDeviceModelCustomCommandDo
	Select(conds ...field.Expr) IDeviceModelCustomCommandDo
	Where(conds ...gen.Condition) IDeviceModelCustomCommandDo
	Order(conds ...field.Expr) IDeviceModelCustomCommandDo
	Distinct(cols ...field.Expr) IDeviceModelCustomCommandDo
	Omit(cols ...field.Expr) IDeviceModelCustomCommandDo
	Join(table schema.Tabler, on ...field.Expr) IDeviceModelCustomCommandDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceModelCustomCommandDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeviceModelCustomCommandDo
	Group(cols ...field.Expr) IDeviceModelCustomCommandDo
	Having(conds ...gen.Condition) IDeviceModelCustomCommandDo
	Limit(limit int) IDeviceModelCustomCommandDo
	Offset(offset int) IDeviceModelCustomCommandDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceModelCustomCommandDo
	Unscoped() IDeviceModelCustomCommandDo
	Create(values ...*model.DeviceModelCustomCommand) error
	CreateInBatches(values []*model.DeviceModelCustomCommand, batchSize int) error
	Save(values ...*model.DeviceModelCustomCommand) error
	First() (*model.DeviceModelCustomCommand, error)
	Take() (*model.DeviceModelCustomCommand, error)
	Last() (*model.DeviceModelCustomCommand, error)
	Find() ([]*model.DeviceModelCustomCommand, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeviceModelCustomCommand, err error)
	FindInBatches(result *[]*model.DeviceModelCustomCommand, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeviceModelCustomCommand) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeviceModelCustomCommandDo
	Assign(attrs ...field.AssignExpr) IDeviceModelCustomCommandDo
	Joins(fields ...field.RelationField) IDeviceModelCustomCommandDo
	Preload(fields ...field.RelationField) IDeviceModelCustomCommandDo
	FirstOrInit() (*model.DeviceModelCustomCommand, error)
	FirstOrCreate() (*model.DeviceModelCustomCommand, error)
	FindByPage(offset int, limit int) (result []*model.DeviceModelCustomCommand, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeviceModelCustomCommandDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deviceModelCustomCommandDo) Debug() IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Debug())
}

func (d deviceModelCustomCommandDo) WithContext(ctx context.Context) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deviceModelCustomCommandDo) ReadDB() IDeviceModelCustomCommandDo {
	return d.Clauses(dbresolver.Read)
}

func (d deviceModelCustomCommandDo) WriteDB() IDeviceModelCustomCommandDo {
	return d.Clauses(dbresolver.Write)
}

func (d deviceModelCustomCommandDo) Session(config *gorm.Session) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Session(config))
}

func (d deviceModelCustomCommandDo) Clauses(conds ...clause.Expression) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deviceModelCustomCommandDo) Returning(value interface{}, columns ...string) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deviceModelCustomCommandDo) Not(conds ...gen.Condition) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deviceModelCustomCommandDo) Or(conds ...gen.Condition) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deviceModelCustomCommandDo) Select(conds ...field.Expr) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deviceModelCustomCommandDo) Where(conds ...gen.Condition) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deviceModelCustomCommandDo) Order(conds ...field.Expr) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deviceModelCustomCommandDo) Distinct(cols ...field.Expr) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deviceModelCustomCommandDo) Omit(cols ...field.Expr) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deviceModelCustomCommandDo) Join(table schema.Tabler, on ...field.Expr) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deviceModelCustomCommandDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deviceModelCustomCommandDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deviceModelCustomCommandDo) Group(cols ...field.Expr) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deviceModelCustomCommandDo) Having(conds ...gen.Condition) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deviceModelCustomCommandDo) Limit(limit int) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deviceModelCustomCommandDo) Offset(offset int) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deviceModelCustomCommandDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deviceModelCustomCommandDo) Unscoped() IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deviceModelCustomCommandDo) Create(values ...*model.DeviceModelCustomCommand) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deviceModelCustomCommandDo) CreateInBatches(values []*model.DeviceModelCustomCommand, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deviceModelCustomCommandDo) Save(values ...*model.DeviceModelCustomCommand) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deviceModelCustomCommandDo) First() (*model.DeviceModelCustomCommand, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceModelCustomCommand), nil
	}
}

func (d deviceModelCustomCommandDo) Take() (*model.DeviceModelCustomCommand, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceModelCustomCommand), nil
	}
}

func (d deviceModelCustomCommandDo) Last() (*model.DeviceModelCustomCommand, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceModelCustomCommand), nil
	}
}

func (d deviceModelCustomCommandDo) Find() ([]*model.DeviceModelCustomCommand, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeviceModelCustomCommand), err
}

func (d deviceModelCustomCommandDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeviceModelCustomCommand, err error) {
	buf := make([]*model.DeviceModelCustomCommand, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deviceModelCustomCommandDo) FindInBatches(result *[]*model.DeviceModelCustomCommand, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deviceModelCustomCommandDo) Attrs(attrs ...field.AssignExpr) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deviceModelCustomCommandDo) Assign(attrs ...field.AssignExpr) IDeviceModelCustomCommandDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deviceModelCustomCommandDo) Joins(fields ...field.RelationField) IDeviceModelCustomCommandDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deviceModelCustomCommandDo) Preload(fields ...field.RelationField) IDeviceModelCustomCommandDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deviceModelCustomCommandDo) FirstOrInit() (*model.DeviceModelCustomCommand, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceModelCustomCommand), nil
	}
}

func (d deviceModelCustomCommandDo) FirstOrCreate() (*model.DeviceModelCustomCommand, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeviceModelCustomCommand), nil
	}
}

func (d deviceModelCustomCommandDo) FindByPage(offset int, limit int) (result []*model.DeviceModelCustomCommand, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deviceModelCustomCommandDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deviceModelCustomCommandDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deviceModelCustomCommandDo) Delete(models ...*model.DeviceModelCustomCommand) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deviceModelCustomCommandDo) withDO(do gen.Dao) *deviceModelCustomCommandDo {
	d.DO = *do.(*gen.DO)
	return d
}
