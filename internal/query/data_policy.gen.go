// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newDataPolicy(db *gorm.DB, opts ...gen.DOOption) dataPolicy {
	_dataPolicy := dataPolicy{}

	_dataPolicy.dataPolicyDo.UseDB(db, opts...)
	_dataPolicy.dataPolicyDo.UseModel(&model.DataPolicy{})

	tableName := _dataPolicy.dataPolicyDo.TableName()
	_dataPolicy.ALL = field.NewAsterisk(tableName)
	_dataPolicy.ID = field.NewString(tableName, "id")
	_dataPolicy.DataType = field.NewString(tableName, "data_type")
	_dataPolicy.RetentionDay = field.NewInt32(tableName, "retention_days")
	_dataPolicy.LastCleanupTime = field.NewTime(tableName, "last_cleanup_time")
	_dataPolicy.LastCleanupDataTime = field.NewTime(tableName, "last_cleanup_data_time")
	_dataPolicy.Enabled = field.NewString(tableName, "enabled")
	_dataPolicy.Remark = field.NewString(tableName, "remark")

	_dataPolicy.fillFieldMap()

	return _dataPolicy
}

type dataPolicy struct {
	dataPolicyDo

	ALL                 field.Asterisk
	ID                  field.String // Id
	DataType            field.String // 清理类型:1-设备数据、2-操作日志
	RetentionDay        field.Int32  // 数据保留时间（天）
	LastCleanupTime     field.Time   // 上次清理时间
	LastCleanupDataTime field.Time   // 上次清理的数据时间节点（实际清理的数据时间点）
	Enabled             field.String // 是否启用：1启用 2停用
	Remark              field.String // 备注

	fieldMap map[string]field.Expr
}

func (d dataPolicy) Table(newTableName string) *dataPolicy {
	d.dataPolicyDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dataPolicy) As(alias string) *dataPolicy {
	d.dataPolicyDo.DO = *(d.dataPolicyDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dataPolicy) updateTableName(table string) *dataPolicy {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.DataType = field.NewString(table, "data_type")
	d.RetentionDay = field.NewInt32(table, "retention_days")
	d.LastCleanupTime = field.NewTime(table, "last_cleanup_time")
	d.LastCleanupDataTime = field.NewTime(table, "last_cleanup_data_time")
	d.Enabled = field.NewString(table, "enabled")
	d.Remark = field.NewString(table, "remark")

	d.fillFieldMap()

	return d
}

func (d *dataPolicy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dataPolicy) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 7)
	d.fieldMap["id"] = d.ID
	d.fieldMap["data_type"] = d.DataType
	d.fieldMap["retention_days"] = d.RetentionDay
	d.fieldMap["last_cleanup_time"] = d.LastCleanupTime
	d.fieldMap["last_cleanup_data_time"] = d.LastCleanupDataTime
	d.fieldMap["enabled"] = d.Enabled
	d.fieldMap["remark"] = d.Remark
}

func (d dataPolicy) clone(db *gorm.DB) dataPolicy {
	d.dataPolicyDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dataPolicy) replaceDB(db *gorm.DB) dataPolicy {
	d.dataPolicyDo.ReplaceDB(db)
	return d
}

type dataPolicyDo struct{ gen.DO }

type IDataPolicyDo interface {
	gen.SubQuery
	Debug() IDataPolicyDo
	WithContext(ctx context.Context) IDataPolicyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDataPolicyDo
	WriteDB() IDataPolicyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDataPolicyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDataPolicyDo
	Not(conds ...gen.Condition) IDataPolicyDo
	Or(conds ...gen.Condition) IDataPolicyDo
	Select(conds ...field.Expr) IDataPolicyDo
	Where(conds ...gen.Condition) IDataPolicyDo
	Order(conds ...field.Expr) IDataPolicyDo
	Distinct(cols ...field.Expr) IDataPolicyDo
	Omit(cols ...field.Expr) IDataPolicyDo
	Join(table schema.Tabler, on ...field.Expr) IDataPolicyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDataPolicyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDataPolicyDo
	Group(cols ...field.Expr) IDataPolicyDo
	Having(conds ...gen.Condition) IDataPolicyDo
	Limit(limit int) IDataPolicyDo
	Offset(offset int) IDataPolicyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDataPolicyDo
	Unscoped() IDataPolicyDo
	Create(values ...*model.DataPolicy) error
	CreateInBatches(values []*model.DataPolicy, batchSize int) error
	Save(values ...*model.DataPolicy) error
	First() (*model.DataPolicy, error)
	Take() (*model.DataPolicy, error)
	Last() (*model.DataPolicy, error)
	Find() ([]*model.DataPolicy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataPolicy, err error)
	FindInBatches(result *[]*model.DataPolicy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DataPolicy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDataPolicyDo
	Assign(attrs ...field.AssignExpr) IDataPolicyDo
	Joins(fields ...field.RelationField) IDataPolicyDo
	Preload(fields ...field.RelationField) IDataPolicyDo
	FirstOrInit() (*model.DataPolicy, error)
	FirstOrCreate() (*model.DataPolicy, error)
	FindByPage(offset int, limit int) (result []*model.DataPolicy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDataPolicyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dataPolicyDo) Debug() IDataPolicyDo {
	return d.withDO(d.DO.Debug())
}

func (d dataPolicyDo) WithContext(ctx context.Context) IDataPolicyDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dataPolicyDo) ReadDB() IDataPolicyDo {
	return d.Clauses(dbresolver.Read)
}

func (d dataPolicyDo) WriteDB() IDataPolicyDo {
	return d.Clauses(dbresolver.Write)
}

func (d dataPolicyDo) Session(config *gorm.Session) IDataPolicyDo {
	return d.withDO(d.DO.Session(config))
}

func (d dataPolicyDo) Clauses(conds ...clause.Expression) IDataPolicyDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dataPolicyDo) Returning(value interface{}, columns ...string) IDataPolicyDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dataPolicyDo) Not(conds ...gen.Condition) IDataPolicyDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dataPolicyDo) Or(conds ...gen.Condition) IDataPolicyDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dataPolicyDo) Select(conds ...field.Expr) IDataPolicyDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dataPolicyDo) Where(conds ...gen.Condition) IDataPolicyDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dataPolicyDo) Order(conds ...field.Expr) IDataPolicyDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dataPolicyDo) Distinct(cols ...field.Expr) IDataPolicyDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dataPolicyDo) Omit(cols ...field.Expr) IDataPolicyDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dataPolicyDo) Join(table schema.Tabler, on ...field.Expr) IDataPolicyDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dataPolicyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDataPolicyDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dataPolicyDo) RightJoin(table schema.Tabler, on ...field.Expr) IDataPolicyDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dataPolicyDo) Group(cols ...field.Expr) IDataPolicyDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dataPolicyDo) Having(conds ...gen.Condition) IDataPolicyDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dataPolicyDo) Limit(limit int) IDataPolicyDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dataPolicyDo) Offset(offset int) IDataPolicyDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dataPolicyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDataPolicyDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dataPolicyDo) Unscoped() IDataPolicyDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dataPolicyDo) Create(values ...*model.DataPolicy) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dataPolicyDo) CreateInBatches(values []*model.DataPolicy, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dataPolicyDo) Save(values ...*model.DataPolicy) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dataPolicyDo) First() (*model.DataPolicy, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataPolicy), nil
	}
}

func (d dataPolicyDo) Take() (*model.DataPolicy, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataPolicy), nil
	}
}

func (d dataPolicyDo) Last() (*model.DataPolicy, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataPolicy), nil
	}
}

func (d dataPolicyDo) Find() ([]*model.DataPolicy, error) {
	result, err := d.DO.Find()
	return result.([]*model.DataPolicy), err
}

func (d dataPolicyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataPolicy, err error) {
	buf := make([]*model.DataPolicy, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dataPolicyDo) FindInBatches(result *[]*model.DataPolicy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dataPolicyDo) Attrs(attrs ...field.AssignExpr) IDataPolicyDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dataPolicyDo) Assign(attrs ...field.AssignExpr) IDataPolicyDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dataPolicyDo) Joins(fields ...field.RelationField) IDataPolicyDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dataPolicyDo) Preload(fields ...field.RelationField) IDataPolicyDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dataPolicyDo) FirstOrInit() (*model.DataPolicy, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataPolicy), nil
	}
}

func (d dataPolicyDo) FirstOrCreate() (*model.DataPolicy, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataPolicy), nil
	}
}

func (d dataPolicyDo) FindByPage(offset int, limit int) (result []*model.DataPolicy, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dataPolicyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dataPolicyDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dataPolicyDo) Delete(models ...*model.DataPolicy) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dataPolicyDo) withDO(do gen.Dao) *dataPolicyDo {
	d.DO = *do.(*gen.DO)
	return d
}
