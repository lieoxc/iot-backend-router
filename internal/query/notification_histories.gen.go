// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newNotificationHistory(db *gorm.DB, opts ...gen.DOOption) notificationHistory {
	_notificationHistory := notificationHistory{}

	_notificationHistory.notificationHistoryDo.UseDB(db, opts...)
	_notificationHistory.notificationHistoryDo.UseModel(&model.NotificationHistory{})

	tableName := _notificationHistory.notificationHistoryDo.TableName()
	_notificationHistory.ALL = field.NewAsterisk(tableName)
	_notificationHistory.ID = field.NewString(tableName, "id")
	_notificationHistory.SendTime = field.NewTime(tableName, "send_time")
	_notificationHistory.SendContent = field.NewString(tableName, "send_content")
	_notificationHistory.SendTarget = field.NewString(tableName, "send_target")
	_notificationHistory.SendResult = field.NewString(tableName, "send_result")
	_notificationHistory.NotificationType = field.NewString(tableName, "notification_type")
	_notificationHistory.TenantID = field.NewString(tableName, "tenant_id")
	_notificationHistory.Remark = field.NewString(tableName, "remark")

	_notificationHistory.fillFieldMap()

	return _notificationHistory
}

type notificationHistory struct {
	notificationHistoryDo

	ALL              field.Asterisk
	ID               field.String
	SendTime         field.Time   // 发送时间
	SendContent      field.String // 发送内容
	SendTarget       field.String // 发送目标
	SendResult       field.String // 发送结果SUCCESS-成功FAILURE-失败
	NotificationType field.String // 通知类型MEMBER-成员通知 EMAIL-邮箱通知 SME-短信通知 VOICE-语音通知 WEBHOOK-webhook
	TenantID         field.String // 租户id
	Remark           field.String // 备注

	fieldMap map[string]field.Expr
}

func (n notificationHistory) Table(newTableName string) *notificationHistory {
	n.notificationHistoryDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n notificationHistory) As(alias string) *notificationHistory {
	n.notificationHistoryDo.DO = *(n.notificationHistoryDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *notificationHistory) updateTableName(table string) *notificationHistory {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewString(table, "id")
	n.SendTime = field.NewTime(table, "send_time")
	n.SendContent = field.NewString(table, "send_content")
	n.SendTarget = field.NewString(table, "send_target")
	n.SendResult = field.NewString(table, "send_result")
	n.NotificationType = field.NewString(table, "notification_type")
	n.TenantID = field.NewString(table, "tenant_id")
	n.Remark = field.NewString(table, "remark")

	n.fillFieldMap()

	return n
}

func (n *notificationHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *notificationHistory) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 8)
	n.fieldMap["id"] = n.ID
	n.fieldMap["send_time"] = n.SendTime
	n.fieldMap["send_content"] = n.SendContent
	n.fieldMap["send_target"] = n.SendTarget
	n.fieldMap["send_result"] = n.SendResult
	n.fieldMap["notification_type"] = n.NotificationType
	n.fieldMap["tenant_id"] = n.TenantID
	n.fieldMap["remark"] = n.Remark
}

func (n notificationHistory) clone(db *gorm.DB) notificationHistory {
	n.notificationHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n notificationHistory) replaceDB(db *gorm.DB) notificationHistory {
	n.notificationHistoryDo.ReplaceDB(db)
	return n
}

type notificationHistoryDo struct{ gen.DO }

type INotificationHistoryDo interface {
	gen.SubQuery
	Debug() INotificationHistoryDo
	WithContext(ctx context.Context) INotificationHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INotificationHistoryDo
	WriteDB() INotificationHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INotificationHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INotificationHistoryDo
	Not(conds ...gen.Condition) INotificationHistoryDo
	Or(conds ...gen.Condition) INotificationHistoryDo
	Select(conds ...field.Expr) INotificationHistoryDo
	Where(conds ...gen.Condition) INotificationHistoryDo
	Order(conds ...field.Expr) INotificationHistoryDo
	Distinct(cols ...field.Expr) INotificationHistoryDo
	Omit(cols ...field.Expr) INotificationHistoryDo
	Join(table schema.Tabler, on ...field.Expr) INotificationHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INotificationHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) INotificationHistoryDo
	Group(cols ...field.Expr) INotificationHistoryDo
	Having(conds ...gen.Condition) INotificationHistoryDo
	Limit(limit int) INotificationHistoryDo
	Offset(offset int) INotificationHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INotificationHistoryDo
	Unscoped() INotificationHistoryDo
	Create(values ...*model.NotificationHistory) error
	CreateInBatches(values []*model.NotificationHistory, batchSize int) error
	Save(values ...*model.NotificationHistory) error
	First() (*model.NotificationHistory, error)
	Take() (*model.NotificationHistory, error)
	Last() (*model.NotificationHistory, error)
	Find() ([]*model.NotificationHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NotificationHistory, err error)
	FindInBatches(result *[]*model.NotificationHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NotificationHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INotificationHistoryDo
	Assign(attrs ...field.AssignExpr) INotificationHistoryDo
	Joins(fields ...field.RelationField) INotificationHistoryDo
	Preload(fields ...field.RelationField) INotificationHistoryDo
	FirstOrInit() (*model.NotificationHistory, error)
	FirstOrCreate() (*model.NotificationHistory, error)
	FindByPage(offset int, limit int) (result []*model.NotificationHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INotificationHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n notificationHistoryDo) Debug() INotificationHistoryDo {
	return n.withDO(n.DO.Debug())
}

func (n notificationHistoryDo) WithContext(ctx context.Context) INotificationHistoryDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n notificationHistoryDo) ReadDB() INotificationHistoryDo {
	return n.Clauses(dbresolver.Read)
}

func (n notificationHistoryDo) WriteDB() INotificationHistoryDo {
	return n.Clauses(dbresolver.Write)
}

func (n notificationHistoryDo) Session(config *gorm.Session) INotificationHistoryDo {
	return n.withDO(n.DO.Session(config))
}

func (n notificationHistoryDo) Clauses(conds ...clause.Expression) INotificationHistoryDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n notificationHistoryDo) Returning(value interface{}, columns ...string) INotificationHistoryDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n notificationHistoryDo) Not(conds ...gen.Condition) INotificationHistoryDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n notificationHistoryDo) Or(conds ...gen.Condition) INotificationHistoryDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n notificationHistoryDo) Select(conds ...field.Expr) INotificationHistoryDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n notificationHistoryDo) Where(conds ...gen.Condition) INotificationHistoryDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n notificationHistoryDo) Order(conds ...field.Expr) INotificationHistoryDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n notificationHistoryDo) Distinct(cols ...field.Expr) INotificationHistoryDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n notificationHistoryDo) Omit(cols ...field.Expr) INotificationHistoryDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n notificationHistoryDo) Join(table schema.Tabler, on ...field.Expr) INotificationHistoryDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n notificationHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) INotificationHistoryDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n notificationHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) INotificationHistoryDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n notificationHistoryDo) Group(cols ...field.Expr) INotificationHistoryDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n notificationHistoryDo) Having(conds ...gen.Condition) INotificationHistoryDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n notificationHistoryDo) Limit(limit int) INotificationHistoryDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n notificationHistoryDo) Offset(offset int) INotificationHistoryDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n notificationHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INotificationHistoryDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n notificationHistoryDo) Unscoped() INotificationHistoryDo {
	return n.withDO(n.DO.Unscoped())
}

func (n notificationHistoryDo) Create(values ...*model.NotificationHistory) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n notificationHistoryDo) CreateInBatches(values []*model.NotificationHistory, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n notificationHistoryDo) Save(values ...*model.NotificationHistory) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n notificationHistoryDo) First() (*model.NotificationHistory, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationHistory), nil
	}
}

func (n notificationHistoryDo) Take() (*model.NotificationHistory, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationHistory), nil
	}
}

func (n notificationHistoryDo) Last() (*model.NotificationHistory, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationHistory), nil
	}
}

func (n notificationHistoryDo) Find() ([]*model.NotificationHistory, error) {
	result, err := n.DO.Find()
	return result.([]*model.NotificationHistory), err
}

func (n notificationHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NotificationHistory, err error) {
	buf := make([]*model.NotificationHistory, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n notificationHistoryDo) FindInBatches(result *[]*model.NotificationHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n notificationHistoryDo) Attrs(attrs ...field.AssignExpr) INotificationHistoryDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n notificationHistoryDo) Assign(attrs ...field.AssignExpr) INotificationHistoryDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n notificationHistoryDo) Joins(fields ...field.RelationField) INotificationHistoryDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n notificationHistoryDo) Preload(fields ...field.RelationField) INotificationHistoryDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n notificationHistoryDo) FirstOrInit() (*model.NotificationHistory, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationHistory), nil
	}
}

func (n notificationHistoryDo) FirstOrCreate() (*model.NotificationHistory, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationHistory), nil
	}
}

func (n notificationHistoryDo) FindByPage(offset int, limit int) (result []*model.NotificationHistory, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n notificationHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n notificationHistoryDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n notificationHistoryDo) Delete(models ...*model.NotificationHistory) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *notificationHistoryDo) withDO(do gen.Dao) *notificationHistoryDo {
	n.DO = *do.(*gen.DO)
	return n
}
