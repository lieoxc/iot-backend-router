// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newTelemetryCurrentData(db *gorm.DB, opts ...gen.DOOption) telemetryCurrentData {
	_telemetryCurrentData := telemetryCurrentData{}

	_telemetryCurrentData.telemetryCurrentDataDo.UseDB(db, opts...)
	_telemetryCurrentData.telemetryCurrentDataDo.UseModel(&model.TelemetryCurrentData{})

	tableName := _telemetryCurrentData.telemetryCurrentDataDo.TableName()
	_telemetryCurrentData.ALL = field.NewAsterisk(tableName)
	_telemetryCurrentData.DeviceID = field.NewString(tableName, "device_id")
	_telemetryCurrentData.Key = field.NewString(tableName, "key")
	_telemetryCurrentData.T = field.NewTime(tableName, "ts")
	_telemetryCurrentData.BoolV = field.NewBool(tableName, "bool_v")
	_telemetryCurrentData.NumberV = field.NewFloat64(tableName, "number_v")
	_telemetryCurrentData.StringV = field.NewString(tableName, "string_v")
	_telemetryCurrentData.TenantID = field.NewString(tableName, "tenant_id")

	_telemetryCurrentData.fillFieldMap()

	return _telemetryCurrentData
}

type telemetryCurrentData struct {
	telemetryCurrentDataDo

	ALL      field.Asterisk
	DeviceID field.String // 设备ID
	Key      field.String // 数据标识符
	T        field.Time   // 上报时间
	BoolV    field.Bool
	NumberV  field.Float64
	StringV  field.String
	TenantID field.String

	fieldMap map[string]field.Expr
}

func (t telemetryCurrentData) Table(newTableName string) *telemetryCurrentData {
	t.telemetryCurrentDataDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t telemetryCurrentData) As(alias string) *telemetryCurrentData {
	t.telemetryCurrentDataDo.DO = *(t.telemetryCurrentDataDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *telemetryCurrentData) updateTableName(table string) *telemetryCurrentData {
	t.ALL = field.NewAsterisk(table)
	t.DeviceID = field.NewString(table, "device_id")
	t.Key = field.NewString(table, "key")
	t.T = field.NewTime(table, "ts")
	t.BoolV = field.NewBool(table, "bool_v")
	t.NumberV = field.NewFloat64(table, "number_v")
	t.StringV = field.NewString(table, "string_v")
	t.TenantID = field.NewString(table, "tenant_id")

	t.fillFieldMap()

	return t
}

func (t *telemetryCurrentData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *telemetryCurrentData) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["device_id"] = t.DeviceID
	t.fieldMap["key"] = t.Key
	t.fieldMap["ts"] = t.T
	t.fieldMap["bool_v"] = t.BoolV
	t.fieldMap["number_v"] = t.NumberV
	t.fieldMap["string_v"] = t.StringV
	t.fieldMap["tenant_id"] = t.TenantID
}

func (t telemetryCurrentData) clone(db *gorm.DB) telemetryCurrentData {
	t.telemetryCurrentDataDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t telemetryCurrentData) replaceDB(db *gorm.DB) telemetryCurrentData {
	t.telemetryCurrentDataDo.ReplaceDB(db)
	return t
}

type telemetryCurrentDataDo struct{ gen.DO }

type ITelemetryCurrentDataDo interface {
	gen.SubQuery
	Debug() ITelemetryCurrentDataDo
	WithContext(ctx context.Context) ITelemetryCurrentDataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITelemetryCurrentDataDo
	WriteDB() ITelemetryCurrentDataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITelemetryCurrentDataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITelemetryCurrentDataDo
	Not(conds ...gen.Condition) ITelemetryCurrentDataDo
	Or(conds ...gen.Condition) ITelemetryCurrentDataDo
	Select(conds ...field.Expr) ITelemetryCurrentDataDo
	Where(conds ...gen.Condition) ITelemetryCurrentDataDo
	Order(conds ...field.Expr) ITelemetryCurrentDataDo
	Distinct(cols ...field.Expr) ITelemetryCurrentDataDo
	Omit(cols ...field.Expr) ITelemetryCurrentDataDo
	Join(table schema.Tabler, on ...field.Expr) ITelemetryCurrentDataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITelemetryCurrentDataDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITelemetryCurrentDataDo
	Group(cols ...field.Expr) ITelemetryCurrentDataDo
	Having(conds ...gen.Condition) ITelemetryCurrentDataDo
	Limit(limit int) ITelemetryCurrentDataDo
	Offset(offset int) ITelemetryCurrentDataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITelemetryCurrentDataDo
	Unscoped() ITelemetryCurrentDataDo
	Create(values ...*model.TelemetryCurrentData) error
	CreateInBatches(values []*model.TelemetryCurrentData, batchSize int) error
	Save(values ...*model.TelemetryCurrentData) error
	First() (*model.TelemetryCurrentData, error)
	Take() (*model.TelemetryCurrentData, error)
	Last() (*model.TelemetryCurrentData, error)
	Find() ([]*model.TelemetryCurrentData, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TelemetryCurrentData, err error)
	FindInBatches(result *[]*model.TelemetryCurrentData, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TelemetryCurrentData) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITelemetryCurrentDataDo
	Assign(attrs ...field.AssignExpr) ITelemetryCurrentDataDo
	Joins(fields ...field.RelationField) ITelemetryCurrentDataDo
	Preload(fields ...field.RelationField) ITelemetryCurrentDataDo
	FirstOrInit() (*model.TelemetryCurrentData, error)
	FirstOrCreate() (*model.TelemetryCurrentData, error)
	FindByPage(offset int, limit int) (result []*model.TelemetryCurrentData, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITelemetryCurrentDataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t telemetryCurrentDataDo) Debug() ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Debug())
}

func (t telemetryCurrentDataDo) WithContext(ctx context.Context) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t telemetryCurrentDataDo) ReadDB() ITelemetryCurrentDataDo {
	return t.Clauses(dbresolver.Read)
}

func (t telemetryCurrentDataDo) WriteDB() ITelemetryCurrentDataDo {
	return t.Clauses(dbresolver.Write)
}

func (t telemetryCurrentDataDo) Session(config *gorm.Session) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Session(config))
}

func (t telemetryCurrentDataDo) Clauses(conds ...clause.Expression) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t telemetryCurrentDataDo) Returning(value interface{}, columns ...string) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t telemetryCurrentDataDo) Not(conds ...gen.Condition) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t telemetryCurrentDataDo) Or(conds ...gen.Condition) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t telemetryCurrentDataDo) Select(conds ...field.Expr) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t telemetryCurrentDataDo) Where(conds ...gen.Condition) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t telemetryCurrentDataDo) Order(conds ...field.Expr) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t telemetryCurrentDataDo) Distinct(cols ...field.Expr) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t telemetryCurrentDataDo) Omit(cols ...field.Expr) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t telemetryCurrentDataDo) Join(table schema.Tabler, on ...field.Expr) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t telemetryCurrentDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t telemetryCurrentDataDo) RightJoin(table schema.Tabler, on ...field.Expr) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t telemetryCurrentDataDo) Group(cols ...field.Expr) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t telemetryCurrentDataDo) Having(conds ...gen.Condition) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t telemetryCurrentDataDo) Limit(limit int) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t telemetryCurrentDataDo) Offset(offset int) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t telemetryCurrentDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t telemetryCurrentDataDo) Unscoped() ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Unscoped())
}

func (t telemetryCurrentDataDo) Create(values ...*model.TelemetryCurrentData) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t telemetryCurrentDataDo) CreateInBatches(values []*model.TelemetryCurrentData, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t telemetryCurrentDataDo) Save(values ...*model.TelemetryCurrentData) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t telemetryCurrentDataDo) First() (*model.TelemetryCurrentData, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelemetryCurrentData), nil
	}
}

func (t telemetryCurrentDataDo) Take() (*model.TelemetryCurrentData, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelemetryCurrentData), nil
	}
}

func (t telemetryCurrentDataDo) Last() (*model.TelemetryCurrentData, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelemetryCurrentData), nil
	}
}

func (t telemetryCurrentDataDo) Find() ([]*model.TelemetryCurrentData, error) {
	result, err := t.DO.Find()
	return result.([]*model.TelemetryCurrentData), err
}

func (t telemetryCurrentDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TelemetryCurrentData, err error) {
	buf := make([]*model.TelemetryCurrentData, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t telemetryCurrentDataDo) FindInBatches(result *[]*model.TelemetryCurrentData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t telemetryCurrentDataDo) Attrs(attrs ...field.AssignExpr) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t telemetryCurrentDataDo) Assign(attrs ...field.AssignExpr) ITelemetryCurrentDataDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t telemetryCurrentDataDo) Joins(fields ...field.RelationField) ITelemetryCurrentDataDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t telemetryCurrentDataDo) Preload(fields ...field.RelationField) ITelemetryCurrentDataDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t telemetryCurrentDataDo) FirstOrInit() (*model.TelemetryCurrentData, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelemetryCurrentData), nil
	}
}

func (t telemetryCurrentDataDo) FirstOrCreate() (*model.TelemetryCurrentData, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelemetryCurrentData), nil
	}
}

func (t telemetryCurrentDataDo) FindByPage(offset int, limit int) (result []*model.TelemetryCurrentData, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t telemetryCurrentDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t telemetryCurrentDataDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t telemetryCurrentDataDo) Delete(models ...*model.TelemetryCurrentData) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *telemetryCurrentDataDo) withDO(do gen.Dao) *telemetryCurrentDataDo {
	t.DO = *do.(*gen.DO)
	return t
}
