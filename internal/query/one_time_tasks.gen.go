// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newOneTimeTask(db *gorm.DB, opts ...gen.DOOption) oneTimeTask {
	_oneTimeTask := oneTimeTask{}

	_oneTimeTask.oneTimeTaskDo.UseDB(db, opts...)
	_oneTimeTask.oneTimeTaskDo.UseModel(&model.OneTimeTask{})

	tableName := _oneTimeTask.oneTimeTaskDo.TableName()
	_oneTimeTask.ALL = field.NewAsterisk(tableName)
	_oneTimeTask.ID = field.NewString(tableName, "id")
	_oneTimeTask.SceneAutomationID = field.NewString(tableName, "scene_automation_id")
	_oneTimeTask.ExecutionTime = field.NewTime(tableName, "execution_time")
	_oneTimeTask.ExecutingState = field.NewString(tableName, "executing_state")
	_oneTimeTask.Enabled = field.NewString(tableName, "enabled")
	_oneTimeTask.Remark = field.NewString(tableName, "remark")
	_oneTimeTask.ExpirationTime = field.NewInt64(tableName, "expiration_time")

	_oneTimeTask.fillFieldMap()

	return _oneTimeTask
}

type oneTimeTask struct {
	oneTimeTaskDo

	ALL               field.Asterisk
	ID                field.String
	SceneAutomationID field.String // 场景联动ID（外键-关联删除）
	ExecutionTime     field.Time   // 执行时间
	ExecutingState    field.String // 1.执行状态 NEX-未执行 EXE-已执行 EXP-过期未执行
	Enabled           field.String // 是否启用 Y-启用 N-停用
	Remark            field.String
	ExpirationTime    field.Int64 // 过期时间（默认大于执行时间五分钟5min10min30min1h1day）单位分钟

	fieldMap map[string]field.Expr
}

func (o oneTimeTask) Table(newTableName string) *oneTimeTask {
	o.oneTimeTaskDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oneTimeTask) As(alias string) *oneTimeTask {
	o.oneTimeTaskDo.DO = *(o.oneTimeTaskDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oneTimeTask) updateTableName(table string) *oneTimeTask {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewString(table, "id")
	o.SceneAutomationID = field.NewString(table, "scene_automation_id")
	o.ExecutionTime = field.NewTime(table, "execution_time")
	o.ExecutingState = field.NewString(table, "executing_state")
	o.Enabled = field.NewString(table, "enabled")
	o.Remark = field.NewString(table, "remark")
	o.ExpirationTime = field.NewInt64(table, "expiration_time")

	o.fillFieldMap()

	return o
}

func (o *oneTimeTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oneTimeTask) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 7)
	o.fieldMap["id"] = o.ID
	o.fieldMap["scene_automation_id"] = o.SceneAutomationID
	o.fieldMap["execution_time"] = o.ExecutionTime
	o.fieldMap["executing_state"] = o.ExecutingState
	o.fieldMap["enabled"] = o.Enabled
	o.fieldMap["remark"] = o.Remark
	o.fieldMap["expiration_time"] = o.ExpirationTime
}

func (o oneTimeTask) clone(db *gorm.DB) oneTimeTask {
	o.oneTimeTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oneTimeTask) replaceDB(db *gorm.DB) oneTimeTask {
	o.oneTimeTaskDo.ReplaceDB(db)
	return o
}

type oneTimeTaskDo struct{ gen.DO }

type IOneTimeTaskDo interface {
	gen.SubQuery
	Debug() IOneTimeTaskDo
	WithContext(ctx context.Context) IOneTimeTaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOneTimeTaskDo
	WriteDB() IOneTimeTaskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOneTimeTaskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOneTimeTaskDo
	Not(conds ...gen.Condition) IOneTimeTaskDo
	Or(conds ...gen.Condition) IOneTimeTaskDo
	Select(conds ...field.Expr) IOneTimeTaskDo
	Where(conds ...gen.Condition) IOneTimeTaskDo
	Order(conds ...field.Expr) IOneTimeTaskDo
	Distinct(cols ...field.Expr) IOneTimeTaskDo
	Omit(cols ...field.Expr) IOneTimeTaskDo
	Join(table schema.Tabler, on ...field.Expr) IOneTimeTaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOneTimeTaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOneTimeTaskDo
	Group(cols ...field.Expr) IOneTimeTaskDo
	Having(conds ...gen.Condition) IOneTimeTaskDo
	Limit(limit int) IOneTimeTaskDo
	Offset(offset int) IOneTimeTaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOneTimeTaskDo
	Unscoped() IOneTimeTaskDo
	Create(values ...*model.OneTimeTask) error
	CreateInBatches(values []*model.OneTimeTask, batchSize int) error
	Save(values ...*model.OneTimeTask) error
	First() (*model.OneTimeTask, error)
	Take() (*model.OneTimeTask, error)
	Last() (*model.OneTimeTask, error)
	Find() ([]*model.OneTimeTask, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OneTimeTask, err error)
	FindInBatches(result *[]*model.OneTimeTask, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OneTimeTask) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOneTimeTaskDo
	Assign(attrs ...field.AssignExpr) IOneTimeTaskDo
	Joins(fields ...field.RelationField) IOneTimeTaskDo
	Preload(fields ...field.RelationField) IOneTimeTaskDo
	FirstOrInit() (*model.OneTimeTask, error)
	FirstOrCreate() (*model.OneTimeTask, error)
	FindByPage(offset int, limit int) (result []*model.OneTimeTask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOneTimeTaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o oneTimeTaskDo) Debug() IOneTimeTaskDo {
	return o.withDO(o.DO.Debug())
}

func (o oneTimeTaskDo) WithContext(ctx context.Context) IOneTimeTaskDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oneTimeTaskDo) ReadDB() IOneTimeTaskDo {
	return o.Clauses(dbresolver.Read)
}

func (o oneTimeTaskDo) WriteDB() IOneTimeTaskDo {
	return o.Clauses(dbresolver.Write)
}

func (o oneTimeTaskDo) Session(config *gorm.Session) IOneTimeTaskDo {
	return o.withDO(o.DO.Session(config))
}

func (o oneTimeTaskDo) Clauses(conds ...clause.Expression) IOneTimeTaskDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oneTimeTaskDo) Returning(value interface{}, columns ...string) IOneTimeTaskDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oneTimeTaskDo) Not(conds ...gen.Condition) IOneTimeTaskDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oneTimeTaskDo) Or(conds ...gen.Condition) IOneTimeTaskDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oneTimeTaskDo) Select(conds ...field.Expr) IOneTimeTaskDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oneTimeTaskDo) Where(conds ...gen.Condition) IOneTimeTaskDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oneTimeTaskDo) Order(conds ...field.Expr) IOneTimeTaskDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oneTimeTaskDo) Distinct(cols ...field.Expr) IOneTimeTaskDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oneTimeTaskDo) Omit(cols ...field.Expr) IOneTimeTaskDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oneTimeTaskDo) Join(table schema.Tabler, on ...field.Expr) IOneTimeTaskDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oneTimeTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOneTimeTaskDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oneTimeTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) IOneTimeTaskDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oneTimeTaskDo) Group(cols ...field.Expr) IOneTimeTaskDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oneTimeTaskDo) Having(conds ...gen.Condition) IOneTimeTaskDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oneTimeTaskDo) Limit(limit int) IOneTimeTaskDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oneTimeTaskDo) Offset(offset int) IOneTimeTaskDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oneTimeTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOneTimeTaskDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oneTimeTaskDo) Unscoped() IOneTimeTaskDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oneTimeTaskDo) Create(values ...*model.OneTimeTask) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oneTimeTaskDo) CreateInBatches(values []*model.OneTimeTask, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oneTimeTaskDo) Save(values ...*model.OneTimeTask) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oneTimeTaskDo) First() (*model.OneTimeTask, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OneTimeTask), nil
	}
}

func (o oneTimeTaskDo) Take() (*model.OneTimeTask, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OneTimeTask), nil
	}
}

func (o oneTimeTaskDo) Last() (*model.OneTimeTask, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OneTimeTask), nil
	}
}

func (o oneTimeTaskDo) Find() ([]*model.OneTimeTask, error) {
	result, err := o.DO.Find()
	return result.([]*model.OneTimeTask), err
}

func (o oneTimeTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OneTimeTask, err error) {
	buf := make([]*model.OneTimeTask, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oneTimeTaskDo) FindInBatches(result *[]*model.OneTimeTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oneTimeTaskDo) Attrs(attrs ...field.AssignExpr) IOneTimeTaskDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oneTimeTaskDo) Assign(attrs ...field.AssignExpr) IOneTimeTaskDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oneTimeTaskDo) Joins(fields ...field.RelationField) IOneTimeTaskDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oneTimeTaskDo) Preload(fields ...field.RelationField) IOneTimeTaskDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oneTimeTaskDo) FirstOrInit() (*model.OneTimeTask, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OneTimeTask), nil
	}
}

func (o oneTimeTaskDo) FirstOrCreate() (*model.OneTimeTask, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OneTimeTask), nil
	}
}

func (o oneTimeTaskDo) FindByPage(offset int, limit int) (result []*model.OneTimeTask, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oneTimeTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oneTimeTaskDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oneTimeTaskDo) Delete(models ...*model.OneTimeTask) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oneTimeTaskDo) withDO(do gen.Dao) *oneTimeTaskDo {
	o.DO = *do.(*gen.DO)
	return o
}
