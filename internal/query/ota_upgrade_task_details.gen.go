// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newOtaUpgradeTaskDetail(db *gorm.DB, opts ...gen.DOOption) otaUpgradeTaskDetail {
	_otaUpgradeTaskDetail := otaUpgradeTaskDetail{}

	_otaUpgradeTaskDetail.otaUpgradeTaskDetailDo.UseDB(db, opts...)
	_otaUpgradeTaskDetail.otaUpgradeTaskDetailDo.UseModel(&model.OtaUpgradeTaskDetail{})

	tableName := _otaUpgradeTaskDetail.otaUpgradeTaskDetailDo.TableName()
	_otaUpgradeTaskDetail.ALL = field.NewAsterisk(tableName)
	_otaUpgradeTaskDetail.ID = field.NewString(tableName, "id")
	_otaUpgradeTaskDetail.OtaUpgradeTaskID = field.NewString(tableName, "ota_upgrade_task_id")
	_otaUpgradeTaskDetail.DeviceID = field.NewString(tableName, "device_id")
	_otaUpgradeTaskDetail.Step = field.NewInt16(tableName, "steps")
	_otaUpgradeTaskDetail.Status = field.NewInt16(tableName, "status")
	_otaUpgradeTaskDetail.StatusDescription = field.NewString(tableName, "status_description")
	_otaUpgradeTaskDetail.UpdatedAt = field.NewTime(tableName, "updated_at")
	_otaUpgradeTaskDetail.Remark = field.NewString(tableName, "remark")

	_otaUpgradeTaskDetail.fillFieldMap()

	return _otaUpgradeTaskDetail
}

type otaUpgradeTaskDetail struct {
	otaUpgradeTaskDetailDo

	ALL               field.Asterisk
	ID                field.String // Id
	OtaUpgradeTaskID  field.String // 升级任务id（外键关联删除）
	DeviceID          field.String // 设备id（外键阻止删除）
	Step              field.Int16  // 升级进度1-100
	Status            field.Int16  // 状态1-待推送2-已推送3-升级中4-升级成功-5-升级失败-6已取消
	StatusDescription field.String // 状态描述
	UpdatedAt         field.Time
	Remark            field.String

	fieldMap map[string]field.Expr
}

func (o otaUpgradeTaskDetail) Table(newTableName string) *otaUpgradeTaskDetail {
	o.otaUpgradeTaskDetailDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o otaUpgradeTaskDetail) As(alias string) *otaUpgradeTaskDetail {
	o.otaUpgradeTaskDetailDo.DO = *(o.otaUpgradeTaskDetailDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *otaUpgradeTaskDetail) updateTableName(table string) *otaUpgradeTaskDetail {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewString(table, "id")
	o.OtaUpgradeTaskID = field.NewString(table, "ota_upgrade_task_id")
	o.DeviceID = field.NewString(table, "device_id")
	o.Step = field.NewInt16(table, "steps")
	o.Status = field.NewInt16(table, "status")
	o.StatusDescription = field.NewString(table, "status_description")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.Remark = field.NewString(table, "remark")

	o.fillFieldMap()

	return o
}

func (o *otaUpgradeTaskDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *otaUpgradeTaskDetail) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 8)
	o.fieldMap["id"] = o.ID
	o.fieldMap["ota_upgrade_task_id"] = o.OtaUpgradeTaskID
	o.fieldMap["device_id"] = o.DeviceID
	o.fieldMap["steps"] = o.Step
	o.fieldMap["status"] = o.Status
	o.fieldMap["status_description"] = o.StatusDescription
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["remark"] = o.Remark
}

func (o otaUpgradeTaskDetail) clone(db *gorm.DB) otaUpgradeTaskDetail {
	o.otaUpgradeTaskDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o otaUpgradeTaskDetail) replaceDB(db *gorm.DB) otaUpgradeTaskDetail {
	o.otaUpgradeTaskDetailDo.ReplaceDB(db)
	return o
}

type otaUpgradeTaskDetailDo struct{ gen.DO }

type IOtaUpgradeTaskDetailDo interface {
	gen.SubQuery
	Debug() IOtaUpgradeTaskDetailDo
	WithContext(ctx context.Context) IOtaUpgradeTaskDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOtaUpgradeTaskDetailDo
	WriteDB() IOtaUpgradeTaskDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOtaUpgradeTaskDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOtaUpgradeTaskDetailDo
	Not(conds ...gen.Condition) IOtaUpgradeTaskDetailDo
	Or(conds ...gen.Condition) IOtaUpgradeTaskDetailDo
	Select(conds ...field.Expr) IOtaUpgradeTaskDetailDo
	Where(conds ...gen.Condition) IOtaUpgradeTaskDetailDo
	Order(conds ...field.Expr) IOtaUpgradeTaskDetailDo
	Distinct(cols ...field.Expr) IOtaUpgradeTaskDetailDo
	Omit(cols ...field.Expr) IOtaUpgradeTaskDetailDo
	Join(table schema.Tabler, on ...field.Expr) IOtaUpgradeTaskDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOtaUpgradeTaskDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOtaUpgradeTaskDetailDo
	Group(cols ...field.Expr) IOtaUpgradeTaskDetailDo
	Having(conds ...gen.Condition) IOtaUpgradeTaskDetailDo
	Limit(limit int) IOtaUpgradeTaskDetailDo
	Offset(offset int) IOtaUpgradeTaskDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOtaUpgradeTaskDetailDo
	Unscoped() IOtaUpgradeTaskDetailDo
	Create(values ...*model.OtaUpgradeTaskDetail) error
	CreateInBatches(values []*model.OtaUpgradeTaskDetail, batchSize int) error
	Save(values ...*model.OtaUpgradeTaskDetail) error
	First() (*model.OtaUpgradeTaskDetail, error)
	Take() (*model.OtaUpgradeTaskDetail, error)
	Last() (*model.OtaUpgradeTaskDetail, error)
	Find() ([]*model.OtaUpgradeTaskDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OtaUpgradeTaskDetail, err error)
	FindInBatches(result *[]*model.OtaUpgradeTaskDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OtaUpgradeTaskDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOtaUpgradeTaskDetailDo
	Assign(attrs ...field.AssignExpr) IOtaUpgradeTaskDetailDo
	Joins(fields ...field.RelationField) IOtaUpgradeTaskDetailDo
	Preload(fields ...field.RelationField) IOtaUpgradeTaskDetailDo
	FirstOrInit() (*model.OtaUpgradeTaskDetail, error)
	FirstOrCreate() (*model.OtaUpgradeTaskDetail, error)
	FindByPage(offset int, limit int) (result []*model.OtaUpgradeTaskDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOtaUpgradeTaskDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o otaUpgradeTaskDetailDo) Debug() IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Debug())
}

func (o otaUpgradeTaskDetailDo) WithContext(ctx context.Context) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o otaUpgradeTaskDetailDo) ReadDB() IOtaUpgradeTaskDetailDo {
	return o.Clauses(dbresolver.Read)
}

func (o otaUpgradeTaskDetailDo) WriteDB() IOtaUpgradeTaskDetailDo {
	return o.Clauses(dbresolver.Write)
}

func (o otaUpgradeTaskDetailDo) Session(config *gorm.Session) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Session(config))
}

func (o otaUpgradeTaskDetailDo) Clauses(conds ...clause.Expression) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o otaUpgradeTaskDetailDo) Returning(value interface{}, columns ...string) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o otaUpgradeTaskDetailDo) Not(conds ...gen.Condition) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o otaUpgradeTaskDetailDo) Or(conds ...gen.Condition) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o otaUpgradeTaskDetailDo) Select(conds ...field.Expr) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o otaUpgradeTaskDetailDo) Where(conds ...gen.Condition) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o otaUpgradeTaskDetailDo) Order(conds ...field.Expr) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o otaUpgradeTaskDetailDo) Distinct(cols ...field.Expr) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o otaUpgradeTaskDetailDo) Omit(cols ...field.Expr) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o otaUpgradeTaskDetailDo) Join(table schema.Tabler, on ...field.Expr) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o otaUpgradeTaskDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o otaUpgradeTaskDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o otaUpgradeTaskDetailDo) Group(cols ...field.Expr) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o otaUpgradeTaskDetailDo) Having(conds ...gen.Condition) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o otaUpgradeTaskDetailDo) Limit(limit int) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o otaUpgradeTaskDetailDo) Offset(offset int) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o otaUpgradeTaskDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o otaUpgradeTaskDetailDo) Unscoped() IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Unscoped())
}

func (o otaUpgradeTaskDetailDo) Create(values ...*model.OtaUpgradeTaskDetail) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o otaUpgradeTaskDetailDo) CreateInBatches(values []*model.OtaUpgradeTaskDetail, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o otaUpgradeTaskDetailDo) Save(values ...*model.OtaUpgradeTaskDetail) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o otaUpgradeTaskDetailDo) First() (*model.OtaUpgradeTaskDetail, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OtaUpgradeTaskDetail), nil
	}
}

func (o otaUpgradeTaskDetailDo) Take() (*model.OtaUpgradeTaskDetail, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OtaUpgradeTaskDetail), nil
	}
}

func (o otaUpgradeTaskDetailDo) Last() (*model.OtaUpgradeTaskDetail, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OtaUpgradeTaskDetail), nil
	}
}

func (o otaUpgradeTaskDetailDo) Find() ([]*model.OtaUpgradeTaskDetail, error) {
	result, err := o.DO.Find()
	return result.([]*model.OtaUpgradeTaskDetail), err
}

func (o otaUpgradeTaskDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OtaUpgradeTaskDetail, err error) {
	buf := make([]*model.OtaUpgradeTaskDetail, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o otaUpgradeTaskDetailDo) FindInBatches(result *[]*model.OtaUpgradeTaskDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o otaUpgradeTaskDetailDo) Attrs(attrs ...field.AssignExpr) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o otaUpgradeTaskDetailDo) Assign(attrs ...field.AssignExpr) IOtaUpgradeTaskDetailDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o otaUpgradeTaskDetailDo) Joins(fields ...field.RelationField) IOtaUpgradeTaskDetailDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o otaUpgradeTaskDetailDo) Preload(fields ...field.RelationField) IOtaUpgradeTaskDetailDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o otaUpgradeTaskDetailDo) FirstOrInit() (*model.OtaUpgradeTaskDetail, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OtaUpgradeTaskDetail), nil
	}
}

func (o otaUpgradeTaskDetailDo) FirstOrCreate() (*model.OtaUpgradeTaskDetail, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OtaUpgradeTaskDetail), nil
	}
}

func (o otaUpgradeTaskDetailDo) FindByPage(offset int, limit int) (result []*model.OtaUpgradeTaskDetail, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o otaUpgradeTaskDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o otaUpgradeTaskDetailDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o otaUpgradeTaskDetailDo) Delete(models ...*model.OtaUpgradeTaskDetail) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *otaUpgradeTaskDetailDo) withDO(do gen.Dao) *otaUpgradeTaskDetailDo {
	o.DO = *do.(*gen.DO)
	return o
}
