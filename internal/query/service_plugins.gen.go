// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newServicePlugin(db *gorm.DB, opts ...gen.DOOption) servicePlugin {
	_servicePlugin := servicePlugin{}

	_servicePlugin.servicePluginDo.UseDB(db, opts...)
	_servicePlugin.servicePluginDo.UseModel(&model.ServicePlugin{})

	tableName := _servicePlugin.servicePluginDo.TableName()
	_servicePlugin.ALL = field.NewAsterisk(tableName)
	_servicePlugin.ID = field.NewString(tableName, "id")
	_servicePlugin.Name = field.NewString(tableName, "name")
	_servicePlugin.ServiceIdentifier = field.NewString(tableName, "service_identifier")
	_servicePlugin.ServiceType = field.NewInt32(tableName, "service_type")
	_servicePlugin.LastActiveTime = field.NewTime(tableName, "last_active_time")
	_servicePlugin.Version = field.NewString(tableName, "version")
	_servicePlugin.CreateAt = field.NewTime(tableName, "create_at")
	_servicePlugin.UpdateAt = field.NewTime(tableName, "update_at")
	_servicePlugin.Description = field.NewString(tableName, "description")
	_servicePlugin.ServiceConfig = field.NewString(tableName, "service_config")
	_servicePlugin.Remark = field.NewString(tableName, "remark")

	_servicePlugin.fillFieldMap()

	return _servicePlugin
}

type servicePlugin struct {
	servicePluginDo

	ALL               field.Asterisk
	ID                field.String // 服务ID
	Name              field.String // 服务名称
	ServiceIdentifier field.String // 服务标识符
	ServiceType       field.Int32  // 服务类型: 1-接入协议, 2-接入服务
	LastActiveTime    field.Time   // 服务最后活跃时间
	Version           field.String // 版本号
	CreateAt          field.Time   // 创建时间
	UpdateAt          field.Time   // 更新时间
	Description       field.String // 描述
	ServiceConfig     field.String // 服务配置: 接入协议和接入服务的配置
	Remark            field.String // 备注

	fieldMap map[string]field.Expr
}

func (s servicePlugin) Table(newTableName string) *servicePlugin {
	s.servicePluginDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s servicePlugin) As(alias string) *servicePlugin {
	s.servicePluginDo.DO = *(s.servicePluginDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *servicePlugin) updateTableName(table string) *servicePlugin {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Name = field.NewString(table, "name")
	s.ServiceIdentifier = field.NewString(table, "service_identifier")
	s.ServiceType = field.NewInt32(table, "service_type")
	s.LastActiveTime = field.NewTime(table, "last_active_time")
	s.Version = field.NewString(table, "version")
	s.CreateAt = field.NewTime(table, "create_at")
	s.UpdateAt = field.NewTime(table, "update_at")
	s.Description = field.NewString(table, "description")
	s.ServiceConfig = field.NewString(table, "service_config")
	s.Remark = field.NewString(table, "remark")

	s.fillFieldMap()

	return s
}

func (s *servicePlugin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *servicePlugin) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["service_identifier"] = s.ServiceIdentifier
	s.fieldMap["service_type"] = s.ServiceType
	s.fieldMap["last_active_time"] = s.LastActiveTime
	s.fieldMap["version"] = s.Version
	s.fieldMap["create_at"] = s.CreateAt
	s.fieldMap["update_at"] = s.UpdateAt
	s.fieldMap["description"] = s.Description
	s.fieldMap["service_config"] = s.ServiceConfig
	s.fieldMap["remark"] = s.Remark
}

func (s servicePlugin) clone(db *gorm.DB) servicePlugin {
	s.servicePluginDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s servicePlugin) replaceDB(db *gorm.DB) servicePlugin {
	s.servicePluginDo.ReplaceDB(db)
	return s
}

type servicePluginDo struct{ gen.DO }

type IServicePluginDo interface {
	gen.SubQuery
	Debug() IServicePluginDo
	WithContext(ctx context.Context) IServicePluginDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServicePluginDo
	WriteDB() IServicePluginDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServicePluginDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServicePluginDo
	Not(conds ...gen.Condition) IServicePluginDo
	Or(conds ...gen.Condition) IServicePluginDo
	Select(conds ...field.Expr) IServicePluginDo
	Where(conds ...gen.Condition) IServicePluginDo
	Order(conds ...field.Expr) IServicePluginDo
	Distinct(cols ...field.Expr) IServicePluginDo
	Omit(cols ...field.Expr) IServicePluginDo
	Join(table schema.Tabler, on ...field.Expr) IServicePluginDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServicePluginDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServicePluginDo
	Group(cols ...field.Expr) IServicePluginDo
	Having(conds ...gen.Condition) IServicePluginDo
	Limit(limit int) IServicePluginDo
	Offset(offset int) IServicePluginDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServicePluginDo
	Unscoped() IServicePluginDo
	Create(values ...*model.ServicePlugin) error
	CreateInBatches(values []*model.ServicePlugin, batchSize int) error
	Save(values ...*model.ServicePlugin) error
	First() (*model.ServicePlugin, error)
	Take() (*model.ServicePlugin, error)
	Last() (*model.ServicePlugin, error)
	Find() ([]*model.ServicePlugin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServicePlugin, err error)
	FindInBatches(result *[]*model.ServicePlugin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServicePlugin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServicePluginDo
	Assign(attrs ...field.AssignExpr) IServicePluginDo
	Joins(fields ...field.RelationField) IServicePluginDo
	Preload(fields ...field.RelationField) IServicePluginDo
	FirstOrInit() (*model.ServicePlugin, error)
	FirstOrCreate() (*model.ServicePlugin, error)
	FindByPage(offset int, limit int) (result []*model.ServicePlugin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServicePluginDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s servicePluginDo) Debug() IServicePluginDo {
	return s.withDO(s.DO.Debug())
}

func (s servicePluginDo) WithContext(ctx context.Context) IServicePluginDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s servicePluginDo) ReadDB() IServicePluginDo {
	return s.Clauses(dbresolver.Read)
}

func (s servicePluginDo) WriteDB() IServicePluginDo {
	return s.Clauses(dbresolver.Write)
}

func (s servicePluginDo) Session(config *gorm.Session) IServicePluginDo {
	return s.withDO(s.DO.Session(config))
}

func (s servicePluginDo) Clauses(conds ...clause.Expression) IServicePluginDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s servicePluginDo) Returning(value interface{}, columns ...string) IServicePluginDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s servicePluginDo) Not(conds ...gen.Condition) IServicePluginDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s servicePluginDo) Or(conds ...gen.Condition) IServicePluginDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s servicePluginDo) Select(conds ...field.Expr) IServicePluginDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s servicePluginDo) Where(conds ...gen.Condition) IServicePluginDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s servicePluginDo) Order(conds ...field.Expr) IServicePluginDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s servicePluginDo) Distinct(cols ...field.Expr) IServicePluginDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s servicePluginDo) Omit(cols ...field.Expr) IServicePluginDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s servicePluginDo) Join(table schema.Tabler, on ...field.Expr) IServicePluginDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s servicePluginDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServicePluginDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s servicePluginDo) RightJoin(table schema.Tabler, on ...field.Expr) IServicePluginDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s servicePluginDo) Group(cols ...field.Expr) IServicePluginDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s servicePluginDo) Having(conds ...gen.Condition) IServicePluginDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s servicePluginDo) Limit(limit int) IServicePluginDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s servicePluginDo) Offset(offset int) IServicePluginDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s servicePluginDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServicePluginDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s servicePluginDo) Unscoped() IServicePluginDo {
	return s.withDO(s.DO.Unscoped())
}

func (s servicePluginDo) Create(values ...*model.ServicePlugin) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s servicePluginDo) CreateInBatches(values []*model.ServicePlugin, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s servicePluginDo) Save(values ...*model.ServicePlugin) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s servicePluginDo) First() (*model.ServicePlugin, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServicePlugin), nil
	}
}

func (s servicePluginDo) Take() (*model.ServicePlugin, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServicePlugin), nil
	}
}

func (s servicePluginDo) Last() (*model.ServicePlugin, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServicePlugin), nil
	}
}

func (s servicePluginDo) Find() ([]*model.ServicePlugin, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServicePlugin), err
}

func (s servicePluginDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServicePlugin, err error) {
	buf := make([]*model.ServicePlugin, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s servicePluginDo) FindInBatches(result *[]*model.ServicePlugin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s servicePluginDo) Attrs(attrs ...field.AssignExpr) IServicePluginDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s servicePluginDo) Assign(attrs ...field.AssignExpr) IServicePluginDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s servicePluginDo) Joins(fields ...field.RelationField) IServicePluginDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s servicePluginDo) Preload(fields ...field.RelationField) IServicePluginDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s servicePluginDo) FirstOrInit() (*model.ServicePlugin, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServicePlugin), nil
	}
}

func (s servicePluginDo) FirstOrCreate() (*model.ServicePlugin, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServicePlugin), nil
	}
}

func (s servicePluginDo) FindByPage(offset int, limit int) (result []*model.ServicePlugin, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s servicePluginDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s servicePluginDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s servicePluginDo) Delete(models ...*model.ServicePlugin) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *servicePluginDo) withDO(do gen.Dao) *servicePluginDo {
	s.DO = *do.(*gen.DO)
	return s
}
