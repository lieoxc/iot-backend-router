// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newNotificationServicesConfig(db *gorm.DB, opts ...gen.DOOption) notificationServicesConfig {
	_notificationServicesConfig := notificationServicesConfig{}

	_notificationServicesConfig.notificationServicesConfigDo.UseDB(db, opts...)
	_notificationServicesConfig.notificationServicesConfigDo.UseModel(&model.NotificationServicesConfig{})

	tableName := _notificationServicesConfig.notificationServicesConfigDo.TableName()
	_notificationServicesConfig.ALL = field.NewAsterisk(tableName)
	_notificationServicesConfig.ID = field.NewString(tableName, "id")
	_notificationServicesConfig.Config = field.NewString(tableName, "config")
	_notificationServicesConfig.NoticeType = field.NewString(tableName, "notice_type")
	_notificationServicesConfig.Status = field.NewString(tableName, "status")
	_notificationServicesConfig.Remark = field.NewString(tableName, "remark")

	_notificationServicesConfig.fillFieldMap()

	return _notificationServicesConfig
}

type notificationServicesConfig struct {
	notificationServicesConfigDo

	ALL        field.Asterisk
	ID         field.String
	Config     field.String // 通知配置
	NoticeType field.String // 通知类型EMAIL-邮箱配置 SME-短信配置
	Status     field.String // 状态 OPEN-开启 CLOSE-关闭
	Remark     field.String

	fieldMap map[string]field.Expr
}

func (n notificationServicesConfig) Table(newTableName string) *notificationServicesConfig {
	n.notificationServicesConfigDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n notificationServicesConfig) As(alias string) *notificationServicesConfig {
	n.notificationServicesConfigDo.DO = *(n.notificationServicesConfigDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *notificationServicesConfig) updateTableName(table string) *notificationServicesConfig {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewString(table, "id")
	n.Config = field.NewString(table, "config")
	n.NoticeType = field.NewString(table, "notice_type")
	n.Status = field.NewString(table, "status")
	n.Remark = field.NewString(table, "remark")

	n.fillFieldMap()

	return n
}

func (n *notificationServicesConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *notificationServicesConfig) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 5)
	n.fieldMap["id"] = n.ID
	n.fieldMap["config"] = n.Config
	n.fieldMap["notice_type"] = n.NoticeType
	n.fieldMap["status"] = n.Status
	n.fieldMap["remark"] = n.Remark
}

func (n notificationServicesConfig) clone(db *gorm.DB) notificationServicesConfig {
	n.notificationServicesConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n notificationServicesConfig) replaceDB(db *gorm.DB) notificationServicesConfig {
	n.notificationServicesConfigDo.ReplaceDB(db)
	return n
}

type notificationServicesConfigDo struct{ gen.DO }

type INotificationServicesConfigDo interface {
	gen.SubQuery
	Debug() INotificationServicesConfigDo
	WithContext(ctx context.Context) INotificationServicesConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INotificationServicesConfigDo
	WriteDB() INotificationServicesConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INotificationServicesConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INotificationServicesConfigDo
	Not(conds ...gen.Condition) INotificationServicesConfigDo
	Or(conds ...gen.Condition) INotificationServicesConfigDo
	Select(conds ...field.Expr) INotificationServicesConfigDo
	Where(conds ...gen.Condition) INotificationServicesConfigDo
	Order(conds ...field.Expr) INotificationServicesConfigDo
	Distinct(cols ...field.Expr) INotificationServicesConfigDo
	Omit(cols ...field.Expr) INotificationServicesConfigDo
	Join(table schema.Tabler, on ...field.Expr) INotificationServicesConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INotificationServicesConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) INotificationServicesConfigDo
	Group(cols ...field.Expr) INotificationServicesConfigDo
	Having(conds ...gen.Condition) INotificationServicesConfigDo
	Limit(limit int) INotificationServicesConfigDo
	Offset(offset int) INotificationServicesConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INotificationServicesConfigDo
	Unscoped() INotificationServicesConfigDo
	Create(values ...*model.NotificationServicesConfig) error
	CreateInBatches(values []*model.NotificationServicesConfig, batchSize int) error
	Save(values ...*model.NotificationServicesConfig) error
	First() (*model.NotificationServicesConfig, error)
	Take() (*model.NotificationServicesConfig, error)
	Last() (*model.NotificationServicesConfig, error)
	Find() ([]*model.NotificationServicesConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NotificationServicesConfig, err error)
	FindInBatches(result *[]*model.NotificationServicesConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NotificationServicesConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INotificationServicesConfigDo
	Assign(attrs ...field.AssignExpr) INotificationServicesConfigDo
	Joins(fields ...field.RelationField) INotificationServicesConfigDo
	Preload(fields ...field.RelationField) INotificationServicesConfigDo
	FirstOrInit() (*model.NotificationServicesConfig, error)
	FirstOrCreate() (*model.NotificationServicesConfig, error)
	FindByPage(offset int, limit int) (result []*model.NotificationServicesConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INotificationServicesConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n notificationServicesConfigDo) Debug() INotificationServicesConfigDo {
	return n.withDO(n.DO.Debug())
}

func (n notificationServicesConfigDo) WithContext(ctx context.Context) INotificationServicesConfigDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n notificationServicesConfigDo) ReadDB() INotificationServicesConfigDo {
	return n.Clauses(dbresolver.Read)
}

func (n notificationServicesConfigDo) WriteDB() INotificationServicesConfigDo {
	return n.Clauses(dbresolver.Write)
}

func (n notificationServicesConfigDo) Session(config *gorm.Session) INotificationServicesConfigDo {
	return n.withDO(n.DO.Session(config))
}

func (n notificationServicesConfigDo) Clauses(conds ...clause.Expression) INotificationServicesConfigDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n notificationServicesConfigDo) Returning(value interface{}, columns ...string) INotificationServicesConfigDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n notificationServicesConfigDo) Not(conds ...gen.Condition) INotificationServicesConfigDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n notificationServicesConfigDo) Or(conds ...gen.Condition) INotificationServicesConfigDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n notificationServicesConfigDo) Select(conds ...field.Expr) INotificationServicesConfigDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n notificationServicesConfigDo) Where(conds ...gen.Condition) INotificationServicesConfigDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n notificationServicesConfigDo) Order(conds ...field.Expr) INotificationServicesConfigDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n notificationServicesConfigDo) Distinct(cols ...field.Expr) INotificationServicesConfigDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n notificationServicesConfigDo) Omit(cols ...field.Expr) INotificationServicesConfigDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n notificationServicesConfigDo) Join(table schema.Tabler, on ...field.Expr) INotificationServicesConfigDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n notificationServicesConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) INotificationServicesConfigDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n notificationServicesConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) INotificationServicesConfigDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n notificationServicesConfigDo) Group(cols ...field.Expr) INotificationServicesConfigDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n notificationServicesConfigDo) Having(conds ...gen.Condition) INotificationServicesConfigDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n notificationServicesConfigDo) Limit(limit int) INotificationServicesConfigDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n notificationServicesConfigDo) Offset(offset int) INotificationServicesConfigDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n notificationServicesConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INotificationServicesConfigDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n notificationServicesConfigDo) Unscoped() INotificationServicesConfigDo {
	return n.withDO(n.DO.Unscoped())
}

func (n notificationServicesConfigDo) Create(values ...*model.NotificationServicesConfig) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n notificationServicesConfigDo) CreateInBatches(values []*model.NotificationServicesConfig, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n notificationServicesConfigDo) Save(values ...*model.NotificationServicesConfig) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n notificationServicesConfigDo) First() (*model.NotificationServicesConfig, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationServicesConfig), nil
	}
}

func (n notificationServicesConfigDo) Take() (*model.NotificationServicesConfig, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationServicesConfig), nil
	}
}

func (n notificationServicesConfigDo) Last() (*model.NotificationServicesConfig, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationServicesConfig), nil
	}
}

func (n notificationServicesConfigDo) Find() ([]*model.NotificationServicesConfig, error) {
	result, err := n.DO.Find()
	return result.([]*model.NotificationServicesConfig), err
}

func (n notificationServicesConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NotificationServicesConfig, err error) {
	buf := make([]*model.NotificationServicesConfig, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n notificationServicesConfigDo) FindInBatches(result *[]*model.NotificationServicesConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n notificationServicesConfigDo) Attrs(attrs ...field.AssignExpr) INotificationServicesConfigDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n notificationServicesConfigDo) Assign(attrs ...field.AssignExpr) INotificationServicesConfigDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n notificationServicesConfigDo) Joins(fields ...field.RelationField) INotificationServicesConfigDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n notificationServicesConfigDo) Preload(fields ...field.RelationField) INotificationServicesConfigDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n notificationServicesConfigDo) FirstOrInit() (*model.NotificationServicesConfig, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationServicesConfig), nil
	}
}

func (n notificationServicesConfigDo) FirstOrCreate() (*model.NotificationServicesConfig, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotificationServicesConfig), nil
	}
}

func (n notificationServicesConfigDo) FindByPage(offset int, limit int) (result []*model.NotificationServicesConfig, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n notificationServicesConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n notificationServicesConfigDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n notificationServicesConfigDo) Delete(models ...*model.NotificationServicesConfig) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *notificationServicesConfigDo) withDO(do gen.Dao) *notificationServicesConfigDo {
	n.DO = *do.(*gen.DO)
	return n
}
