// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newSceneActionInfo(db *gorm.DB, opts ...gen.DOOption) sceneActionInfo {
	_sceneActionInfo := sceneActionInfo{}

	_sceneActionInfo.sceneActionInfoDo.UseDB(db, opts...)
	_sceneActionInfo.sceneActionInfoDo.UseModel(&model.SceneActionInfo{})

	tableName := _sceneActionInfo.sceneActionInfoDo.TableName()
	_sceneActionInfo.ALL = field.NewAsterisk(tableName)
	_sceneActionInfo.ID = field.NewString(tableName, "id")
	_sceneActionInfo.SceneID = field.NewString(tableName, "scene_id")
	_sceneActionInfo.ActionTarget = field.NewString(tableName, "action_target")
	_sceneActionInfo.ActionType = field.NewString(tableName, "action_type")
	_sceneActionInfo.ActionParamType = field.NewString(tableName, "action_param_type")
	_sceneActionInfo.ActionParam = field.NewString(tableName, "action_param")
	_sceneActionInfo.ActionValue = field.NewString(tableName, "action_value")
	_sceneActionInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_sceneActionInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sceneActionInfo.TenantID = field.NewString(tableName, "tenant_id")
	_sceneActionInfo.Remark = field.NewString(tableName, "remark")

	_sceneActionInfo.fillFieldMap()

	return _sceneActionInfo
}

type sceneActionInfo struct {
	sceneActionInfoDo

	ALL             field.Asterisk
	ID              field.String
	SceneID         field.String // 场景id（关联删除）
	ActionTarget    field.String // 动作目标id设备id、设备配置id，场景id、告警id
	ActionType      field.String // 动作类型10: 单个设备11: 单类设备20: 激活场景30: 触发告警40: 服务
	ActionParamType field.String // 1.参数类型TEL:遥测 2.ATTR:属性 CMD:命令
	ActionParam     field.String // 动作参数
	ActionValue     field.String // 目标值
	CreatedAt       field.Time   // 创建时间
	UpdatedAt       field.Time   // 更新时间
	TenantID        field.String
	Remark          field.String

	fieldMap map[string]field.Expr
}

func (s sceneActionInfo) Table(newTableName string) *sceneActionInfo {
	s.sceneActionInfoDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sceneActionInfo) As(alias string) *sceneActionInfo {
	s.sceneActionInfoDo.DO = *(s.sceneActionInfoDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sceneActionInfo) updateTableName(table string) *sceneActionInfo {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.SceneID = field.NewString(table, "scene_id")
	s.ActionTarget = field.NewString(table, "action_target")
	s.ActionType = field.NewString(table, "action_type")
	s.ActionParamType = field.NewString(table, "action_param_type")
	s.ActionParam = field.NewString(table, "action_param")
	s.ActionValue = field.NewString(table, "action_value")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.TenantID = field.NewString(table, "tenant_id")
	s.Remark = field.NewString(table, "remark")

	s.fillFieldMap()

	return s
}

func (s *sceneActionInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sceneActionInfo) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["scene_id"] = s.SceneID
	s.fieldMap["action_target"] = s.ActionTarget
	s.fieldMap["action_type"] = s.ActionType
	s.fieldMap["action_param_type"] = s.ActionParamType
	s.fieldMap["action_param"] = s.ActionParam
	s.fieldMap["action_value"] = s.ActionValue
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["tenant_id"] = s.TenantID
	s.fieldMap["remark"] = s.Remark
}

func (s sceneActionInfo) clone(db *gorm.DB) sceneActionInfo {
	s.sceneActionInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sceneActionInfo) replaceDB(db *gorm.DB) sceneActionInfo {
	s.sceneActionInfoDo.ReplaceDB(db)
	return s
}

type sceneActionInfoDo struct{ gen.DO }

type ISceneActionInfoDo interface {
	gen.SubQuery
	Debug() ISceneActionInfoDo
	WithContext(ctx context.Context) ISceneActionInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISceneActionInfoDo
	WriteDB() ISceneActionInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISceneActionInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISceneActionInfoDo
	Not(conds ...gen.Condition) ISceneActionInfoDo
	Or(conds ...gen.Condition) ISceneActionInfoDo
	Select(conds ...field.Expr) ISceneActionInfoDo
	Where(conds ...gen.Condition) ISceneActionInfoDo
	Order(conds ...field.Expr) ISceneActionInfoDo
	Distinct(cols ...field.Expr) ISceneActionInfoDo
	Omit(cols ...field.Expr) ISceneActionInfoDo
	Join(table schema.Tabler, on ...field.Expr) ISceneActionInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISceneActionInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISceneActionInfoDo
	Group(cols ...field.Expr) ISceneActionInfoDo
	Having(conds ...gen.Condition) ISceneActionInfoDo
	Limit(limit int) ISceneActionInfoDo
	Offset(offset int) ISceneActionInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISceneActionInfoDo
	Unscoped() ISceneActionInfoDo
	Create(values ...*model.SceneActionInfo) error
	CreateInBatches(values []*model.SceneActionInfo, batchSize int) error
	Save(values ...*model.SceneActionInfo) error
	First() (*model.SceneActionInfo, error)
	Take() (*model.SceneActionInfo, error)
	Last() (*model.SceneActionInfo, error)
	Find() ([]*model.SceneActionInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SceneActionInfo, err error)
	FindInBatches(result *[]*model.SceneActionInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SceneActionInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISceneActionInfoDo
	Assign(attrs ...field.AssignExpr) ISceneActionInfoDo
	Joins(fields ...field.RelationField) ISceneActionInfoDo
	Preload(fields ...field.RelationField) ISceneActionInfoDo
	FirstOrInit() (*model.SceneActionInfo, error)
	FirstOrCreate() (*model.SceneActionInfo, error)
	FindByPage(offset int, limit int) (result []*model.SceneActionInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISceneActionInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sceneActionInfoDo) Debug() ISceneActionInfoDo {
	return s.withDO(s.DO.Debug())
}

func (s sceneActionInfoDo) WithContext(ctx context.Context) ISceneActionInfoDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sceneActionInfoDo) ReadDB() ISceneActionInfoDo {
	return s.Clauses(dbresolver.Read)
}

func (s sceneActionInfoDo) WriteDB() ISceneActionInfoDo {
	return s.Clauses(dbresolver.Write)
}

func (s sceneActionInfoDo) Session(config *gorm.Session) ISceneActionInfoDo {
	return s.withDO(s.DO.Session(config))
}

func (s sceneActionInfoDo) Clauses(conds ...clause.Expression) ISceneActionInfoDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sceneActionInfoDo) Returning(value interface{}, columns ...string) ISceneActionInfoDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sceneActionInfoDo) Not(conds ...gen.Condition) ISceneActionInfoDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sceneActionInfoDo) Or(conds ...gen.Condition) ISceneActionInfoDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sceneActionInfoDo) Select(conds ...field.Expr) ISceneActionInfoDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sceneActionInfoDo) Where(conds ...gen.Condition) ISceneActionInfoDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sceneActionInfoDo) Order(conds ...field.Expr) ISceneActionInfoDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sceneActionInfoDo) Distinct(cols ...field.Expr) ISceneActionInfoDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sceneActionInfoDo) Omit(cols ...field.Expr) ISceneActionInfoDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sceneActionInfoDo) Join(table schema.Tabler, on ...field.Expr) ISceneActionInfoDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sceneActionInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISceneActionInfoDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sceneActionInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ISceneActionInfoDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sceneActionInfoDo) Group(cols ...field.Expr) ISceneActionInfoDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sceneActionInfoDo) Having(conds ...gen.Condition) ISceneActionInfoDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sceneActionInfoDo) Limit(limit int) ISceneActionInfoDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sceneActionInfoDo) Offset(offset int) ISceneActionInfoDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sceneActionInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISceneActionInfoDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sceneActionInfoDo) Unscoped() ISceneActionInfoDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sceneActionInfoDo) Create(values ...*model.SceneActionInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sceneActionInfoDo) CreateInBatches(values []*model.SceneActionInfo, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sceneActionInfoDo) Save(values ...*model.SceneActionInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sceneActionInfoDo) First() (*model.SceneActionInfo, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneActionInfo), nil
	}
}

func (s sceneActionInfoDo) Take() (*model.SceneActionInfo, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneActionInfo), nil
	}
}

func (s sceneActionInfoDo) Last() (*model.SceneActionInfo, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneActionInfo), nil
	}
}

func (s sceneActionInfoDo) Find() ([]*model.SceneActionInfo, error) {
	result, err := s.DO.Find()
	return result.([]*model.SceneActionInfo), err
}

func (s sceneActionInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SceneActionInfo, err error) {
	buf := make([]*model.SceneActionInfo, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sceneActionInfoDo) FindInBatches(result *[]*model.SceneActionInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sceneActionInfoDo) Attrs(attrs ...field.AssignExpr) ISceneActionInfoDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sceneActionInfoDo) Assign(attrs ...field.AssignExpr) ISceneActionInfoDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sceneActionInfoDo) Joins(fields ...field.RelationField) ISceneActionInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sceneActionInfoDo) Preload(fields ...field.RelationField) ISceneActionInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sceneActionInfoDo) FirstOrInit() (*model.SceneActionInfo, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneActionInfo), nil
	}
}

func (s sceneActionInfoDo) FirstOrCreate() (*model.SceneActionInfo, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneActionInfo), nil
	}
}

func (s sceneActionInfoDo) FindByPage(offset int, limit int) (result []*model.SceneActionInfo, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sceneActionInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sceneActionInfoDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sceneActionInfoDo) Delete(models ...*model.SceneActionInfo) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sceneActionInfoDo) withDO(do gen.Dao) *sceneActionInfoDo {
	s.DO = *do.(*gen.DO)
	return s
}
