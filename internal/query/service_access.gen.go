// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newServiceAccess(db *gorm.DB, opts ...gen.DOOption) serviceAccess {
	_serviceAccess := serviceAccess{}

	_serviceAccess.serviceAccessDo.UseDB(db, opts...)
	_serviceAccess.serviceAccessDo.UseModel(&model.ServiceAccess{})

	tableName := _serviceAccess.serviceAccessDo.TableName()
	_serviceAccess.ALL = field.NewAsterisk(tableName)
	_serviceAccess.ID = field.NewString(tableName, "id")
	_serviceAccess.Name = field.NewString(tableName, "name")
	_serviceAccess.ServicePluginID = field.NewString(tableName, "service_plugin_id")
	_serviceAccess.Voucher = field.NewString(tableName, "voucher")
	_serviceAccess.Description = field.NewString(tableName, "description")
	_serviceAccess.ServiceAccessConfig = field.NewString(tableName, "service_access_config")
	_serviceAccess.Remark = field.NewString(tableName, "remark")
	_serviceAccess.CreateAt = field.NewTime(tableName, "create_at")
	_serviceAccess.UpdateAt = field.NewTime(tableName, "update_at")
	_serviceAccess.TenantID = field.NewString(tableName, "tenant_id")

	_serviceAccess.fillFieldMap()

	return _serviceAccess
}

type serviceAccess struct {
	serviceAccessDo

	ALL                 field.Asterisk
	ID                  field.String // 接入ID
	Name                field.String // 名称
	ServicePluginID     field.String // 服务ID
	Voucher             field.String // 凭证
	Description         field.String // 描述
	ServiceAccessConfig field.String // 服务配置
	Remark              field.String // 备注
	CreateAt            field.Time   // 创建时间
	UpdateAt            field.Time   // 更新时间
	TenantID            field.String // 租户ID

	fieldMap map[string]field.Expr
}

func (s serviceAccess) Table(newTableName string) *serviceAccess {
	s.serviceAccessDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serviceAccess) As(alias string) *serviceAccess {
	s.serviceAccessDo.DO = *(s.serviceAccessDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serviceAccess) updateTableName(table string) *serviceAccess {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Name = field.NewString(table, "name")
	s.ServicePluginID = field.NewString(table, "service_plugin_id")
	s.Voucher = field.NewString(table, "voucher")
	s.Description = field.NewString(table, "description")
	s.ServiceAccessConfig = field.NewString(table, "service_access_config")
	s.Remark = field.NewString(table, "remark")
	s.CreateAt = field.NewTime(table, "create_at")
	s.UpdateAt = field.NewTime(table, "update_at")
	s.TenantID = field.NewString(table, "tenant_id")

	s.fillFieldMap()

	return s
}

func (s *serviceAccess) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serviceAccess) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["service_plugin_id"] = s.ServicePluginID
	s.fieldMap["voucher"] = s.Voucher
	s.fieldMap["description"] = s.Description
	s.fieldMap["service_access_config"] = s.ServiceAccessConfig
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["create_at"] = s.CreateAt
	s.fieldMap["update_at"] = s.UpdateAt
	s.fieldMap["tenant_id"] = s.TenantID
}

func (s serviceAccess) clone(db *gorm.DB) serviceAccess {
	s.serviceAccessDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serviceAccess) replaceDB(db *gorm.DB) serviceAccess {
	s.serviceAccessDo.ReplaceDB(db)
	return s
}

type serviceAccessDo struct{ gen.DO }

type IServiceAccessDo interface {
	gen.SubQuery
	Debug() IServiceAccessDo
	WithContext(ctx context.Context) IServiceAccessDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServiceAccessDo
	WriteDB() IServiceAccessDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServiceAccessDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServiceAccessDo
	Not(conds ...gen.Condition) IServiceAccessDo
	Or(conds ...gen.Condition) IServiceAccessDo
	Select(conds ...field.Expr) IServiceAccessDo
	Where(conds ...gen.Condition) IServiceAccessDo
	Order(conds ...field.Expr) IServiceAccessDo
	Distinct(cols ...field.Expr) IServiceAccessDo
	Omit(cols ...field.Expr) IServiceAccessDo
	Join(table schema.Tabler, on ...field.Expr) IServiceAccessDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServiceAccessDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServiceAccessDo
	Group(cols ...field.Expr) IServiceAccessDo
	Having(conds ...gen.Condition) IServiceAccessDo
	Limit(limit int) IServiceAccessDo
	Offset(offset int) IServiceAccessDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceAccessDo
	Unscoped() IServiceAccessDo
	Create(values ...*model.ServiceAccess) error
	CreateInBatches(values []*model.ServiceAccess, batchSize int) error
	Save(values ...*model.ServiceAccess) error
	First() (*model.ServiceAccess, error)
	Take() (*model.ServiceAccess, error)
	Last() (*model.ServiceAccess, error)
	Find() ([]*model.ServiceAccess, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServiceAccess, err error)
	FindInBatches(result *[]*model.ServiceAccess, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServiceAccess) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServiceAccessDo
	Assign(attrs ...field.AssignExpr) IServiceAccessDo
	Joins(fields ...field.RelationField) IServiceAccessDo
	Preload(fields ...field.RelationField) IServiceAccessDo
	FirstOrInit() (*model.ServiceAccess, error)
	FirstOrCreate() (*model.ServiceAccess, error)
	FindByPage(offset int, limit int) (result []*model.ServiceAccess, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServiceAccessDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serviceAccessDo) Debug() IServiceAccessDo {
	return s.withDO(s.DO.Debug())
}

func (s serviceAccessDo) WithContext(ctx context.Context) IServiceAccessDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serviceAccessDo) ReadDB() IServiceAccessDo {
	return s.Clauses(dbresolver.Read)
}

func (s serviceAccessDo) WriteDB() IServiceAccessDo {
	return s.Clauses(dbresolver.Write)
}

func (s serviceAccessDo) Session(config *gorm.Session) IServiceAccessDo {
	return s.withDO(s.DO.Session(config))
}

func (s serviceAccessDo) Clauses(conds ...clause.Expression) IServiceAccessDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serviceAccessDo) Returning(value interface{}, columns ...string) IServiceAccessDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serviceAccessDo) Not(conds ...gen.Condition) IServiceAccessDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serviceAccessDo) Or(conds ...gen.Condition) IServiceAccessDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serviceAccessDo) Select(conds ...field.Expr) IServiceAccessDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serviceAccessDo) Where(conds ...gen.Condition) IServiceAccessDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serviceAccessDo) Order(conds ...field.Expr) IServiceAccessDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serviceAccessDo) Distinct(cols ...field.Expr) IServiceAccessDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serviceAccessDo) Omit(cols ...field.Expr) IServiceAccessDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serviceAccessDo) Join(table schema.Tabler, on ...field.Expr) IServiceAccessDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serviceAccessDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServiceAccessDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serviceAccessDo) RightJoin(table schema.Tabler, on ...field.Expr) IServiceAccessDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serviceAccessDo) Group(cols ...field.Expr) IServiceAccessDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serviceAccessDo) Having(conds ...gen.Condition) IServiceAccessDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serviceAccessDo) Limit(limit int) IServiceAccessDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serviceAccessDo) Offset(offset int) IServiceAccessDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serviceAccessDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceAccessDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serviceAccessDo) Unscoped() IServiceAccessDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serviceAccessDo) Create(values ...*model.ServiceAccess) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serviceAccessDo) CreateInBatches(values []*model.ServiceAccess, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serviceAccessDo) Save(values ...*model.ServiceAccess) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serviceAccessDo) First() (*model.ServiceAccess, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceAccess), nil
	}
}

func (s serviceAccessDo) Take() (*model.ServiceAccess, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceAccess), nil
	}
}

func (s serviceAccessDo) Last() (*model.ServiceAccess, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceAccess), nil
	}
}

func (s serviceAccessDo) Find() ([]*model.ServiceAccess, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServiceAccess), err
}

func (s serviceAccessDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServiceAccess, err error) {
	buf := make([]*model.ServiceAccess, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serviceAccessDo) FindInBatches(result *[]*model.ServiceAccess, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serviceAccessDo) Attrs(attrs ...field.AssignExpr) IServiceAccessDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serviceAccessDo) Assign(attrs ...field.AssignExpr) IServiceAccessDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serviceAccessDo) Joins(fields ...field.RelationField) IServiceAccessDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serviceAccessDo) Preload(fields ...field.RelationField) IServiceAccessDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serviceAccessDo) FirstOrInit() (*model.ServiceAccess, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceAccess), nil
	}
}

func (s serviceAccessDo) FirstOrCreate() (*model.ServiceAccess, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceAccess), nil
	}
}

func (s serviceAccessDo) FindByPage(offset int, limit int) (result []*model.ServiceAccess, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serviceAccessDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serviceAccessDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serviceAccessDo) Delete(models ...*model.ServiceAccess) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serviceAccessDo) withDO(do gen.Dao) *serviceAccessDo {
	s.DO = *do.(*gen.DO)
	return s
}
