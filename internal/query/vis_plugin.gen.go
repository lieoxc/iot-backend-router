// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newVisPlugin(db *gorm.DB, opts ...gen.DOOption) visPlugin {
	_visPlugin := visPlugin{}

	_visPlugin.visPluginDo.UseDB(db, opts...)
	_visPlugin.visPluginDo.UseModel(&model.VisPlugin{})

	tableName := _visPlugin.visPluginDo.TableName()
	_visPlugin.ALL = field.NewAsterisk(tableName)
	_visPlugin.ID = field.NewString(tableName, "id")
	_visPlugin.TenantID = field.NewString(tableName, "tenant_id")
	_visPlugin.PluginName = field.NewString(tableName, "plugin_name")
	_visPlugin.PluginDescription = field.NewString(tableName, "plugin_description")
	_visPlugin.CreateAt = field.NewInt64(tableName, "create_at")
	_visPlugin.Remark = field.NewString(tableName, "remark")

	_visPlugin.fillFieldMap()

	return _visPlugin
}

type visPlugin struct {
	visPluginDo

	ALL               field.Asterisk
	ID                field.String
	TenantID          field.String // 租户id
	PluginName        field.String // 可视化插件名称
	PluginDescription field.String // 插件描述
	CreateAt          field.Int64
	Remark            field.String

	fieldMap map[string]field.Expr
}

func (v visPlugin) Table(newTableName string) *visPlugin {
	v.visPluginDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v visPlugin) As(alias string) *visPlugin {
	v.visPluginDo.DO = *(v.visPluginDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *visPlugin) updateTableName(table string) *visPlugin {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewString(table, "id")
	v.TenantID = field.NewString(table, "tenant_id")
	v.PluginName = field.NewString(table, "plugin_name")
	v.PluginDescription = field.NewString(table, "plugin_description")
	v.CreateAt = field.NewInt64(table, "create_at")
	v.Remark = field.NewString(table, "remark")

	v.fillFieldMap()

	return v
}

func (v *visPlugin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *visPlugin) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 6)
	v.fieldMap["id"] = v.ID
	v.fieldMap["tenant_id"] = v.TenantID
	v.fieldMap["plugin_name"] = v.PluginName
	v.fieldMap["plugin_description"] = v.PluginDescription
	v.fieldMap["create_at"] = v.CreateAt
	v.fieldMap["remark"] = v.Remark
}

func (v visPlugin) clone(db *gorm.DB) visPlugin {
	v.visPluginDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v visPlugin) replaceDB(db *gorm.DB) visPlugin {
	v.visPluginDo.ReplaceDB(db)
	return v
}

type visPluginDo struct{ gen.DO }

type IVisPluginDo interface {
	gen.SubQuery
	Debug() IVisPluginDo
	WithContext(ctx context.Context) IVisPluginDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVisPluginDo
	WriteDB() IVisPluginDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVisPluginDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVisPluginDo
	Not(conds ...gen.Condition) IVisPluginDo
	Or(conds ...gen.Condition) IVisPluginDo
	Select(conds ...field.Expr) IVisPluginDo
	Where(conds ...gen.Condition) IVisPluginDo
	Order(conds ...field.Expr) IVisPluginDo
	Distinct(cols ...field.Expr) IVisPluginDo
	Omit(cols ...field.Expr) IVisPluginDo
	Join(table schema.Tabler, on ...field.Expr) IVisPluginDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVisPluginDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVisPluginDo
	Group(cols ...field.Expr) IVisPluginDo
	Having(conds ...gen.Condition) IVisPluginDo
	Limit(limit int) IVisPluginDo
	Offset(offset int) IVisPluginDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVisPluginDo
	Unscoped() IVisPluginDo
	Create(values ...*model.VisPlugin) error
	CreateInBatches(values []*model.VisPlugin, batchSize int) error
	Save(values ...*model.VisPlugin) error
	First() (*model.VisPlugin, error)
	Take() (*model.VisPlugin, error)
	Last() (*model.VisPlugin, error)
	Find() ([]*model.VisPlugin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VisPlugin, err error)
	FindInBatches(result *[]*model.VisPlugin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VisPlugin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVisPluginDo
	Assign(attrs ...field.AssignExpr) IVisPluginDo
	Joins(fields ...field.RelationField) IVisPluginDo
	Preload(fields ...field.RelationField) IVisPluginDo
	FirstOrInit() (*model.VisPlugin, error)
	FirstOrCreate() (*model.VisPlugin, error)
	FindByPage(offset int, limit int) (result []*model.VisPlugin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVisPluginDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v visPluginDo) Debug() IVisPluginDo {
	return v.withDO(v.DO.Debug())
}

func (v visPluginDo) WithContext(ctx context.Context) IVisPluginDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v visPluginDo) ReadDB() IVisPluginDo {
	return v.Clauses(dbresolver.Read)
}

func (v visPluginDo) WriteDB() IVisPluginDo {
	return v.Clauses(dbresolver.Write)
}

func (v visPluginDo) Session(config *gorm.Session) IVisPluginDo {
	return v.withDO(v.DO.Session(config))
}

func (v visPluginDo) Clauses(conds ...clause.Expression) IVisPluginDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v visPluginDo) Returning(value interface{}, columns ...string) IVisPluginDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v visPluginDo) Not(conds ...gen.Condition) IVisPluginDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v visPluginDo) Or(conds ...gen.Condition) IVisPluginDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v visPluginDo) Select(conds ...field.Expr) IVisPluginDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v visPluginDo) Where(conds ...gen.Condition) IVisPluginDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v visPluginDo) Order(conds ...field.Expr) IVisPluginDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v visPluginDo) Distinct(cols ...field.Expr) IVisPluginDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v visPluginDo) Omit(cols ...field.Expr) IVisPluginDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v visPluginDo) Join(table schema.Tabler, on ...field.Expr) IVisPluginDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v visPluginDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVisPluginDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v visPluginDo) RightJoin(table schema.Tabler, on ...field.Expr) IVisPluginDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v visPluginDo) Group(cols ...field.Expr) IVisPluginDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v visPluginDo) Having(conds ...gen.Condition) IVisPluginDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v visPluginDo) Limit(limit int) IVisPluginDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v visPluginDo) Offset(offset int) IVisPluginDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v visPluginDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVisPluginDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v visPluginDo) Unscoped() IVisPluginDo {
	return v.withDO(v.DO.Unscoped())
}

func (v visPluginDo) Create(values ...*model.VisPlugin) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v visPluginDo) CreateInBatches(values []*model.VisPlugin, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v visPluginDo) Save(values ...*model.VisPlugin) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v visPluginDo) First() (*model.VisPlugin, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VisPlugin), nil
	}
}

func (v visPluginDo) Take() (*model.VisPlugin, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VisPlugin), nil
	}
}

func (v visPluginDo) Last() (*model.VisPlugin, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VisPlugin), nil
	}
}

func (v visPluginDo) Find() ([]*model.VisPlugin, error) {
	result, err := v.DO.Find()
	return result.([]*model.VisPlugin), err
}

func (v visPluginDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VisPlugin, err error) {
	buf := make([]*model.VisPlugin, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v visPluginDo) FindInBatches(result *[]*model.VisPlugin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v visPluginDo) Attrs(attrs ...field.AssignExpr) IVisPluginDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v visPluginDo) Assign(attrs ...field.AssignExpr) IVisPluginDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v visPluginDo) Joins(fields ...field.RelationField) IVisPluginDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v visPluginDo) Preload(fields ...field.RelationField) IVisPluginDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v visPluginDo) FirstOrInit() (*model.VisPlugin, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VisPlugin), nil
	}
}

func (v visPluginDo) FirstOrCreate() (*model.VisPlugin, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VisPlugin), nil
	}
}

func (v visPluginDo) FindByPage(offset int, limit int) (result []*model.VisPlugin, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v visPluginDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v visPluginDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v visPluginDo) Delete(models ...*model.VisPlugin) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *visPluginDo) withDO(do gen.Dao) *visPluginDo {
	v.DO = *do.(*gen.DO)
	return v
}
