// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newSceneInfo(db *gorm.DB, opts ...gen.DOOption) sceneInfo {
	_sceneInfo := sceneInfo{}

	_sceneInfo.sceneInfoDo.UseDB(db, opts...)
	_sceneInfo.sceneInfoDo.UseModel(&model.SceneInfo{})

	tableName := _sceneInfo.sceneInfoDo.TableName()
	_sceneInfo.ALL = field.NewAsterisk(tableName)
	_sceneInfo.ID = field.NewString(tableName, "id")
	_sceneInfo.Name = field.NewString(tableName, "name")
	_sceneInfo.Description = field.NewString(tableName, "description")
	_sceneInfo.TenantID = field.NewString(tableName, "tenant_id")
	_sceneInfo.Creator = field.NewString(tableName, "creator")
	_sceneInfo.Updator = field.NewString(tableName, "updator")
	_sceneInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_sceneInfo.UpdatedAt = field.NewTime(tableName, "updated_at")

	_sceneInfo.fillFieldMap()

	return _sceneInfo
}

type sceneInfo struct {
	sceneInfoDo

	ALL         field.Asterisk
	ID          field.String
	Name        field.String // 名称
	Description field.String // 描述
	TenantID    field.String // 租户ID
	Creator     field.String // 创建人ID
	Updator     field.String // 修改人ID
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (s sceneInfo) Table(newTableName string) *sceneInfo {
	s.sceneInfoDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sceneInfo) As(alias string) *sceneInfo {
	s.sceneInfoDo.DO = *(s.sceneInfoDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sceneInfo) updateTableName(table string) *sceneInfo {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Name = field.NewString(table, "name")
	s.Description = field.NewString(table, "description")
	s.TenantID = field.NewString(table, "tenant_id")
	s.Creator = field.NewString(table, "creator")
	s.Updator = field.NewString(table, "updator")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *sceneInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sceneInfo) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["description"] = s.Description
	s.fieldMap["tenant_id"] = s.TenantID
	s.fieldMap["creator"] = s.Creator
	s.fieldMap["updator"] = s.Updator
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s sceneInfo) clone(db *gorm.DB) sceneInfo {
	s.sceneInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sceneInfo) replaceDB(db *gorm.DB) sceneInfo {
	s.sceneInfoDo.ReplaceDB(db)
	return s
}

type sceneInfoDo struct{ gen.DO }

type ISceneInfoDo interface {
	gen.SubQuery
	Debug() ISceneInfoDo
	WithContext(ctx context.Context) ISceneInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISceneInfoDo
	WriteDB() ISceneInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISceneInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISceneInfoDo
	Not(conds ...gen.Condition) ISceneInfoDo
	Or(conds ...gen.Condition) ISceneInfoDo
	Select(conds ...field.Expr) ISceneInfoDo
	Where(conds ...gen.Condition) ISceneInfoDo
	Order(conds ...field.Expr) ISceneInfoDo
	Distinct(cols ...field.Expr) ISceneInfoDo
	Omit(cols ...field.Expr) ISceneInfoDo
	Join(table schema.Tabler, on ...field.Expr) ISceneInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISceneInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISceneInfoDo
	Group(cols ...field.Expr) ISceneInfoDo
	Having(conds ...gen.Condition) ISceneInfoDo
	Limit(limit int) ISceneInfoDo
	Offset(offset int) ISceneInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISceneInfoDo
	Unscoped() ISceneInfoDo
	Create(values ...*model.SceneInfo) error
	CreateInBatches(values []*model.SceneInfo, batchSize int) error
	Save(values ...*model.SceneInfo) error
	First() (*model.SceneInfo, error)
	Take() (*model.SceneInfo, error)
	Last() (*model.SceneInfo, error)
	Find() ([]*model.SceneInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SceneInfo, err error)
	FindInBatches(result *[]*model.SceneInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SceneInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISceneInfoDo
	Assign(attrs ...field.AssignExpr) ISceneInfoDo
	Joins(fields ...field.RelationField) ISceneInfoDo
	Preload(fields ...field.RelationField) ISceneInfoDo
	FirstOrInit() (*model.SceneInfo, error)
	FirstOrCreate() (*model.SceneInfo, error)
	FindByPage(offset int, limit int) (result []*model.SceneInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISceneInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sceneInfoDo) Debug() ISceneInfoDo {
	return s.withDO(s.DO.Debug())
}

func (s sceneInfoDo) WithContext(ctx context.Context) ISceneInfoDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sceneInfoDo) ReadDB() ISceneInfoDo {
	return s.Clauses(dbresolver.Read)
}

func (s sceneInfoDo) WriteDB() ISceneInfoDo {
	return s.Clauses(dbresolver.Write)
}

func (s sceneInfoDo) Session(config *gorm.Session) ISceneInfoDo {
	return s.withDO(s.DO.Session(config))
}

func (s sceneInfoDo) Clauses(conds ...clause.Expression) ISceneInfoDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sceneInfoDo) Returning(value interface{}, columns ...string) ISceneInfoDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sceneInfoDo) Not(conds ...gen.Condition) ISceneInfoDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sceneInfoDo) Or(conds ...gen.Condition) ISceneInfoDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sceneInfoDo) Select(conds ...field.Expr) ISceneInfoDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sceneInfoDo) Where(conds ...gen.Condition) ISceneInfoDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sceneInfoDo) Order(conds ...field.Expr) ISceneInfoDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sceneInfoDo) Distinct(cols ...field.Expr) ISceneInfoDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sceneInfoDo) Omit(cols ...field.Expr) ISceneInfoDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sceneInfoDo) Join(table schema.Tabler, on ...field.Expr) ISceneInfoDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sceneInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISceneInfoDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sceneInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) ISceneInfoDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sceneInfoDo) Group(cols ...field.Expr) ISceneInfoDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sceneInfoDo) Having(conds ...gen.Condition) ISceneInfoDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sceneInfoDo) Limit(limit int) ISceneInfoDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sceneInfoDo) Offset(offset int) ISceneInfoDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sceneInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISceneInfoDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sceneInfoDo) Unscoped() ISceneInfoDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sceneInfoDo) Create(values ...*model.SceneInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sceneInfoDo) CreateInBatches(values []*model.SceneInfo, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sceneInfoDo) Save(values ...*model.SceneInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sceneInfoDo) First() (*model.SceneInfo, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneInfo), nil
	}
}

func (s sceneInfoDo) Take() (*model.SceneInfo, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneInfo), nil
	}
}

func (s sceneInfoDo) Last() (*model.SceneInfo, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneInfo), nil
	}
}

func (s sceneInfoDo) Find() ([]*model.SceneInfo, error) {
	result, err := s.DO.Find()
	return result.([]*model.SceneInfo), err
}

func (s sceneInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SceneInfo, err error) {
	buf := make([]*model.SceneInfo, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sceneInfoDo) FindInBatches(result *[]*model.SceneInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sceneInfoDo) Attrs(attrs ...field.AssignExpr) ISceneInfoDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sceneInfoDo) Assign(attrs ...field.AssignExpr) ISceneInfoDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sceneInfoDo) Joins(fields ...field.RelationField) ISceneInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sceneInfoDo) Preload(fields ...field.RelationField) ISceneInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sceneInfoDo) FirstOrInit() (*model.SceneInfo, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneInfo), nil
	}
}

func (s sceneInfoDo) FirstOrCreate() (*model.SceneInfo, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneInfo), nil
	}
}

func (s sceneInfoDo) FindByPage(offset int, limit int) (result []*model.SceneInfo, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sceneInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sceneInfoDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sceneInfoDo) Delete(models ...*model.SceneInfo) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sceneInfoDo) withDO(do gen.Dao) *sceneInfoDo {
	s.DO = *do.(*gen.DO)
	return s
}
