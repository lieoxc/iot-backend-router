// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newSceneAutomation(db *gorm.DB, opts ...gen.DOOption) sceneAutomation {
	_sceneAutomation := sceneAutomation{}

	_sceneAutomation.sceneAutomationDo.UseDB(db, opts...)
	_sceneAutomation.sceneAutomationDo.UseModel(&model.SceneAutomation{})

	tableName := _sceneAutomation.sceneAutomationDo.TableName()
	_sceneAutomation.ALL = field.NewAsterisk(tableName)
	_sceneAutomation.ID = field.NewString(tableName, "id")
	_sceneAutomation.Name = field.NewString(tableName, "name")
	_sceneAutomation.Description = field.NewString(tableName, "description")
	_sceneAutomation.Enabled = field.NewString(tableName, "enabled")
	_sceneAutomation.TenantID = field.NewString(tableName, "tenant_id")
	_sceneAutomation.Creator = field.NewString(tableName, "creator")
	_sceneAutomation.Updator = field.NewString(tableName, "updator")
	_sceneAutomation.CreatedAt = field.NewTime(tableName, "created_at")
	_sceneAutomation.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sceneAutomation.Remark = field.NewString(tableName, "remark")

	_sceneAutomation.fillFieldMap()

	return _sceneAutomation
}

type sceneAutomation struct {
	sceneAutomationDo

	ALL         field.Asterisk
	ID          field.String // 联动
	Name        field.String // 名称
	Description field.String // 描述
	Enabled     field.String // 是否启用 Y：启用 N：停用
	TenantID    field.String // 租户ID
	Creator     field.String // 创建人id
	Updator     field.String // 修改人id
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间
	Remark      field.String

	fieldMap map[string]field.Expr
}

func (s sceneAutomation) Table(newTableName string) *sceneAutomation {
	s.sceneAutomationDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sceneAutomation) As(alias string) *sceneAutomation {
	s.sceneAutomationDo.DO = *(s.sceneAutomationDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sceneAutomation) updateTableName(table string) *sceneAutomation {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Name = field.NewString(table, "name")
	s.Description = field.NewString(table, "description")
	s.Enabled = field.NewString(table, "enabled")
	s.TenantID = field.NewString(table, "tenant_id")
	s.Creator = field.NewString(table, "creator")
	s.Updator = field.NewString(table, "updator")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.Remark = field.NewString(table, "remark")

	s.fillFieldMap()

	return s
}

func (s *sceneAutomation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sceneAutomation) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["description"] = s.Description
	s.fieldMap["enabled"] = s.Enabled
	s.fieldMap["tenant_id"] = s.TenantID
	s.fieldMap["creator"] = s.Creator
	s.fieldMap["updator"] = s.Updator
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["remark"] = s.Remark
}

func (s sceneAutomation) clone(db *gorm.DB) sceneAutomation {
	s.sceneAutomationDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sceneAutomation) replaceDB(db *gorm.DB) sceneAutomation {
	s.sceneAutomationDo.ReplaceDB(db)
	return s
}

type sceneAutomationDo struct{ gen.DO }

type ISceneAutomationDo interface {
	gen.SubQuery
	Debug() ISceneAutomationDo
	WithContext(ctx context.Context) ISceneAutomationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISceneAutomationDo
	WriteDB() ISceneAutomationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISceneAutomationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISceneAutomationDo
	Not(conds ...gen.Condition) ISceneAutomationDo
	Or(conds ...gen.Condition) ISceneAutomationDo
	Select(conds ...field.Expr) ISceneAutomationDo
	Where(conds ...gen.Condition) ISceneAutomationDo
	Order(conds ...field.Expr) ISceneAutomationDo
	Distinct(cols ...field.Expr) ISceneAutomationDo
	Omit(cols ...field.Expr) ISceneAutomationDo
	Join(table schema.Tabler, on ...field.Expr) ISceneAutomationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISceneAutomationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISceneAutomationDo
	Group(cols ...field.Expr) ISceneAutomationDo
	Having(conds ...gen.Condition) ISceneAutomationDo
	Limit(limit int) ISceneAutomationDo
	Offset(offset int) ISceneAutomationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISceneAutomationDo
	Unscoped() ISceneAutomationDo
	Create(values ...*model.SceneAutomation) error
	CreateInBatches(values []*model.SceneAutomation, batchSize int) error
	Save(values ...*model.SceneAutomation) error
	First() (*model.SceneAutomation, error)
	Take() (*model.SceneAutomation, error)
	Last() (*model.SceneAutomation, error)
	Find() ([]*model.SceneAutomation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SceneAutomation, err error)
	FindInBatches(result *[]*model.SceneAutomation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SceneAutomation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISceneAutomationDo
	Assign(attrs ...field.AssignExpr) ISceneAutomationDo
	Joins(fields ...field.RelationField) ISceneAutomationDo
	Preload(fields ...field.RelationField) ISceneAutomationDo
	FirstOrInit() (*model.SceneAutomation, error)
	FirstOrCreate() (*model.SceneAutomation, error)
	FindByPage(offset int, limit int) (result []*model.SceneAutomation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISceneAutomationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sceneAutomationDo) Debug() ISceneAutomationDo {
	return s.withDO(s.DO.Debug())
}

func (s sceneAutomationDo) WithContext(ctx context.Context) ISceneAutomationDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sceneAutomationDo) ReadDB() ISceneAutomationDo {
	return s.Clauses(dbresolver.Read)
}

func (s sceneAutomationDo) WriteDB() ISceneAutomationDo {
	return s.Clauses(dbresolver.Write)
}

func (s sceneAutomationDo) Session(config *gorm.Session) ISceneAutomationDo {
	return s.withDO(s.DO.Session(config))
}

func (s sceneAutomationDo) Clauses(conds ...clause.Expression) ISceneAutomationDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sceneAutomationDo) Returning(value interface{}, columns ...string) ISceneAutomationDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sceneAutomationDo) Not(conds ...gen.Condition) ISceneAutomationDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sceneAutomationDo) Or(conds ...gen.Condition) ISceneAutomationDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sceneAutomationDo) Select(conds ...field.Expr) ISceneAutomationDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sceneAutomationDo) Where(conds ...gen.Condition) ISceneAutomationDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sceneAutomationDo) Order(conds ...field.Expr) ISceneAutomationDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sceneAutomationDo) Distinct(cols ...field.Expr) ISceneAutomationDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sceneAutomationDo) Omit(cols ...field.Expr) ISceneAutomationDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sceneAutomationDo) Join(table schema.Tabler, on ...field.Expr) ISceneAutomationDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sceneAutomationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISceneAutomationDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sceneAutomationDo) RightJoin(table schema.Tabler, on ...field.Expr) ISceneAutomationDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sceneAutomationDo) Group(cols ...field.Expr) ISceneAutomationDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sceneAutomationDo) Having(conds ...gen.Condition) ISceneAutomationDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sceneAutomationDo) Limit(limit int) ISceneAutomationDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sceneAutomationDo) Offset(offset int) ISceneAutomationDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sceneAutomationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISceneAutomationDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sceneAutomationDo) Unscoped() ISceneAutomationDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sceneAutomationDo) Create(values ...*model.SceneAutomation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sceneAutomationDo) CreateInBatches(values []*model.SceneAutomation, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sceneAutomationDo) Save(values ...*model.SceneAutomation) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sceneAutomationDo) First() (*model.SceneAutomation, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneAutomation), nil
	}
}

func (s sceneAutomationDo) Take() (*model.SceneAutomation, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneAutomation), nil
	}
}

func (s sceneAutomationDo) Last() (*model.SceneAutomation, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneAutomation), nil
	}
}

func (s sceneAutomationDo) Find() ([]*model.SceneAutomation, error) {
	result, err := s.DO.Find()
	return result.([]*model.SceneAutomation), err
}

func (s sceneAutomationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SceneAutomation, err error) {
	buf := make([]*model.SceneAutomation, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sceneAutomationDo) FindInBatches(result *[]*model.SceneAutomation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sceneAutomationDo) Attrs(attrs ...field.AssignExpr) ISceneAutomationDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sceneAutomationDo) Assign(attrs ...field.AssignExpr) ISceneAutomationDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sceneAutomationDo) Joins(fields ...field.RelationField) ISceneAutomationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sceneAutomationDo) Preload(fields ...field.RelationField) ISceneAutomationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sceneAutomationDo) FirstOrInit() (*model.SceneAutomation, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneAutomation), nil
	}
}

func (s sceneAutomationDo) FirstOrCreate() (*model.SceneAutomation, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SceneAutomation), nil
	}
}

func (s sceneAutomationDo) FindByPage(offset int, limit int) (result []*model.SceneAutomation, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sceneAutomationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sceneAutomationDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sceneAutomationDo) Delete(models ...*model.SceneAutomation) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sceneAutomationDo) withDO(do gen.Dao) *sceneAutomationDo {
	s.DO = *do.(*gen.DO)
	return s
}
