// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newTelemetrySetLog(db *gorm.DB, opts ...gen.DOOption) telemetrySetLog {
	_telemetrySetLog := telemetrySetLog{}

	_telemetrySetLog.telemetrySetLogDo.UseDB(db, opts...)
	_telemetrySetLog.telemetrySetLogDo.UseModel(&model.TelemetrySetLog{})

	tableName := _telemetrySetLog.telemetrySetLogDo.TableName()
	_telemetrySetLog.ALL = field.NewAsterisk(tableName)
	_telemetrySetLog.ID = field.NewString(tableName, "id")
	_telemetrySetLog.DeviceID = field.NewString(tableName, "device_id")
	_telemetrySetLog.OperationType = field.NewString(tableName, "operation_type")
	_telemetrySetLog.Datum = field.NewString(tableName, "data")
	_telemetrySetLog.Status = field.NewString(tableName, "status")
	_telemetrySetLog.ErrorMessage = field.NewString(tableName, "error_message")
	_telemetrySetLog.CreatedAt = field.NewTime(tableName, "created_at")
	_telemetrySetLog.UserID = field.NewString(tableName, "user_id")
	_telemetrySetLog.Description = field.NewString(tableName, "description")

	_telemetrySetLog.fillFieldMap()

	return _telemetrySetLog
}

type telemetrySetLog struct {
	telemetrySetLogDo

	ALL           field.Asterisk
	ID            field.String
	DeviceID      field.String // 设备id（外键-关联删除）
	OperationType field.String // 操作类型1-手动操作 2-自动触发
	Datum         field.String // 发送内容
	Status        field.String // 1-发送成功 2-失败
	ErrorMessage  field.String // 错误信息
	CreatedAt     field.Time   // 创建时间
	UserID        field.String // 操作用户
	Description   field.String // 描述

	fieldMap map[string]field.Expr
}

func (t telemetrySetLog) Table(newTableName string) *telemetrySetLog {
	t.telemetrySetLogDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t telemetrySetLog) As(alias string) *telemetrySetLog {
	t.telemetrySetLogDo.DO = *(t.telemetrySetLogDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *telemetrySetLog) updateTableName(table string) *telemetrySetLog {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.DeviceID = field.NewString(table, "device_id")
	t.OperationType = field.NewString(table, "operation_type")
	t.Datum = field.NewString(table, "data")
	t.Status = field.NewString(table, "status")
	t.ErrorMessage = field.NewString(table, "error_message")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UserID = field.NewString(table, "user_id")
	t.Description = field.NewString(table, "description")

	t.fillFieldMap()

	return t
}

func (t *telemetrySetLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *telemetrySetLog) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.ID
	t.fieldMap["device_id"] = t.DeviceID
	t.fieldMap["operation_type"] = t.OperationType
	t.fieldMap["data"] = t.Datum
	t.fieldMap["status"] = t.Status
	t.fieldMap["error_message"] = t.ErrorMessage
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["description"] = t.Description
}

func (t telemetrySetLog) clone(db *gorm.DB) telemetrySetLog {
	t.telemetrySetLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t telemetrySetLog) replaceDB(db *gorm.DB) telemetrySetLog {
	t.telemetrySetLogDo.ReplaceDB(db)
	return t
}

type telemetrySetLogDo struct{ gen.DO }

type ITelemetrySetLogDo interface {
	gen.SubQuery
	Debug() ITelemetrySetLogDo
	WithContext(ctx context.Context) ITelemetrySetLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITelemetrySetLogDo
	WriteDB() ITelemetrySetLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITelemetrySetLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITelemetrySetLogDo
	Not(conds ...gen.Condition) ITelemetrySetLogDo
	Or(conds ...gen.Condition) ITelemetrySetLogDo
	Select(conds ...field.Expr) ITelemetrySetLogDo
	Where(conds ...gen.Condition) ITelemetrySetLogDo
	Order(conds ...field.Expr) ITelemetrySetLogDo
	Distinct(cols ...field.Expr) ITelemetrySetLogDo
	Omit(cols ...field.Expr) ITelemetrySetLogDo
	Join(table schema.Tabler, on ...field.Expr) ITelemetrySetLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITelemetrySetLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITelemetrySetLogDo
	Group(cols ...field.Expr) ITelemetrySetLogDo
	Having(conds ...gen.Condition) ITelemetrySetLogDo
	Limit(limit int) ITelemetrySetLogDo
	Offset(offset int) ITelemetrySetLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITelemetrySetLogDo
	Unscoped() ITelemetrySetLogDo
	Create(values ...*model.TelemetrySetLog) error
	CreateInBatches(values []*model.TelemetrySetLog, batchSize int) error
	Save(values ...*model.TelemetrySetLog) error
	First() (*model.TelemetrySetLog, error)
	Take() (*model.TelemetrySetLog, error)
	Last() (*model.TelemetrySetLog, error)
	Find() ([]*model.TelemetrySetLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TelemetrySetLog, err error)
	FindInBatches(result *[]*model.TelemetrySetLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TelemetrySetLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITelemetrySetLogDo
	Assign(attrs ...field.AssignExpr) ITelemetrySetLogDo
	Joins(fields ...field.RelationField) ITelemetrySetLogDo
	Preload(fields ...field.RelationField) ITelemetrySetLogDo
	FirstOrInit() (*model.TelemetrySetLog, error)
	FirstOrCreate() (*model.TelemetrySetLog, error)
	FindByPage(offset int, limit int) (result []*model.TelemetrySetLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITelemetrySetLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t telemetrySetLogDo) Debug() ITelemetrySetLogDo {
	return t.withDO(t.DO.Debug())
}

func (t telemetrySetLogDo) WithContext(ctx context.Context) ITelemetrySetLogDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t telemetrySetLogDo) ReadDB() ITelemetrySetLogDo {
	return t.Clauses(dbresolver.Read)
}

func (t telemetrySetLogDo) WriteDB() ITelemetrySetLogDo {
	return t.Clauses(dbresolver.Write)
}

func (t telemetrySetLogDo) Session(config *gorm.Session) ITelemetrySetLogDo {
	return t.withDO(t.DO.Session(config))
}

func (t telemetrySetLogDo) Clauses(conds ...clause.Expression) ITelemetrySetLogDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t telemetrySetLogDo) Returning(value interface{}, columns ...string) ITelemetrySetLogDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t telemetrySetLogDo) Not(conds ...gen.Condition) ITelemetrySetLogDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t telemetrySetLogDo) Or(conds ...gen.Condition) ITelemetrySetLogDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t telemetrySetLogDo) Select(conds ...field.Expr) ITelemetrySetLogDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t telemetrySetLogDo) Where(conds ...gen.Condition) ITelemetrySetLogDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t telemetrySetLogDo) Order(conds ...field.Expr) ITelemetrySetLogDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t telemetrySetLogDo) Distinct(cols ...field.Expr) ITelemetrySetLogDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t telemetrySetLogDo) Omit(cols ...field.Expr) ITelemetrySetLogDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t telemetrySetLogDo) Join(table schema.Tabler, on ...field.Expr) ITelemetrySetLogDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t telemetrySetLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITelemetrySetLogDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t telemetrySetLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ITelemetrySetLogDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t telemetrySetLogDo) Group(cols ...field.Expr) ITelemetrySetLogDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t telemetrySetLogDo) Having(conds ...gen.Condition) ITelemetrySetLogDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t telemetrySetLogDo) Limit(limit int) ITelemetrySetLogDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t telemetrySetLogDo) Offset(offset int) ITelemetrySetLogDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t telemetrySetLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITelemetrySetLogDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t telemetrySetLogDo) Unscoped() ITelemetrySetLogDo {
	return t.withDO(t.DO.Unscoped())
}

func (t telemetrySetLogDo) Create(values ...*model.TelemetrySetLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t telemetrySetLogDo) CreateInBatches(values []*model.TelemetrySetLog, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t telemetrySetLogDo) Save(values ...*model.TelemetrySetLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t telemetrySetLogDo) First() (*model.TelemetrySetLog, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelemetrySetLog), nil
	}
}

func (t telemetrySetLogDo) Take() (*model.TelemetrySetLog, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelemetrySetLog), nil
	}
}

func (t telemetrySetLogDo) Last() (*model.TelemetrySetLog, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelemetrySetLog), nil
	}
}

func (t telemetrySetLogDo) Find() ([]*model.TelemetrySetLog, error) {
	result, err := t.DO.Find()
	return result.([]*model.TelemetrySetLog), err
}

func (t telemetrySetLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TelemetrySetLog, err error) {
	buf := make([]*model.TelemetrySetLog, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t telemetrySetLogDo) FindInBatches(result *[]*model.TelemetrySetLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t telemetrySetLogDo) Attrs(attrs ...field.AssignExpr) ITelemetrySetLogDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t telemetrySetLogDo) Assign(attrs ...field.AssignExpr) ITelemetrySetLogDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t telemetrySetLogDo) Joins(fields ...field.RelationField) ITelemetrySetLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t telemetrySetLogDo) Preload(fields ...field.RelationField) ITelemetrySetLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t telemetrySetLogDo) FirstOrInit() (*model.TelemetrySetLog, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelemetrySetLog), nil
	}
}

func (t telemetrySetLogDo) FirstOrCreate() (*model.TelemetrySetLog, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TelemetrySetLog), nil
	}
}

func (t telemetrySetLogDo) FindByPage(offset int, limit int) (result []*model.TelemetrySetLog, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t telemetrySetLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t telemetrySetLogDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t telemetrySetLogDo) Delete(models ...*model.TelemetrySetLog) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *telemetrySetLogDo) withDO(do gen.Dao) *telemetrySetLogDo {
	t.DO = *do.(*gen.DO)
	return t
}
