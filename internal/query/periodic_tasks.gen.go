// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"project/internal/model"
)

func newPeriodicTask(db *gorm.DB, opts ...gen.DOOption) periodicTask {
	_periodicTask := periodicTask{}

	_periodicTask.periodicTaskDo.UseDB(db, opts...)
	_periodicTask.periodicTaskDo.UseModel(&model.PeriodicTask{})

	tableName := _periodicTask.periodicTaskDo.TableName()
	_periodicTask.ALL = field.NewAsterisk(tableName)
	_periodicTask.ID = field.NewString(tableName, "id")
	_periodicTask.SceneAutomationID = field.NewString(tableName, "scene_automation_id")
	_periodicTask.TaskType = field.NewString(tableName, "task_type")
	_periodicTask.Param = field.NewString(tableName, "params")
	_periodicTask.ExecutionTime = field.NewTime(tableName, "execution_time")
	_periodicTask.Enabled = field.NewString(tableName, "enabled")
	_periodicTask.Remark = field.NewString(tableName, "remark")
	_periodicTask.ExpirationTime = field.NewInt64(tableName, "expiration_time")

	_periodicTask.fillFieldMap()

	return _periodicTask
}

type periodicTask struct {
	periodicTaskDo

	ALL               field.Asterisk
	ID                field.String
	SceneAutomationID field.String // 场景联动ID（外键-关联删除）
	TaskType          field.String // 任务类型 HOUR DAY WEEK MONTH CRON
	Param             field.String
	ExecutionTime     field.Time   // 执行时间
	Enabled           field.String // 是否启用 Y-启用 N-停用
	Remark            field.String
	ExpirationTime    field.Int64 // 过期时间（默认大于执行时间五分钟）单位分钟

	fieldMap map[string]field.Expr
}

func (p periodicTask) Table(newTableName string) *periodicTask {
	p.periodicTaskDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p periodicTask) As(alias string) *periodicTask {
	p.periodicTaskDo.DO = *(p.periodicTaskDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *periodicTask) updateTableName(table string) *periodicTask {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.SceneAutomationID = field.NewString(table, "scene_automation_id")
	p.TaskType = field.NewString(table, "task_type")
	p.Param = field.NewString(table, "params")
	p.ExecutionTime = field.NewTime(table, "execution_time")
	p.Enabled = field.NewString(table, "enabled")
	p.Remark = field.NewString(table, "remark")
	p.ExpirationTime = field.NewInt64(table, "expiration_time")

	p.fillFieldMap()

	return p
}

func (p *periodicTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *periodicTask) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["scene_automation_id"] = p.SceneAutomationID
	p.fieldMap["task_type"] = p.TaskType
	p.fieldMap["params"] = p.Param
	p.fieldMap["execution_time"] = p.ExecutionTime
	p.fieldMap["enabled"] = p.Enabled
	p.fieldMap["remark"] = p.Remark
	p.fieldMap["expiration_time"] = p.ExpirationTime
}

func (p periodicTask) clone(db *gorm.DB) periodicTask {
	p.periodicTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p periodicTask) replaceDB(db *gorm.DB) periodicTask {
	p.periodicTaskDo.ReplaceDB(db)
	return p
}

type periodicTaskDo struct{ gen.DO }

type IPeriodicTaskDo interface {
	gen.SubQuery
	Debug() IPeriodicTaskDo
	WithContext(ctx context.Context) IPeriodicTaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPeriodicTaskDo
	WriteDB() IPeriodicTaskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPeriodicTaskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPeriodicTaskDo
	Not(conds ...gen.Condition) IPeriodicTaskDo
	Or(conds ...gen.Condition) IPeriodicTaskDo
	Select(conds ...field.Expr) IPeriodicTaskDo
	Where(conds ...gen.Condition) IPeriodicTaskDo
	Order(conds ...field.Expr) IPeriodicTaskDo
	Distinct(cols ...field.Expr) IPeriodicTaskDo
	Omit(cols ...field.Expr) IPeriodicTaskDo
	Join(table schema.Tabler, on ...field.Expr) IPeriodicTaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPeriodicTaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPeriodicTaskDo
	Group(cols ...field.Expr) IPeriodicTaskDo
	Having(conds ...gen.Condition) IPeriodicTaskDo
	Limit(limit int) IPeriodicTaskDo
	Offset(offset int) IPeriodicTaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPeriodicTaskDo
	Unscoped() IPeriodicTaskDo
	Create(values ...*model.PeriodicTask) error
	CreateInBatches(values []*model.PeriodicTask, batchSize int) error
	Save(values ...*model.PeriodicTask) error
	First() (*model.PeriodicTask, error)
	Take() (*model.PeriodicTask, error)
	Last() (*model.PeriodicTask, error)
	Find() ([]*model.PeriodicTask, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PeriodicTask, err error)
	FindInBatches(result *[]*model.PeriodicTask, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PeriodicTask) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPeriodicTaskDo
	Assign(attrs ...field.AssignExpr) IPeriodicTaskDo
	Joins(fields ...field.RelationField) IPeriodicTaskDo
	Preload(fields ...field.RelationField) IPeriodicTaskDo
	FirstOrInit() (*model.PeriodicTask, error)
	FirstOrCreate() (*model.PeriodicTask, error)
	FindByPage(offset int, limit int) (result []*model.PeriodicTask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPeriodicTaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p periodicTaskDo) Debug() IPeriodicTaskDo {
	return p.withDO(p.DO.Debug())
}

func (p periodicTaskDo) WithContext(ctx context.Context) IPeriodicTaskDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p periodicTaskDo) ReadDB() IPeriodicTaskDo {
	return p.Clauses(dbresolver.Read)
}

func (p periodicTaskDo) WriteDB() IPeriodicTaskDo {
	return p.Clauses(dbresolver.Write)
}

func (p periodicTaskDo) Session(config *gorm.Session) IPeriodicTaskDo {
	return p.withDO(p.DO.Session(config))
}

func (p periodicTaskDo) Clauses(conds ...clause.Expression) IPeriodicTaskDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p periodicTaskDo) Returning(value interface{}, columns ...string) IPeriodicTaskDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p periodicTaskDo) Not(conds ...gen.Condition) IPeriodicTaskDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p periodicTaskDo) Or(conds ...gen.Condition) IPeriodicTaskDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p periodicTaskDo) Select(conds ...field.Expr) IPeriodicTaskDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p periodicTaskDo) Where(conds ...gen.Condition) IPeriodicTaskDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p periodicTaskDo) Order(conds ...field.Expr) IPeriodicTaskDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p periodicTaskDo) Distinct(cols ...field.Expr) IPeriodicTaskDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p periodicTaskDo) Omit(cols ...field.Expr) IPeriodicTaskDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p periodicTaskDo) Join(table schema.Tabler, on ...field.Expr) IPeriodicTaskDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p periodicTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPeriodicTaskDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p periodicTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) IPeriodicTaskDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p periodicTaskDo) Group(cols ...field.Expr) IPeriodicTaskDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p periodicTaskDo) Having(conds ...gen.Condition) IPeriodicTaskDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p periodicTaskDo) Limit(limit int) IPeriodicTaskDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p periodicTaskDo) Offset(offset int) IPeriodicTaskDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p periodicTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPeriodicTaskDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p periodicTaskDo) Unscoped() IPeriodicTaskDo {
	return p.withDO(p.DO.Unscoped())
}

func (p periodicTaskDo) Create(values ...*model.PeriodicTask) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p periodicTaskDo) CreateInBatches(values []*model.PeriodicTask, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p periodicTaskDo) Save(values ...*model.PeriodicTask) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p periodicTaskDo) First() (*model.PeriodicTask, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PeriodicTask), nil
	}
}

func (p periodicTaskDo) Take() (*model.PeriodicTask, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PeriodicTask), nil
	}
}

func (p periodicTaskDo) Last() (*model.PeriodicTask, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PeriodicTask), nil
	}
}

func (p periodicTaskDo) Find() ([]*model.PeriodicTask, error) {
	result, err := p.DO.Find()
	return result.([]*model.PeriodicTask), err
}

func (p periodicTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PeriodicTask, err error) {
	buf := make([]*model.PeriodicTask, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p periodicTaskDo) FindInBatches(result *[]*model.PeriodicTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p periodicTaskDo) Attrs(attrs ...field.AssignExpr) IPeriodicTaskDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p periodicTaskDo) Assign(attrs ...field.AssignExpr) IPeriodicTaskDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p periodicTaskDo) Joins(fields ...field.RelationField) IPeriodicTaskDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p periodicTaskDo) Preload(fields ...field.RelationField) IPeriodicTaskDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p periodicTaskDo) FirstOrInit() (*model.PeriodicTask, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PeriodicTask), nil
	}
}

func (p periodicTaskDo) FirstOrCreate() (*model.PeriodicTask, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PeriodicTask), nil
	}
}

func (p periodicTaskDo) FindByPage(offset int, limit int) (result []*model.PeriodicTask, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p periodicTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p periodicTaskDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p periodicTaskDo) Delete(models ...*model.PeriodicTask) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *periodicTaskDo) withDO(do gen.Dao) *periodicTaskDo {
	p.DO = *do.(*gen.DO)
	return p
}
